
F767_LWIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bf8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001624  08008df8  08008df8  00018df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a41c  0800a41c  0001a41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a424  0800a424  0001a424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a428  0800a428  0001a428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  0800a42c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006ac8  20000078  0800a4a4  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20006b40  0800a4a4  00026b40  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   000361e8  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006c8d  00000000  00000000  0005628e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000cee2  00000000  00000000  0005cf1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e98  00000000  00000000  00069e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001630  00000000  00000000  0006ac98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ce3d  00000000  00000000  0006c2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005df7  00000000  00000000  00079105  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0007eefc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000032e8  00000000  00000000  0007ef78  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000009c  00000000  00000000  00082260  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000014d  00000000  00000000  000822fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08008de0 	.word	0x08008de0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08008de0 	.word	0x08008de0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b97a 	b.w	80005fc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	468c      	mov	ip, r1
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	9e08      	ldr	r6, [sp, #32]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d151      	bne.n	80003d4 <__udivmoddi4+0xb4>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d96d      	bls.n	8000412 <__udivmoddi4+0xf2>
 8000336:	fab2 fe82 	clz	lr, r2
 800033a:	f1be 0f00 	cmp.w	lr, #0
 800033e:	d00b      	beq.n	8000358 <__udivmoddi4+0x38>
 8000340:	f1ce 0c20 	rsb	ip, lr, #32
 8000344:	fa01 f50e 	lsl.w	r5, r1, lr
 8000348:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000350:	ea4c 0c05 	orr.w	ip, ip, r5
 8000354:	fa00 f40e 	lsl.w	r4, r0, lr
 8000358:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	fbbc f8fa 	udiv	r8, ip, sl
 8000362:	fa1f f987 	uxth.w	r9, r7
 8000366:	fb0a cc18 	mls	ip, sl, r8, ip
 800036a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036e:	fb08 f309 	mul.w	r3, r8, r9
 8000372:	42ab      	cmp	r3, r5
 8000374:	d90a      	bls.n	800038c <__udivmoddi4+0x6c>
 8000376:	19ed      	adds	r5, r5, r7
 8000378:	f108 32ff 	add.w	r2, r8, #4294967295
 800037c:	f080 8123 	bcs.w	80005c6 <__udivmoddi4+0x2a6>
 8000380:	42ab      	cmp	r3, r5
 8000382:	f240 8120 	bls.w	80005c6 <__udivmoddi4+0x2a6>
 8000386:	f1a8 0802 	sub.w	r8, r8, #2
 800038a:	443d      	add	r5, r7
 800038c:	1aed      	subs	r5, r5, r3
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0fa 	udiv	r0, r5, sl
 8000394:	fb0a 5510 	mls	r5, sl, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb00 f909 	mul.w	r9, r0, r9
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x98>
 80003a4:	19e4      	adds	r4, r4, r7
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	f080 810a 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8107 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 0409 	sub.w	r4, r4, r9
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	2100      	movs	r1, #0
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d061      	beq.n	800048a <__udivmoddi4+0x16a>
 80003c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ca:	2300      	movs	r3, #0
 80003cc:	6034      	str	r4, [r6, #0]
 80003ce:	6073      	str	r3, [r6, #4]
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0xc8>
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d054      	beq.n	8000486 <__udivmoddi4+0x166>
 80003dc:	2100      	movs	r1, #0
 80003de:	e886 0021 	stmia.w	r6, {r0, r5}
 80003e2:	4608      	mov	r0, r1
 80003e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e8:	fab3 f183 	clz	r1, r3
 80003ec:	2900      	cmp	r1, #0
 80003ee:	f040 808e 	bne.w	800050e <__udivmoddi4+0x1ee>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d302      	bcc.n	80003fc <__udivmoddi4+0xdc>
 80003f6:	4282      	cmp	r2, r0
 80003f8:	f200 80fa 	bhi.w	80005f0 <__udivmoddi4+0x2d0>
 80003fc:	1a84      	subs	r4, r0, r2
 80003fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000402:	2001      	movs	r0, #1
 8000404:	46ac      	mov	ip, r5
 8000406:	2e00      	cmp	r6, #0
 8000408:	d03f      	beq.n	800048a <__udivmoddi4+0x16a>
 800040a:	e886 1010 	stmia.w	r6, {r4, ip}
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	b912      	cbnz	r2, 800041a <__udivmoddi4+0xfa>
 8000414:	2701      	movs	r7, #1
 8000416:	fbb7 f7f2 	udiv	r7, r7, r2
 800041a:	fab7 fe87 	clz	lr, r7
 800041e:	f1be 0f00 	cmp.w	lr, #0
 8000422:	d134      	bne.n	800048e <__udivmoddi4+0x16e>
 8000424:	1beb      	subs	r3, r5, r7
 8000426:	0c3a      	lsrs	r2, r7, #16
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	2101      	movs	r1, #1
 800042e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000432:	0c25      	lsrs	r5, r4, #16
 8000434:	fb02 3318 	mls	r3, r2, r8, r3
 8000438:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043c:	fb0c f308 	mul.w	r3, ip, r8
 8000440:	42ab      	cmp	r3, r5
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x134>
 8000444:	19ed      	adds	r5, r5, r7
 8000446:	f108 30ff 	add.w	r0, r8, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x132>
 800044c:	42ab      	cmp	r3, r5
 800044e:	f200 80d1 	bhi.w	80005f4 <__udivmoddi4+0x2d4>
 8000452:	4680      	mov	r8, r0
 8000454:	1aed      	subs	r5, r5, r3
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb5 f0f2 	udiv	r0, r5, r2
 800045c:	fb02 5510 	mls	r5, r2, r0, r5
 8000460:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000464:	fb0c fc00 	mul.w	ip, ip, r0
 8000468:	45a4      	cmp	ip, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x15c>
 800046c:	19e4      	adds	r4, r4, r7
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x15a>
 8000474:	45a4      	cmp	ip, r4
 8000476:	f200 80b8 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 040c 	sub.w	r4, r4, ip
 8000480:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000484:	e79d      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	f1ce 0420 	rsb	r4, lr, #32
 8000492:	fa05 f30e 	lsl.w	r3, r5, lr
 8000496:	fa07 f70e 	lsl.w	r7, r7, lr
 800049a:	fa20 f804 	lsr.w	r8, r0, r4
 800049e:	0c3a      	lsrs	r2, r7, #16
 80004a0:	fa25 f404 	lsr.w	r4, r5, r4
 80004a4:	ea48 0803 	orr.w	r8, r8, r3
 80004a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004b0:	fb02 4411 	mls	r4, r2, r1, r4
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004bc:	fb01 f30c 	mul.w	r3, r1, ip
 80004c0:	42ab      	cmp	r3, r5
 80004c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1bc>
 80004c8:	19ed      	adds	r5, r5, r7
 80004ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ce:	f080 808a 	bcs.w	80005e6 <__udivmoddi4+0x2c6>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	f240 8087 	bls.w	80005e6 <__udivmoddi4+0x2c6>
 80004d8:	3902      	subs	r1, #2
 80004da:	443d      	add	r5, r7
 80004dc:	1aeb      	subs	r3, r5, r3
 80004de:	fa1f f588 	uxth.w	r5, r8
 80004e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004e6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ee:	fb00 f30c 	mul.w	r3, r0, ip
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1e6>
 80004f6:	19ed      	adds	r5, r5, r7
 80004f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fc:	d26f      	bcs.n	80005de <__udivmoddi4+0x2be>
 80004fe:	42ab      	cmp	r3, r5
 8000500:	d96d      	bls.n	80005de <__udivmoddi4+0x2be>
 8000502:	3802      	subs	r0, #2
 8000504:	443d      	add	r5, r7
 8000506:	1aeb      	subs	r3, r5, r3
 8000508:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800050c:	e78f      	b.n	800042e <__udivmoddi4+0x10e>
 800050e:	f1c1 0720 	rsb	r7, r1, #32
 8000512:	fa22 f807 	lsr.w	r8, r2, r7
 8000516:	408b      	lsls	r3, r1
 8000518:	fa05 f401 	lsl.w	r4, r5, r1
 800051c:	ea48 0303 	orr.w	r3, r8, r3
 8000520:	fa20 fe07 	lsr.w	lr, r0, r7
 8000524:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000528:	40fd      	lsrs	r5, r7
 800052a:	ea4e 0e04 	orr.w	lr, lr, r4
 800052e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000532:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000536:	fb0c 5519 	mls	r5, ip, r9, r5
 800053a:	fa1f f883 	uxth.w	r8, r3
 800053e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000542:	fb09 f408 	mul.w	r4, r9, r8
 8000546:	42ac      	cmp	r4, r5
 8000548:	fa02 f201 	lsl.w	r2, r2, r1
 800054c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x244>
 8000552:	18ed      	adds	r5, r5, r3
 8000554:	f109 30ff 	add.w	r0, r9, #4294967295
 8000558:	d243      	bcs.n	80005e2 <__udivmoddi4+0x2c2>
 800055a:	42ac      	cmp	r4, r5
 800055c:	d941      	bls.n	80005e2 <__udivmoddi4+0x2c2>
 800055e:	f1a9 0902 	sub.w	r9, r9, #2
 8000562:	441d      	add	r5, r3
 8000564:	1b2d      	subs	r5, r5, r4
 8000566:	fa1f fe8e 	uxth.w	lr, lr
 800056a:	fbb5 f0fc 	udiv	r0, r5, ip
 800056e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000572:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000576:	fb00 f808 	mul.w	r8, r0, r8
 800057a:	45a0      	cmp	r8, r4
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x26e>
 800057e:	18e4      	adds	r4, r4, r3
 8000580:	f100 35ff 	add.w	r5, r0, #4294967295
 8000584:	d229      	bcs.n	80005da <__udivmoddi4+0x2ba>
 8000586:	45a0      	cmp	r8, r4
 8000588:	d927      	bls.n	80005da <__udivmoddi4+0x2ba>
 800058a:	3802      	subs	r0, #2
 800058c:	441c      	add	r4, r3
 800058e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000592:	eba4 0408 	sub.w	r4, r4, r8
 8000596:	fba0 8902 	umull	r8, r9, r0, r2
 800059a:	454c      	cmp	r4, r9
 800059c:	46c6      	mov	lr, r8
 800059e:	464d      	mov	r5, r9
 80005a0:	d315      	bcc.n	80005ce <__udivmoddi4+0x2ae>
 80005a2:	d012      	beq.n	80005ca <__udivmoddi4+0x2aa>
 80005a4:	b156      	cbz	r6, 80005bc <__udivmoddi4+0x29c>
 80005a6:	ebba 030e 	subs.w	r3, sl, lr
 80005aa:	eb64 0405 	sbc.w	r4, r4, r5
 80005ae:	fa04 f707 	lsl.w	r7, r4, r7
 80005b2:	40cb      	lsrs	r3, r1
 80005b4:	431f      	orrs	r7, r3
 80005b6:	40cc      	lsrs	r4, r1
 80005b8:	6037      	str	r7, [r6, #0]
 80005ba:	6074      	str	r4, [r6, #4]
 80005bc:	2100      	movs	r1, #0
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	4618      	mov	r0, r3
 80005c4:	e6f8      	b.n	80003b8 <__udivmoddi4+0x98>
 80005c6:	4690      	mov	r8, r2
 80005c8:	e6e0      	b.n	800038c <__udivmoddi4+0x6c>
 80005ca:	45c2      	cmp	sl, r8
 80005cc:	d2ea      	bcs.n	80005a4 <__udivmoddi4+0x284>
 80005ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d2:	eb69 0503 	sbc.w	r5, r9, r3
 80005d6:	3801      	subs	r0, #1
 80005d8:	e7e4      	b.n	80005a4 <__udivmoddi4+0x284>
 80005da:	4628      	mov	r0, r5
 80005dc:	e7d7      	b.n	800058e <__udivmoddi4+0x26e>
 80005de:	4640      	mov	r0, r8
 80005e0:	e791      	b.n	8000506 <__udivmoddi4+0x1e6>
 80005e2:	4681      	mov	r9, r0
 80005e4:	e7be      	b.n	8000564 <__udivmoddi4+0x244>
 80005e6:	4601      	mov	r1, r0
 80005e8:	e778      	b.n	80004dc <__udivmoddi4+0x1bc>
 80005ea:	3802      	subs	r0, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e745      	b.n	800047c <__udivmoddi4+0x15c>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e708      	b.n	8000406 <__udivmoddi4+0xe6>
 80005f4:	f1a8 0802 	sub.w	r8, r8, #2
 80005f8:	443d      	add	r5, r7
 80005fa:	e72b      	b.n	8000454 <__udivmoddi4+0x134>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <HAL_InitTick+0x3c>)
{
 8000604:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <HAL_InitTick+0x40>)
 8000608:	7818      	ldrb	r0, [r3, #0]
 800060a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000612:	6810      	ldr	r0, [r2, #0]
 8000614:	fbb0 f0f3 	udiv	r0, r0, r3
 8000618:	f000 f890 	bl	800073c <HAL_SYSTICK_Config>
 800061c:	4604      	mov	r4, r0
 800061e:	b958      	cbnz	r0, 8000638 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000620:	2d0f      	cmp	r5, #15
 8000622:	d809      	bhi.n	8000638 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	4602      	mov	r2, r0
 8000626:	4629      	mov	r1, r5
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f000 f84e 	bl	80006cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <HAL_InitTick+0x44>)
 8000632:	4620      	mov	r0, r4
 8000634:	601d      	str	r5, [r3, #0]
 8000636:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000638:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800063a:	bd38      	pop	{r3, r4, r5, pc}
 800063c:	20000000 	.word	0x20000000
 8000640:	20000010 	.word	0x20000010
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_Init>:
{
 8000648:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064a:	2003      	movs	r0, #3
 800064c:	f000 f82c 	bl	80006a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff ffd5 	bl	8000600 <HAL_InitTick>
  HAL_MspInit();
 8000656:	f007 f907 	bl	8007868 <HAL_MspInit>
}
 800065a:	2000      	movs	r0, #0
 800065c:	bd08      	pop	{r3, pc}
	...

08000660 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000660:	4a03      	ldr	r2, [pc, #12]	; (8000670 <HAL_IncTick+0x10>)
 8000662:	4b04      	ldr	r3, [pc, #16]	; (8000674 <HAL_IncTick+0x14>)
 8000664:	6811      	ldr	r1, [r2, #0]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	440b      	add	r3, r1
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	2000021c 	.word	0x2000021c
 8000674:	20000000 	.word	0x20000000

08000678 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000678:	4b01      	ldr	r3, [pc, #4]	; (8000680 <HAL_GetTick+0x8>)
 800067a:	6818      	ldr	r0, [r3, #0]
}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	2000021c 	.word	0x2000021c

08000684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b538      	push	{r3, r4, r5, lr}
 8000686:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000688:	f7ff fff6 	bl	8000678 <HAL_GetTick>
 800068c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000690:	bf1e      	ittt	ne
 8000692:	4b04      	ldrne	r3, [pc, #16]	; (80006a4 <HAL_Delay+0x20>)
 8000694:	781b      	ldrbne	r3, [r3, #0]
 8000696:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000698:	f7ff ffee 	bl	8000678 <HAL_GetTick>
 800069c:	1b40      	subs	r0, r0, r5
 800069e:	4284      	cmp	r4, r0
 80006a0:	d8fa      	bhi.n	8000698 <HAL_Delay+0x14>
  {
  }
}
 80006a2:	bd38      	pop	{r3, r4, r5, pc}
 80006a4:	20000000 	.word	0x20000000

080006a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006aa:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006b6:	041b      	lsls	r3, r3, #16
 80006b8:	0c1b      	lsrs	r3, r3, #16
 80006ba:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006c2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006c4:	60d3      	str	r3, [r2, #12]
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	68dc      	ldr	r4, [r3, #12]
 80006d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006dc:	2b04      	cmp	r3, #4
 80006de:	bf28      	it	cs
 80006e0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e8:	bf8c      	ite	hi
 80006ea:	3c03      	subhi	r4, #3
 80006ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ee:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 80006f2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80006f8:	ea01 0103 	and.w	r1, r1, r3
 80006fc:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000700:	fa05 f404 	lsl.w	r4, r5, r4
 8000704:	f104 34ff 	add.w	r4, r4, #4294967295
 8000708:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	ea42 0201 	orr.w	r2, r2, r1
 8000710:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8000714:	da05      	bge.n	8000722 <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	f000 000f 	and.w	r0, r0, #15
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_NVIC_SetPriority+0x6c>)
 800071e:	541a      	strb	r2, [r3, r0]
 8000720:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800072c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00
 8000738:	e000ed14 	.word	0xe000ed14

0800073c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800073c:	3801      	subs	r0, #1
 800073e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000742:	d20a      	bcs.n	800075a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000746:	21f0      	movs	r1, #240	; 0xf0
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800074c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000752:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000754:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800075a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000e010 	.word	0xe000e010
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800076a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	bf0c      	ite	eq
 8000770:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000774:	f022 0204 	bicne.w	r2, r2, #4
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	4770      	bx	lr
 800077c:	e000e010 	.word	0xe000e010

08000780 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000780:	4770      	bx	lr

08000782 <HAL_SYSTICK_IRQHandler>:
{
 8000782:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000784:	f7ff fffc 	bl	8000780 <HAL_SYSTICK_Callback>
 8000788:	bd08      	pop	{r3, pc}

0800078a <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 800078a:	2300      	movs	r3, #0
{
 800078c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800078e:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 8000792:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000794:	6803      	ldr	r3, [r0, #0]
{
 8000796:	4605      	mov	r5, r0
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000798:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800079a:	591a      	ldr	r2, [r3, r4]
 800079c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80007a0:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 80007a2:	591b      	ldr	r3, [r3, r4]
 80007a4:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007a6:	f7ff ff6d 	bl	8000684 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80007aa:	682b      	ldr	r3, [r5, #0]
 80007ac:	9a01      	ldr	r2, [sp, #4]
 80007ae:	511a      	str	r2, [r3, r4]
}
 80007b0:	b003      	add	sp, #12
 80007b2:	bd30      	pop	{r4, r5, pc}

080007b4 <ETH_MACDMAConfig>:
{
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80007b8:	b129      	cbz	r1, 80007c6 <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80007ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007be:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 80007c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007c4:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80007c6:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 80007c8:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80007ca:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 80007cc:	68e0      	ldr	r0, [r4, #12]
 80007ce:	68a3      	ldr	r3, [r4, #8]
  tmpreg = (heth->Instance)->MACCR;
 80007d0:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80007d2:	bf08      	it	eq
 80007d4:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                       macinit.LoopbackMode |
 80007d8:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80007dc:	482e      	ldr	r0, [pc, #184]	; (8000898 <ETH_MACDMAConfig+0xe4>)
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80007de:	bf18      	it	ne
 80007e0:	2100      	movne	r1, #0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80007e2:	4028      	ands	r0, r5
 80007e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e8:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ea:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80007ec:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80007ee:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 80007f0:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007f2:	f7ff ff47 	bl	8000684 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80007f6:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007f8:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007fa:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 80007fc:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007fe:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8000800:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000802:	f7ff ff3f 	bl	8000684 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8000806:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000808:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 800080a:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800080c:	2500      	movs	r5, #0
 800080e:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000810:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8000812:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8000814:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8000818:	0412      	lsls	r2, r2, #16
 800081a:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800081c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8000820:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8000822:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000824:	f7ff ff2e 	bl	8000684 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8000828:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800082a:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 800082c:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800082e:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8000830:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000832:	f7ff ff27 	bl	8000684 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8000836:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000838:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 800083c:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 800083e:	f241 0518 	movw	r5, #4120	; 0x1018
 8000842:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000844:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000846:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 800084a:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800084e:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 8000850:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000852:	f7ff ff17 	bl	8000684 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8000856:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000858:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800085a:	4a11      	ldr	r2, [pc, #68]	; (80008a0 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg;
 800085c:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800085e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000862:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8000864:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000866:	f7ff ff0d 	bl	8000684 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800086a:	6822      	ldr	r2, [r4, #0]
 800086c:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000870:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000872:	69a3      	ldr	r3, [r4, #24]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d107      	bne.n	8000888 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000878:	f241 011c 	movw	r1, #4124	; 0x101c
 800087c:	5853      	ldr	r3, [r2, r1]
 800087e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000886:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000888:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800088a:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <ETH_MACDMAConfig+0xf0>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800088c:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800088e:	6011      	str	r1, [r2, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8000890:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <ETH_MACDMAConfig+0xf4>)
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	ff20810f 	.word	0xff20810f
 800089c:	f8de3f23 	.word	0xf8de3f23
 80008a0:	02c12080 	.word	0x02c12080
 80008a4:	40028040 	.word	0x40028040
 80008a8:	40028044 	.word	0x40028044

080008ac <HAL_ETH_DMATxDescListInit>:
{
 80008ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80008ae:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80008b2:	2c01      	cmp	r4, #1
 80008b4:	f04f 0402 	mov.w	r4, #2
 80008b8:	d033      	beq.n	8000922 <HAL_ETH_DMATxDescListInit+0x76>
 80008ba:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80008bc:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80008c0:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 80008c4:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 80008c8:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80008cc:	f240 5ef4 	movw	lr, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 80008d0:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
 80008d2:	f103 3cff 	add.w	ip, r3, #4294967295
  heth->TxDesc = DMATxDescTab;
 80008d6:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 80008d8:	429d      	cmp	r5, r3
 80008da:	d10b      	bne.n	80008f4 <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80008dc:	6802      	ldr	r2, [r0, #0]
 80008de:	f241 0310 	movw	r3, #4112	; 0x1010
 80008e2:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80008e4:	2301      	movs	r3, #1
 80008e6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80008ea:	2300      	movs	r3, #0
 80008ec:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80008f0:	4618      	mov	r0, r3
 80008f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80008f4:	fb0e 2605 	mla	r6, lr, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80008f8:	f844 7c20 	str.w	r7, [r4, #-32]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80008fc:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000900:	69c6      	ldr	r6, [r0, #28]
 8000902:	b92e      	cbnz	r6, 8000910 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000904:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8000908:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 800090c:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8000910:	4565      	cmp	r5, ip
 8000912:	bf2c      	ite	cs
 8000914:	460e      	movcs	r6, r1
 8000916:	4626      	movcc	r6, r4
  for(i=0; i < TxBuffCount; i++)
 8000918:	3501      	adds	r5, #1
 800091a:	3420      	adds	r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800091c:	f844 6c34 	str.w	r6, [r4, #-52]
 8000920:	e7da      	b.n	80008d8 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8000922:	4620      	mov	r0, r4
}
 8000924:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000926 <HAL_ETH_DMARxDescListInit>:
{
 8000926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 800092a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800092e:	2c01      	cmp	r4, #1
 8000930:	f04f 0402 	mov.w	r4, #2
 8000934:	d030      	beq.n	8000998 <HAL_ETH_DMARxDescListInit+0x72>
 8000936:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000938:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800093c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8000940:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 8000944:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000948:	f244 57f4 	movw	r7, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
 800094c:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800094e:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 8000952:	f103 3cff 	add.w	ip, r3, #4294967295
  heth->RxDesc = DMARxDescTab; 
 8000956:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 8000958:	429d      	cmp	r5, r3
 800095a:	d10c      	bne.n	8000976 <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800095c:	6802      	ldr	r2, [r0, #0]
 800095e:	f241 030c 	movw	r3, #4108	; 0x100c
 8000962:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000964:	2301      	movs	r3, #1
 8000966:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800096a:	2300      	movs	r3, #0
 800096c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000970:	4618      	mov	r0, r3
 8000972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000976:	fb0e 2805 	mla	r8, lr, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800097a:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800097e:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8000982:	4565      	cmp	r5, ip
 8000984:	bf2c      	ite	cs
 8000986:	4688      	movcs	r8, r1
 8000988:	46a0      	movcc	r8, r4
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800098a:	f844 7c1c 	str.w	r7, [r4, #-28]
  for(i=0; i < RxBuffCount; i++)
 800098e:	3501      	adds	r5, #1
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8000990:	f844 8c14 	str.w	r8, [r4, #-20]
 8000994:	3420      	adds	r4, #32
 8000996:	e7df      	b.n	8000958 <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 8000998:	4620      	mov	r0, r4
}
 800099a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080009a0 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 80009a0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	f04f 0302 	mov.w	r3, #2
{
 80009aa:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80009ac:	d066      	beq.n	8000a7c <HAL_ETH_TransmitFrame+0xdc>
 80009ae:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80009b0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 80009b4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
 80009b8:	b929      	cbnz	r1, 80009c6 <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 80009ba:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80009be:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 80009c2:	4610      	mov	r0, r2
 80009c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80009c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80009c8:	681c      	ldr	r4, [r3, #0]
 80009ca:	2c00      	cmp	r4, #0
 80009cc:	da06      	bge.n	80009dc <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80009ce:	2312      	movs	r3, #18
 80009d0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80009d4:	2300      	movs	r3, #0
 80009d6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80009da:	e7f2      	b.n	80009c2 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 80009dc:	f240 54f4 	movw	r4, #1524	; 0x5f4
 80009e0:	42a1      	cmp	r1, r4
 80009e2:	d92c      	bls.n	8000a3e <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80009e4:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80009e8:	fb04 1412 	mls	r4, r4, r2, r1
 80009ec:	b32c      	cbz	r4, 8000a3a <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
 80009ee:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80009f0:	4c23      	ldr	r4, [pc, #140]	; (8000a80 <HAL_ETH_TransmitFrame+0xe0>)
 80009f2:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80009f6:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1))
 80009fa:	1e57      	subs	r7, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80009fc:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000a00:	2400      	movs	r4, #0
 8000a02:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000a06:	681d      	ldr	r5, [r3, #0]
 8000a08:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8000a0c:	601d      	str	r5, [r3, #0]
      if (i == 0) 
 8000a0e:	b91c      	cbnz	r4, 8000a18 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000a10:	681d      	ldr	r5, [r3, #0]
 8000a12:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8000a16:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
 8000a18:	42a7      	cmp	r7, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000a1a:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 8000a1c:	d104      	bne.n	8000a28 <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000a1e:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000a20:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000a22:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8000a26:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a28:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
 8000a2a:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a2c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8000a30:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a32:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a34:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 8000a36:	d1e6      	bne.n	8000a06 <HAL_ETH_TransmitFrame+0x66>
 8000a38:	e00d      	b.n	8000a56 <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
 8000a3a:	2a01      	cmp	r2, #1
 8000a3c:	d1d8      	bne.n	80009f0 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000a3e:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000a40:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000a44:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000a48:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000a4a:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000a52:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000a58:	f241 0214 	movw	r2, #4116	; 0x1014
 8000a5c:	6803      	ldr	r3, [r0, #0]
 8000a5e:	5899      	ldr	r1, [r3, r2]
 8000a60:	0749      	lsls	r1, r1, #29
 8000a62:	d505      	bpl.n	8000a70 <HAL_ETH_TransmitFrame+0xd0>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000a64:	2104      	movs	r1, #4
 8000a66:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 8000a68:	2100      	movs	r1, #0
 8000a6a:	f241 0204 	movw	r2, #4100	; 0x1004
 8000a6e:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8000a70:	2301      	movs	r3, #1
 8000a72:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000a76:	2300      	movs	r3, #0
 8000a78:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8000a7c:	4618      	mov	r0, r3
}
 8000a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a80:	fffffa0c 	.word	0xfffffa0c

08000a84 <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 8000a84:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	f04f 0302 	mov.w	r3, #2
{
 8000a8e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(heth);
 8000a90:	d023      	beq.n	8000ada <HAL_ETH_GetReceivedFrame+0x56>
  heth->State = HAL_ETH_STATE_BUSY;
 8000a92:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8000a96:	2401      	movs	r4, #1
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8000a98:	6a83      	ldr	r3, [r0, #40]	; 0x28
  __HAL_LOCK(heth);
 8000a9a:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	db27      	blt.n	8000af4 <HAL_ETH_GetReceivedFrame+0x70>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	68d9      	ldr	r1, [r3, #12]
 8000aa8:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000aac:	d017      	beq.n	8000ade <HAL_ETH_GetReceivedFrame+0x5a>
      (heth->RxFrameInfos).SegCount++;
 8000aae:	6b82      	ldr	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000ab0:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount++;
 8000ab2:	4422      	add	r2, r4
      if ((heth->RxFrameInfos).SegCount == 1)
 8000ab4:	42a2      	cmp	r2, r4
      (heth->RxFrameInfos).SegCount++;
 8000ab6:	6382      	str	r2, [r0, #56]	; 0x38
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8000ab8:	bf08      	it	eq
 8000aba:	6303      	streq	r3, [r0, #48]	; 0x30
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8000ac2:	3b04      	subs	r3, #4
      heth->RxFrameInfos.length = framelength;
 8000ac4:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000ac6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000ac8:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8000aca:	6281      	str	r1, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000acc:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	bd30      	pop	{r4, r5, pc}
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8000ade:	681d      	ldr	r5, [r3, #0]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000ae0:	6281      	str	r1, [r0, #40]	; 0x28
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8000ae2:	05ad      	lsls	r5, r5, #22
      (heth->RxFrameInfos).SegCount++;
 8000ae4:	bf55      	itete	pl
 8000ae6:	6b83      	ldrpl	r3, [r0, #56]	; 0x38
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8000ae8:	6303      	strmi	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).SegCount++;
 8000aea:	3301      	addpl	r3, #1
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8000aec:	6342      	strmi	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8000aee:	bf4c      	ite	mi
 8000af0:	6384      	strmi	r4, [r0, #56]	; 0x38
      (heth->RxFrameInfos).SegCount++;
 8000af2:	6383      	strpl	r3, [r0, #56]	; 0x38
  heth->State = HAL_ETH_STATE_READY;
 8000af4:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000af6:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000af8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000afc:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000b00:	e7eb      	b.n	8000ada <HAL_ETH_GetReceivedFrame+0x56>

08000b02 <HAL_ETH_ReadPHYRegister>:
{
 8000b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b04:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8000b08:	4605      	mov	r5, r0
 8000b0a:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b0c:	2b82      	cmp	r3, #130	; 0x82
 8000b0e:	d030      	beq.n	8000b72 <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg = heth->Instance->MACMIIAR;
 8000b10:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b12:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b14:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b16:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8000b1a:	6913      	ldr	r3, [r2, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b1c:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000b20:	f003 011c 	and.w	r1, r3, #28
 8000b24:	4321      	orrs	r1, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b26:	8a04      	ldrh	r4, [r0, #16]
 8000b28:	02e4      	lsls	r4, r4, #11
 8000b2a:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000b2c:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000b2e:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8000b32:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000b34:	f7ff fda0 	bl	8000678 <HAL_GetTick>
 8000b38:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b3a:	f014 0001 	ands.w	r0, r4, #1
 8000b3e:	d107      	bne.n	8000b50 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000b40:	682b      	ldr	r3, [r5, #0]
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000b50:	f7ff fd92 	bl	8000678 <HAL_GetTick>
 8000b54:	1bc0      	subs	r0, r0, r7
 8000b56:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b5a:	d307      	bcc.n	8000b6c <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000b5c:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000b5e:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000b60:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b64:	2300      	movs	r3, #0
 8000b66:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000b6c:	682b      	ldr	r3, [r5, #0]
 8000b6e:	691c      	ldr	r4, [r3, #16]
 8000b70:	e7e3      	b.n	8000b3a <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000b72:	2002      	movs	r0, #2
}
 8000b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b76 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b76:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000b7a:	2b42      	cmp	r3, #66	; 0x42
{
 8000b7c:	b570      	push	{r4, r5, r6, lr}
 8000b7e:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b80:	d02e      	beq.n	8000be0 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000b82:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b84:	018c      	lsls	r4, r1, #6
 8000b86:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000b88:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b8c:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 8000b90:	6803      	ldr	r3, [r0, #0]
 8000b92:	f044 0403 	orr.w	r4, r4, #3
 8000b96:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000b98:	f000 001c 	and.w	r0, r0, #28
 8000b9c:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000b9e:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000ba0:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000ba2:	02e4      	lsls	r4, r4, #11
 8000ba4:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000ba6:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 8000ba8:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000baa:	f7ff fd65 	bl	8000678 <HAL_GetTick>
 8000bae:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000bb0:	f014 0001 	ands.w	r0, r4, #1
 8000bb4:	d103      	bne.n	8000bbe <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000bbc:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000bbe:	f7ff fd5b 	bl	8000678 <HAL_GetTick>
 8000bc2:	1b80      	subs	r0, r0, r6
 8000bc4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000bc8:	d307      	bcc.n	8000bda <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000bca:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000bcc:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000bce:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 8000bd8:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000bda:	682b      	ldr	r3, [r5, #0]
 8000bdc:	691c      	ldr	r4, [r3, #16]
 8000bde:	e7e7      	b.n	8000bb0 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000be0:	2002      	movs	r0, #2
}
 8000be2:	bd70      	pop	{r4, r5, r6, pc}

08000be4 <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8000be4:	2300      	movs	r3, #0
{
 8000be6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8000be8:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 8000bea:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000bec:	2800      	cmp	r0, #0
 8000bee:	f000 80dc 	beq.w	8000daa <HAL_ETH_Init+0x1c6>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000bf2:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bf6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bfa:	b91b      	cbnz	r3, 8000c04 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000bfc:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000c00:	f006 facc 	bl	800719c <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c04:	4b6a      	ldr	r3, [pc, #424]	; (8000db0 <HAL_ETH_Init+0x1cc>)
 8000c06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c0c:	645a      	str	r2, [r3, #68]	; 0x44
 8000c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000c18:	4b66      	ldr	r3, [pc, #408]	; (8000db4 <HAL_ETH_Init+0x1d0>)
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000c20:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000c22:	685a      	ldr	r2, [r3, #4]
 8000c24:	6a21      	ldr	r1, [r4, #32]
 8000c26:	430a      	orrs	r2, r1
 8000c28:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	f042 0201 	orr.w	r2, r2, #1
 8000c36:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c38:	f7ff fd1e 	bl	8000678 <HAL_GetTick>
 8000c3c:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000c3e:	6823      	ldr	r3, [r4, #0]
 8000c40:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000c44:	6812      	ldr	r2, [r2, #0]
 8000c46:	07d0      	lsls	r0, r2, #31
 8000c48:	d41d      	bmi.n	8000c86 <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 8000c4a:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000c4c:	f000 fc8a 	bl	8001564 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000c50:	4b59      	ldr	r3, [pc, #356]	; (8000db8 <HAL_ETH_Init+0x1d4>)
 8000c52:	4a5a      	ldr	r2, [pc, #360]	; (8000dbc <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000c54:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000c58:	4403      	add	r3, r0
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d822      	bhi.n	8000ca4 <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000c5e:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000c62:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000c6c:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c6e:	f7ff ff82 	bl	8000b76 <HAL_ETH_WritePHYRegister>
 8000c72:	4605      	mov	r5, r0
 8000c74:	b368      	cbz	r0, 8000cd2 <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 8000c76:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000c78:	2101      	movs	r1, #1
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	f7ff fd9a 	bl	80007b4 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000c80:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000c84:	e00b      	b.n	8000c9e <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000c86:	f7ff fcf7 	bl	8000678 <HAL_GetTick>
 8000c8a:	1b40      	subs	r0, r0, r5
 8000c8c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000c90:	d9d5      	bls.n	8000c3e <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c92:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000c94:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c96:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	b003      	add	sp, #12
 8000ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000ca4:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <HAL_ETH_Init+0x1dc>)
 8000ca6:	4a47      	ldr	r2, [pc, #284]	; (8000dc4 <HAL_ETH_Init+0x1e0>)
 8000ca8:	4403      	add	r3, r0
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d802      	bhi.n	8000cb4 <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000cae:	f045 050c 	orr.w	r5, r5, #12
 8000cb2:	e7d6      	b.n	8000c62 <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000cb4:	4b44      	ldr	r3, [pc, #272]	; (8000dc8 <HAL_ETH_Init+0x1e4>)
 8000cb6:	4a45      	ldr	r2, [pc, #276]	; (8000dcc <HAL_ETH_Init+0x1e8>)
 8000cb8:	4403      	add	r3, r0
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d9d1      	bls.n	8000c62 <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000cbe:	4b44      	ldr	r3, [pc, #272]	; (8000dd0 <HAL_ETH_Init+0x1ec>)
 8000cc0:	4a44      	ldr	r2, [pc, #272]	; (8000dd4 <HAL_ETH_Init+0x1f0>)
 8000cc2:	4403      	add	r3, r0
 8000cc4:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000cc6:	bf94      	ite	ls
 8000cc8:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000ccc:	f045 0510 	orrhi.w	r5, r5, #16
 8000cd0:	e7c7      	b.n	8000c62 <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 8000cd2:	20ff      	movs	r0, #255	; 0xff
 8000cd4:	f7ff fcd6 	bl	8000684 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000cd8:	6863      	ldr	r3, [r4, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d053      	beq.n	8000d86 <HAL_ETH_Init+0x1a2>
    tickstart = HAL_GetTick();
 8000cde:	f7ff fccb 	bl	8000678 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000ce2:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000ce6:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000ce8:	466a      	mov	r2, sp
 8000cea:	2101      	movs	r1, #1
 8000cec:	4620      	mov	r0, r4
 8000cee:	f7ff ff08 	bl	8000b02 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000cf2:	f7ff fcc1 	bl	8000678 <HAL_GetTick>
 8000cf6:	1b80      	subs	r0, r0, r6
 8000cf8:	42b8      	cmp	r0, r7
 8000cfa:	d90b      	bls.n	8000d14 <HAL_ETH_Init+0x130>
        ETH_MACDMAConfig(heth, err);
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	4620      	mov	r0, r4
 8000d00:	f7ff fd58 	bl	80007b4 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000d04:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8000d06:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8000d08:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000d12:	e7c4      	b.n	8000c9e <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d14:	9b00      	ldr	r3, [sp, #0]
 8000d16:	0759      	lsls	r1, r3, #29
 8000d18:	d5e6      	bpl.n	8000ce8 <HAL_ETH_Init+0x104>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4620      	mov	r0, r4
 8000d22:	f7ff ff28 	bl	8000b76 <HAL_ETH_WritePHYRegister>
 8000d26:	2800      	cmp	r0, #0
 8000d28:	d1a5      	bne.n	8000c76 <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8000d2a:	f7ff fca5 	bl	8000678 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d2e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d32:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d34:	466a      	mov	r2, sp
 8000d36:	2101      	movs	r1, #1
 8000d38:	4620      	mov	r0, r4
 8000d3a:	f7ff fee2 	bl	8000b02 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d3e:	f7ff fc9b 	bl	8000678 <HAL_GetTick>
 8000d42:	1b80      	subs	r0, r0, r6
 8000d44:	42b8      	cmp	r0, r7
 8000d46:	d8d9      	bhi.n	8000cfc <HAL_ETH_Init+0x118>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d48:	9b00      	ldr	r3, [sp, #0]
 8000d4a:	069a      	lsls	r2, r3, #26
 8000d4c:	d5f2      	bpl.n	8000d34 <HAL_ETH_Init+0x150>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000d4e:	466a      	mov	r2, sp
 8000d50:	2110      	movs	r1, #16
 8000d52:	4620      	mov	r0, r4
 8000d54:	f7ff fed5 	bl	8000b02 <HAL_ETH_ReadPHYRegister>
 8000d58:	2800      	cmp	r0, #0
 8000d5a:	d18c      	bne.n	8000c76 <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000d5c:	9b00      	ldr	r3, [sp, #0]
 8000d5e:	f013 0204 	ands.w	r2, r3, #4
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000d62:	bf18      	it	ne
 8000d64:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000d68:	079b      	lsls	r3, r3, #30
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000d6a:	bf4c      	ite	mi
 8000d6c:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d6e:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000d72:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d74:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000d76:	2100      	movs	r1, #0
 8000d78:	4620      	mov	r0, r4
 8000d7a:	f7ff fd1b 	bl	80007b4 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000d84:	e78b      	b.n	8000c9e <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000d86:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000d88:	4629      	mov	r1, r5
 8000d8a:	68e2      	ldr	r2, [r4, #12]
 8000d8c:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000d8e:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000d90:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000d94:	b292      	uxth	r2, r2
 8000d96:	f7ff feee 	bl	8000b76 <HAL_ETH_WritePHYRegister>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	f47f af6b 	bne.w	8000c76 <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000da0:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000da4:	f7ff fc6e 	bl	8000684 <HAL_Delay>
 8000da8:	e7e5      	b.n	8000d76 <HAL_ETH_Init+0x192>
    return HAL_ERROR;
 8000daa:	2501      	movs	r5, #1
 8000dac:	e777      	b.n	8000c9e <HAL_ETH_Init+0xba>
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40013800 	.word	0x40013800
 8000db8:	feced300 	.word	0xfeced300
 8000dbc:	00e4e1bf 	.word	0x00e4e1bf
 8000dc0:	fde9f140 	.word	0xfde9f140
 8000dc4:	017d783f 	.word	0x017d783f
 8000dc8:	fc6c7900 	.word	0xfc6c7900
 8000dcc:	026259ff 	.word	0x026259ff
 8000dd0:	fa0a1f00 	.word	0xfa0a1f00
 8000dd4:	02faf07f 	.word	0x02faf07f

08000dd8 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000dd8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000ddc:	2b01      	cmp	r3, #1
{  
 8000dde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000de0:	4605      	mov	r5, r0
 8000de2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8000de6:	d033      	beq.n	8000e50 <HAL_ETH_Start+0x78>
  __IO uint32_t tmpreg = 0;
 8000de8:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dea:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000dec:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __HAL_LOCK(heth);
 8000df0:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 8000df2:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000df4:	681a      	ldr	r2, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000df6:	4630      	mov	r0, r6
  __HAL_LOCK(heth);
 8000df8:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dfc:	f042 0208 	orr.w	r2, r2, #8
 8000e00:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e06:	f7ff fc3d 	bl	8000684 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8000e0a:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e0c:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8000e0e:	682b      	ldr	r3, [r5, #0]
 8000e10:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8000e12:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	f042 0204 	orr.w	r2, r2, #4
 8000e1a:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e20:	f7ff fc30 	bl	8000684 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8000e24:	682b      	ldr	r3, [r5, #0]
  ETH_FlushTransmitFIFO(heth);
 8000e26:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8000e28:	9a00      	ldr	r2, [sp, #0]
 8000e2a:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000e2c:	f7ff fcad 	bl	800078a <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e30:	682a      	ldr	r2, [r5, #0]
 8000e32:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8000e36:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e38:	58d1      	ldr	r1, [r2, r3]
 8000e3a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000e3e:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000e40:	58d1      	ldr	r1, [r2, r3]
 8000e42:	f041 0102 	orr.w	r1, r1, #2
 8000e46:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000e48:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000e4c:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8000e50:	b002      	add	sp, #8
 8000e52:	bd70      	pop	{r4, r5, r6, pc}

08000e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e58:	680b      	ldr	r3, [r1, #0]
{
 8000e5a:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001020 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e60:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e62:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e64:	4a6c      	ldr	r2, [pc, #432]	; (8001018 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e66:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8001024 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000e6a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6e:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000e70:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e74:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000e78:	45b6      	cmp	lr, r6
 8000e7a:	f040 80b3 	bne.w	8000fe4 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7e:	684c      	ldr	r4, [r1, #4]
 8000e80:	f024 0710 	bic.w	r7, r4, #16
 8000e84:	2f02      	cmp	r7, #2
 8000e86:	d116      	bne.n	8000eb6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000e88:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e8c:	f003 0b07 	and.w	fp, r3, #7
 8000e90:	f04f 0c0f 	mov.w	ip, #15
 8000e94:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000e98:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000e9c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ea0:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000ea4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ea8:	690d      	ldr	r5, [r1, #16]
 8000eaa:	fa05 f50b 	lsl.w	r5, r5, fp
 8000eae:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000eb2:	f8ca 5020 	str.w	r5, [sl, #32]
 8000eb6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000eba:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000ebc:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ec0:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ec4:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000eca:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ece:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed0:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ed2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ed6:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000eda:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ede:	d811      	bhi.n	8000f04 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000ee0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ee2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ee6:	68cf      	ldr	r7, [r1, #12]
 8000ee8:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000eec:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000ef0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ef2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ef8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000efc:	409f      	lsls	r7, r3
 8000efe:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000f02:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000f04:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f06:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f08:	688f      	ldr	r7, [r1, #8]
 8000f0a:	fa07 f70a 	lsl.w	r7, r7, sl
 8000f0e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000f10:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f12:	00e5      	lsls	r5, r4, #3
 8000f14:	d566      	bpl.n	8000fe4 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000f1a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f1e:	f003 0e03 	and.w	lr, r3, #3
 8000f22:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000f2a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f2e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000f36:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000f3a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000f3e:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000f42:	9503      	str	r5, [sp, #12]
 8000f44:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f46:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000f4a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f4e:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f52:	4d32      	ldr	r5, [pc, #200]	; (800101c <HAL_GPIO_Init+0x1c8>)
 8000f54:	42a8      	cmp	r0, r5
 8000f56:	d04c      	beq.n	8000ff2 <HAL_GPIO_Init+0x19e>
 8000f58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f5c:	42a8      	cmp	r0, r5
 8000f5e:	d04a      	beq.n	8000ff6 <HAL_GPIO_Init+0x1a2>
 8000f60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f64:	42a8      	cmp	r0, r5
 8000f66:	d048      	beq.n	8000ffa <HAL_GPIO_Init+0x1a6>
 8000f68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f6c:	42a8      	cmp	r0, r5
 8000f6e:	d046      	beq.n	8000ffe <HAL_GPIO_Init+0x1aa>
 8000f70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f74:	42a8      	cmp	r0, r5
 8000f76:	d044      	beq.n	8001002 <HAL_GPIO_Init+0x1ae>
 8000f78:	4548      	cmp	r0, r9
 8000f7a:	d044      	beq.n	8001006 <HAL_GPIO_Init+0x1b2>
 8000f7c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000f80:	42a8      	cmp	r0, r5
 8000f82:	d042      	beq.n	800100a <HAL_GPIO_Init+0x1b6>
 8000f84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f88:	42a8      	cmp	r0, r5
 8000f8a:	d040      	beq.n	800100e <HAL_GPIO_Init+0x1ba>
 8000f8c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f90:	42a8      	cmp	r0, r5
 8000f92:	d03e      	beq.n	8001012 <HAL_GPIO_Init+0x1be>
 8000f94:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f98:	42a8      	cmp	r0, r5
 8000f9a:	bf14      	ite	ne
 8000f9c:	250a      	movne	r5, #10
 8000f9e:	2509      	moveq	r5, #9
 8000fa0:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fa4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fa8:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fac:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000fae:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000fb2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000fb4:	bf0c      	ite	eq
 8000fb6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fb8:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fba:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000fbe:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000fc0:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000fc2:	bf0c      	ite	eq
 8000fc4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fc6:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000fcc:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000fce:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	bf0c      	ite	eq
 8000fd2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fd4:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fd6:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000fd8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000fda:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	bf54      	ite	pl
 8000fde:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000fe0:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000fe2:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	2b10      	cmp	r3, #16
 8000fe8:	f47f af3f 	bne.w	8000e6a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000fec:	b005      	add	sp, #20
 8000fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ff2:	2500      	movs	r5, #0
 8000ff4:	e7d4      	b.n	8000fa0 <HAL_GPIO_Init+0x14c>
 8000ff6:	2501      	movs	r5, #1
 8000ff8:	e7d2      	b.n	8000fa0 <HAL_GPIO_Init+0x14c>
 8000ffa:	2502      	movs	r5, #2
 8000ffc:	e7d0      	b.n	8000fa0 <HAL_GPIO_Init+0x14c>
 8000ffe:	2503      	movs	r5, #3
 8001000:	e7ce      	b.n	8000fa0 <HAL_GPIO_Init+0x14c>
 8001002:	2504      	movs	r5, #4
 8001004:	e7cc      	b.n	8000fa0 <HAL_GPIO_Init+0x14c>
 8001006:	2505      	movs	r5, #5
 8001008:	e7ca      	b.n	8000fa0 <HAL_GPIO_Init+0x14c>
 800100a:	2506      	movs	r5, #6
 800100c:	e7c8      	b.n	8000fa0 <HAL_GPIO_Init+0x14c>
 800100e:	2507      	movs	r5, #7
 8001010:	e7c6      	b.n	8000fa0 <HAL_GPIO_Init+0x14c>
 8001012:	2508      	movs	r5, #8
 8001014:	e7c4      	b.n	8000fa0 <HAL_GPIO_Init+0x14c>
 8001016:	bf00      	nop
 8001018:	40013c00 	.word	0x40013c00
 800101c:	40020000 	.word	0x40020000
 8001020:	40023800 	.word	0x40023800
 8001024:	40021400 	.word	0x40021400

08001028 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001028:	b10a      	cbz	r2, 800102e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800102a:	6181      	str	r1, [r0, #24]
 800102c:	4770      	bx	lr
 800102e:	0409      	lsls	r1, r1, #16
 8001030:	e7fb      	b.n	800102a <HAL_GPIO_WritePin+0x2>
	...

08001034 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001036:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800103a:	4c19      	ldr	r4, [pc, #100]	; (80010a0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800103c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001040:	641a      	str	r2, [r3, #64]	; 0x40
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001052:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001054:	f7ff fb10 	bl	8000678 <HAL_GetTick>
 8001058:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800105a:	6863      	ldr	r3, [r4, #4]
 800105c:	03da      	lsls	r2, r3, #15
 800105e:	d50c      	bpl.n	800107a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001060:	6823      	ldr	r3, [r4, #0]
 8001062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001066:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001068:	f7ff fb06 	bl	8000678 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800106c:	4c0c      	ldr	r4, [pc, #48]	; (80010a0 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 800106e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001070:	6863      	ldr	r3, [r4, #4]
 8001072:	039b      	lsls	r3, r3, #14
 8001074:	d50a      	bpl.n	800108c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001076:	2000      	movs	r0, #0
 8001078:	e006      	b.n	8001088 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800107a:	f7ff fafd 	bl	8000678 <HAL_GetTick>
 800107e:	1b40      	subs	r0, r0, r5
 8001080:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001084:	d9e9      	bls.n	800105a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001086:	2003      	movs	r0, #3
}
 8001088:	b003      	add	sp, #12
 800108a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800108c:	f7ff faf4 	bl	8000678 <HAL_GetTick>
 8001090:	1b40      	subs	r0, r0, r5
 8001092:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001096:	d9eb      	bls.n	8001070 <HAL_PWREx_EnableOverDrive+0x3c>
 8001098:	e7f5      	b.n	8001086 <HAL_PWREx_EnableOverDrive+0x52>
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000

080010a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a8:	4604      	mov	r4, r0
 80010aa:	b918      	cbnz	r0, 80010b4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80010ac:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80010ae:	b002      	add	sp, #8
 80010b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b4:	6803      	ldr	r3, [r0, #0]
 80010b6:	07d8      	lsls	r0, r3, #31
 80010b8:	d410      	bmi.n	80010dc <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	0799      	lsls	r1, r3, #30
 80010be:	d45e      	bmi.n	800117e <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	0719      	lsls	r1, r3, #28
 80010c4:	f100 80a3 	bmi.w	800120e <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	075a      	lsls	r2, r3, #29
 80010cc:	f100 80c4 	bmi.w	8001258 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010d0:	69a2      	ldr	r2, [r4, #24]
 80010d2:	2a00      	cmp	r2, #0
 80010d4:	f040 812e 	bne.w	8001334 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 80010d8:	2000      	movs	r0, #0
 80010da:	e7e8      	b.n	80010ae <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010dc:	4b93      	ldr	r3, [pc, #588]	; (800132c <HAL_RCC_OscConfig+0x288>)
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	f002 020c 	and.w	r2, r2, #12
 80010e4:	2a04      	cmp	r2, #4
 80010e6:	d007      	beq.n	80010f8 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	f002 020c 	and.w	r2, r2, #12
 80010ee:	2a08      	cmp	r2, #8
 80010f0:	d10a      	bne.n	8001108 <HAL_RCC_OscConfig+0x64>
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	025a      	lsls	r2, r3, #9
 80010f6:	d507      	bpl.n	8001108 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f8:	4b8c      	ldr	r3, [pc, #560]	; (800132c <HAL_RCC_OscConfig+0x288>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	039b      	lsls	r3, r3, #14
 80010fe:	d5dc      	bpl.n	80010ba <HAL_RCC_OscConfig+0x16>
 8001100:	6863      	ldr	r3, [r4, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1d9      	bne.n	80010ba <HAL_RCC_OscConfig+0x16>
 8001106:	e7d1      	b.n	80010ac <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001108:	6863      	ldr	r3, [r4, #4]
 800110a:	4d88      	ldr	r5, [pc, #544]	; (800132c <HAL_RCC_OscConfig+0x288>)
 800110c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001110:	d111      	bne.n	8001136 <HAL_RCC_OscConfig+0x92>
 8001112:	682b      	ldr	r3, [r5, #0]
 8001114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001118:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800111a:	f7ff faad 	bl	8000678 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111e:	4d83      	ldr	r5, [pc, #524]	; (800132c <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8001120:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001122:	682b      	ldr	r3, [r5, #0]
 8001124:	039f      	lsls	r7, r3, #14
 8001126:	d4c8      	bmi.n	80010ba <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff faa6 	bl	8000678 <HAL_GetTick>
 800112c:	1b80      	subs	r0, r0, r6
 800112e:	2864      	cmp	r0, #100	; 0x64
 8001130:	d9f7      	bls.n	8001122 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001132:	2003      	movs	r0, #3
 8001134:	e7bb      	b.n	80010ae <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001136:	b99b      	cbnz	r3, 8001160 <HAL_RCC_OscConfig+0xbc>
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800113e:	602b      	str	r3, [r5, #0]
 8001140:	682b      	ldr	r3, [r5, #0]
 8001142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001146:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001148:	f7ff fa96 	bl	8000678 <HAL_GetTick>
 800114c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114e:	682b      	ldr	r3, [r5, #0]
 8001150:	0398      	lsls	r0, r3, #14
 8001152:	d5b2      	bpl.n	80010ba <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fa90 	bl	8000678 <HAL_GetTick>
 8001158:	1b80      	subs	r0, r0, r6
 800115a:	2864      	cmp	r0, #100	; 0x64
 800115c:	d9f7      	bls.n	800114e <HAL_RCC_OscConfig+0xaa>
 800115e:	e7e8      	b.n	8001132 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001164:	682b      	ldr	r3, [r5, #0]
 8001166:	d103      	bne.n	8001170 <HAL_RCC_OscConfig+0xcc>
 8001168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800116c:	602b      	str	r3, [r5, #0]
 800116e:	e7d0      	b.n	8001112 <HAL_RCC_OscConfig+0x6e>
 8001170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001174:	602b      	str	r3, [r5, #0]
 8001176:	682b      	ldr	r3, [r5, #0]
 8001178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117c:	e7cc      	b.n	8001118 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800117e:	4b6b      	ldr	r3, [pc, #428]	; (800132c <HAL_RCC_OscConfig+0x288>)
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	f012 0f0c 	tst.w	r2, #12
 8001186:	d007      	beq.n	8001198 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	f002 020c 	and.w	r2, r2, #12
 800118e:	2a08      	cmp	r2, #8
 8001190:	d111      	bne.n	80011b6 <HAL_RCC_OscConfig+0x112>
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	0259      	lsls	r1, r3, #9
 8001196:	d40e      	bmi.n	80011b6 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001198:	4b64      	ldr	r3, [pc, #400]	; (800132c <HAL_RCC_OscConfig+0x288>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	0792      	lsls	r2, r2, #30
 800119e:	d502      	bpl.n	80011a6 <HAL_RCC_OscConfig+0x102>
 80011a0:	68e2      	ldr	r2, [r4, #12]
 80011a2:	2a01      	cmp	r2, #1
 80011a4:	d182      	bne.n	80010ac <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	6921      	ldr	r1, [r4, #16]
 80011aa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80011ae:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80011b2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b4:	e784      	b.n	80010c0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011b6:	68e3      	ldr	r3, [r4, #12]
 80011b8:	4d5c      	ldr	r5, [pc, #368]	; (800132c <HAL_RCC_OscConfig+0x288>)
 80011ba:	b1bb      	cbz	r3, 80011ec <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 80011bc:	682b      	ldr	r3, [r5, #0]
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011c4:	f7ff fa58 	bl	8000678 <HAL_GetTick>
 80011c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ca:	682b      	ldr	r3, [r5, #0]
 80011cc:	079f      	lsls	r7, r3, #30
 80011ce:	d507      	bpl.n	80011e0 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d0:	682b      	ldr	r3, [r5, #0]
 80011d2:	6922      	ldr	r2, [r4, #16]
 80011d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80011d8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011dc:	602b      	str	r3, [r5, #0]
 80011de:	e76f      	b.n	80010c0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e0:	f7ff fa4a 	bl	8000678 <HAL_GetTick>
 80011e4:	1b80      	subs	r0, r0, r6
 80011e6:	2802      	cmp	r0, #2
 80011e8:	d9ef      	bls.n	80011ca <HAL_RCC_OscConfig+0x126>
 80011ea:	e7a2      	b.n	8001132 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011f4:	f7ff fa40 	bl	8000678 <HAL_GetTick>
 80011f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fa:	682b      	ldr	r3, [r5, #0]
 80011fc:	0798      	lsls	r0, r3, #30
 80011fe:	f57f af5f 	bpl.w	80010c0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001202:	f7ff fa39 	bl	8000678 <HAL_GetTick>
 8001206:	1b80      	subs	r0, r0, r6
 8001208:	2802      	cmp	r0, #2
 800120a:	d9f6      	bls.n	80011fa <HAL_RCC_OscConfig+0x156>
 800120c:	e791      	b.n	8001132 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800120e:	6963      	ldr	r3, [r4, #20]
 8001210:	4d46      	ldr	r5, [pc, #280]	; (800132c <HAL_RCC_OscConfig+0x288>)
 8001212:	b183      	cbz	r3, 8001236 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8001214:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800121c:	f7ff fa2c 	bl	8000678 <HAL_GetTick>
 8001220:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001222:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001224:	079b      	lsls	r3, r3, #30
 8001226:	f53f af4f 	bmi.w	80010c8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800122a:	f7ff fa25 	bl	8000678 <HAL_GetTick>
 800122e:	1b80      	subs	r0, r0, r6
 8001230:	2802      	cmp	r0, #2
 8001232:	d9f6      	bls.n	8001222 <HAL_RCC_OscConfig+0x17e>
 8001234:	e77d      	b.n	8001132 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001236:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001238:	f023 0301 	bic.w	r3, r3, #1
 800123c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800123e:	f7ff fa1b 	bl	8000678 <HAL_GetTick>
 8001242:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001244:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001246:	079f      	lsls	r7, r3, #30
 8001248:	f57f af3e 	bpl.w	80010c8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800124c:	f7ff fa14 	bl	8000678 <HAL_GetTick>
 8001250:	1b80      	subs	r0, r0, r6
 8001252:	2802      	cmp	r0, #2
 8001254:	d9f6      	bls.n	8001244 <HAL_RCC_OscConfig+0x1a0>
 8001256:	e76c      	b.n	8001132 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001258:	4b34      	ldr	r3, [pc, #208]	; (800132c <HAL_RCC_OscConfig+0x288>)
 800125a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800125c:	00d0      	lsls	r0, r2, #3
 800125e:	d427      	bmi.n	80012b0 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001262:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001264:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001268:	641a      	str	r2, [r3, #64]	; 0x40
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001274:	4d2e      	ldr	r5, [pc, #184]	; (8001330 <HAL_RCC_OscConfig+0x28c>)
 8001276:	682b      	ldr	r3, [r5, #0]
 8001278:	05d9      	lsls	r1, r3, #23
 800127a:	d51b      	bpl.n	80012b4 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800127c:	68a3      	ldr	r3, [r4, #8]
 800127e:	4d2b      	ldr	r5, [pc, #172]	; (800132c <HAL_RCC_OscConfig+0x288>)
 8001280:	2b01      	cmp	r3, #1
 8001282:	d127      	bne.n	80012d4 <HAL_RCC_OscConfig+0x230>
 8001284:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800128c:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001290:	f7ff f9f2 	bl	8000678 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001294:	4f25      	ldr	r7, [pc, #148]	; (800132c <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8001296:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001298:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800129a:	079b      	lsls	r3, r3, #30
 800129c:	d53f      	bpl.n	800131e <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 800129e:	2e00      	cmp	r6, #0
 80012a0:	f43f af16 	beq.w	80010d0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012a4:	4a21      	ldr	r2, [pc, #132]	; (800132c <HAL_RCC_OscConfig+0x288>)
 80012a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	e70f      	b.n	80010d0 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 80012b0:	2600      	movs	r6, #0
 80012b2:	e7df      	b.n	8001274 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ba:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80012bc:	f7ff f9dc 	bl	8000678 <HAL_GetTick>
 80012c0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012c2:	682b      	ldr	r3, [r5, #0]
 80012c4:	05da      	lsls	r2, r3, #23
 80012c6:	d4d9      	bmi.n	800127c <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80012c8:	f7ff f9d6 	bl	8000678 <HAL_GetTick>
 80012cc:	1bc0      	subs	r0, r0, r7
 80012ce:	2864      	cmp	r0, #100	; 0x64
 80012d0:	d9f7      	bls.n	80012c2 <HAL_RCC_OscConfig+0x21e>
 80012d2:	e72e      	b.n	8001132 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d4:	b9ab      	cbnz	r3, 8001302 <HAL_RCC_OscConfig+0x25e>
 80012d6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012dc:	f023 0301 	bic.w	r3, r3, #1
 80012e0:	672b      	str	r3, [r5, #112]	; 0x70
 80012e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012e4:	f023 0304 	bic.w	r3, r3, #4
 80012e8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80012ea:	f7ff f9c5 	bl	8000678 <HAL_GetTick>
 80012ee:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012f2:	0798      	lsls	r0, r3, #30
 80012f4:	d5d3      	bpl.n	800129e <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f6:	f7ff f9bf 	bl	8000678 <HAL_GetTick>
 80012fa:	1bc0      	subs	r0, r0, r7
 80012fc:	4540      	cmp	r0, r8
 80012fe:	d9f7      	bls.n	80012f0 <HAL_RCC_OscConfig+0x24c>
 8001300:	e717      	b.n	8001132 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001302:	2b05      	cmp	r3, #5
 8001304:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001306:	d103      	bne.n	8001310 <HAL_RCC_OscConfig+0x26c>
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	672b      	str	r3, [r5, #112]	; 0x70
 800130e:	e7b9      	b.n	8001284 <HAL_RCC_OscConfig+0x1e0>
 8001310:	f023 0301 	bic.w	r3, r3, #1
 8001314:	672b      	str	r3, [r5, #112]	; 0x70
 8001316:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001318:	f023 0304 	bic.w	r3, r3, #4
 800131c:	e7b5      	b.n	800128a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800131e:	f7ff f9ab 	bl	8000678 <HAL_GetTick>
 8001322:	eba0 0008 	sub.w	r0, r0, r8
 8001326:	42a8      	cmp	r0, r5
 8001328:	d9b6      	bls.n	8001298 <HAL_RCC_OscConfig+0x1f4>
 800132a:	e702      	b.n	8001132 <HAL_RCC_OscConfig+0x8e>
 800132c:	40023800 	.word	0x40023800
 8001330:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001334:	4d24      	ldr	r5, [pc, #144]	; (80013c8 <HAL_RCC_OscConfig+0x324>)
 8001336:	68ab      	ldr	r3, [r5, #8]
 8001338:	f003 030c 	and.w	r3, r3, #12
 800133c:	2b08      	cmp	r3, #8
 800133e:	f43f aeb5 	beq.w	80010ac <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001342:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001344:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001346:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800134a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800134c:	d12f      	bne.n	80013ae <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 800134e:	f7ff f993 	bl	8000678 <HAL_GetTick>
 8001352:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001354:	682b      	ldr	r3, [r5, #0]
 8001356:	0199      	lsls	r1, r3, #6
 8001358:	d423      	bmi.n	80013a2 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800135a:	6a22      	ldr	r2, [r4, #32]
 800135c:	69e3      	ldr	r3, [r4, #28]
 800135e:	4313      	orrs	r3, r2
 8001360:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001362:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001366:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001368:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800136c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800136e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001372:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001374:	4c14      	ldr	r4, [pc, #80]	; (80013c8 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001376:	0852      	lsrs	r2, r2, #1
 8001378:	3a01      	subs	r2, #1
 800137a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800137e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001380:	682b      	ldr	r3, [r5, #0]
 8001382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001386:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001388:	f7ff f976 	bl	8000678 <HAL_GetTick>
 800138c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800138e:	6823      	ldr	r3, [r4, #0]
 8001390:	019a      	lsls	r2, r3, #6
 8001392:	f53f aea1 	bmi.w	80010d8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001396:	f7ff f96f 	bl	8000678 <HAL_GetTick>
 800139a:	1b40      	subs	r0, r0, r5
 800139c:	2802      	cmp	r0, #2
 800139e:	d9f6      	bls.n	800138e <HAL_RCC_OscConfig+0x2ea>
 80013a0:	e6c7      	b.n	8001132 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a2:	f7ff f969 	bl	8000678 <HAL_GetTick>
 80013a6:	1b80      	subs	r0, r0, r6
 80013a8:	2802      	cmp	r0, #2
 80013aa:	d9d3      	bls.n	8001354 <HAL_RCC_OscConfig+0x2b0>
 80013ac:	e6c1      	b.n	8001132 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 80013ae:	f7ff f963 	bl	8000678 <HAL_GetTick>
 80013b2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b4:	682b      	ldr	r3, [r5, #0]
 80013b6:	019b      	lsls	r3, r3, #6
 80013b8:	f57f ae8e 	bpl.w	80010d8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013bc:	f7ff f95c 	bl	8000678 <HAL_GetTick>
 80013c0:	1b00      	subs	r0, r0, r4
 80013c2:	2802      	cmp	r0, #2
 80013c4:	d9f6      	bls.n	80013b4 <HAL_RCC_OscConfig+0x310>
 80013c6:	e6b4      	b.n	8001132 <HAL_RCC_OscConfig+0x8e>
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013cc:	4913      	ldr	r1, [pc, #76]	; (800141c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80013ce:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013d0:	688b      	ldr	r3, [r1, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	d003      	beq.n	80013e2 <HAL_RCC_GetSysClockFreq+0x16>
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d003      	beq.n	80013e6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013de:	4810      	ldr	r0, [pc, #64]	; (8001420 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80013e0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80013e2:	4810      	ldr	r0, [pc, #64]	; (8001424 <HAL_RCC_GetSysClockFreq+0x58>)
 80013e4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013e6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80013e8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ea:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013ec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80013f0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80013f8:	bf1a      	itte	ne
 80013fa:	480a      	ldrne	r0, [pc, #40]	; (8001424 <HAL_RCC_GetSysClockFreq+0x58>)
 80013fc:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013fe:	4808      	ldreq	r0, [pc, #32]	; (8001420 <HAL_RCC_GetSysClockFreq+0x54>)
 8001400:	fba1 0100 	umull	r0, r1, r1, r0
 8001404:	f7fe ff74 	bl	80002f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <HAL_RCC_GetSysClockFreq+0x50>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001410:	3301      	adds	r3, #1
 8001412:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001414:	fbb0 f0f3 	udiv	r0, r0, r3
 8001418:	bd08      	pop	{r3, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	00f42400 	.word	0x00f42400
 8001424:	007a1200 	.word	0x007a1200

08001428 <HAL_RCC_ClockConfig>:
{
 8001428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800142c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800142e:	4604      	mov	r4, r0
 8001430:	b910      	cbnz	r0, 8001438 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001432:	2001      	movs	r0, #1
 8001434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001438:	4a46      	ldr	r2, [pc, #280]	; (8001554 <HAL_RCC_ClockConfig+0x12c>)
 800143a:	6813      	ldr	r3, [r2, #0]
 800143c:	f003 030f 	and.w	r3, r3, #15
 8001440:	428b      	cmp	r3, r1
 8001442:	d328      	bcc.n	8001496 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001444:	6821      	ldr	r1, [r4, #0]
 8001446:	078f      	lsls	r7, r1, #30
 8001448:	d430      	bmi.n	80014ac <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800144a:	07c8      	lsls	r0, r1, #31
 800144c:	d443      	bmi.n	80014d6 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800144e:	4a41      	ldr	r2, [pc, #260]	; (8001554 <HAL_RCC_ClockConfig+0x12c>)
 8001450:	6813      	ldr	r3, [r2, #0]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	429d      	cmp	r5, r3
 8001458:	d367      	bcc.n	800152a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800145a:	6822      	ldr	r2, [r4, #0]
 800145c:	0751      	lsls	r1, r2, #29
 800145e:	d470      	bmi.n	8001542 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001460:	0713      	lsls	r3, r2, #28
 8001462:	d507      	bpl.n	8001474 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001464:	4a3c      	ldr	r2, [pc, #240]	; (8001558 <HAL_RCC_ClockConfig+0x130>)
 8001466:	6921      	ldr	r1, [r4, #16]
 8001468:	6893      	ldr	r3, [r2, #8]
 800146a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800146e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001472:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001474:	f7ff ffaa 	bl	80013cc <HAL_RCC_GetSysClockFreq>
 8001478:	4b37      	ldr	r3, [pc, #220]	; (8001558 <HAL_RCC_ClockConfig+0x130>)
 800147a:	4a38      	ldr	r2, [pc, #224]	; (800155c <HAL_RCC_ClockConfig+0x134>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001482:	5cd3      	ldrb	r3, [r2, r3]
 8001484:	40d8      	lsrs	r0, r3
 8001486:	4b36      	ldr	r3, [pc, #216]	; (8001560 <HAL_RCC_ClockConfig+0x138>)
 8001488:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800148a:	2000      	movs	r0, #0
 800148c:	f7ff f8b8 	bl	8000600 <HAL_InitTick>
  return HAL_OK;
 8001490:	2000      	movs	r0, #0
 8001492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001496:	6813      	ldr	r3, [r2, #0]
 8001498:	f023 030f 	bic.w	r3, r3, #15
 800149c:	430b      	orrs	r3, r1
 800149e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a0:	6813      	ldr	r3, [r2, #0]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	4299      	cmp	r1, r3
 80014a8:	d1c3      	bne.n	8001432 <HAL_RCC_ClockConfig+0xa>
 80014aa:	e7cb      	b.n	8001444 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ac:	f011 0f04 	tst.w	r1, #4
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <HAL_RCC_ClockConfig+0x130>)
 80014b2:	d003      	beq.n	80014bc <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80014ba:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014bc:	070e      	lsls	r6, r1, #28
 80014be:	d503      	bpl.n	80014c8 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80014c6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	68a0      	ldr	r0, [r4, #8]
 80014cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80014d0:	4302      	orrs	r2, r0
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	e7b9      	b.n	800144a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d6:	6861      	ldr	r1, [r4, #4]
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <HAL_RCC_ClockConfig+0x130>)
 80014da:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014dc:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014de:	d11c      	bne.n	800151a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e4:	d0a5      	beq.n	8001432 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e6:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e8:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ec:	4e1a      	ldr	r6, [pc, #104]	; (8001558 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ee:	f022 0203 	bic.w	r2, r2, #3
 80014f2:	430a      	orrs	r2, r1
 80014f4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80014f6:	f7ff f8bf 	bl	8000678 <HAL_GetTick>
 80014fa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fc:	68b3      	ldr	r3, [r6, #8]
 80014fe:	6862      	ldr	r2, [r4, #4]
 8001500:	f003 030c 	and.w	r3, r3, #12
 8001504:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001508:	d0a1      	beq.n	800144e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150a:	f7ff f8b5 	bl	8000678 <HAL_GetTick>
 800150e:	1bc0      	subs	r0, r0, r7
 8001510:	4540      	cmp	r0, r8
 8001512:	d9f3      	bls.n	80014fc <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001514:	2003      	movs	r0, #3
}
 8001516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800151a:	2902      	cmp	r1, #2
 800151c:	d102      	bne.n	8001524 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001522:	e7df      	b.n	80014e4 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001524:	f012 0f02 	tst.w	r2, #2
 8001528:	e7dc      	b.n	80014e4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	6813      	ldr	r3, [r2, #0]
 800152c:	f023 030f 	bic.w	r3, r3, #15
 8001530:	432b      	orrs	r3, r5
 8001532:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001534:	6813      	ldr	r3, [r2, #0]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	429d      	cmp	r5, r3
 800153c:	f47f af79 	bne.w	8001432 <HAL_RCC_ClockConfig+0xa>
 8001540:	e78b      	b.n	800145a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001542:	4905      	ldr	r1, [pc, #20]	; (8001558 <HAL_RCC_ClockConfig+0x130>)
 8001544:	68e0      	ldr	r0, [r4, #12]
 8001546:	688b      	ldr	r3, [r1, #8]
 8001548:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800154c:	4303      	orrs	r3, r0
 800154e:	608b      	str	r3, [r1, #8]
 8001550:	e786      	b.n	8001460 <HAL_RCC_ClockConfig+0x38>
 8001552:	bf00      	nop
 8001554:	40023c00 	.word	0x40023c00
 8001558:	40023800 	.word	0x40023800
 800155c:	0800a316 	.word	0x0800a316
 8001560:	20000010 	.word	0x20000010

08001564 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001564:	4b01      	ldr	r3, [pc, #4]	; (800156c <HAL_RCC_GetHCLKFreq+0x8>)
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000010 	.word	0x20000010

08001570 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800157a:	5cd3      	ldrb	r3, [r2, r3]
 800157c:	4a03      	ldr	r2, [pc, #12]	; (800158c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800157e:	6810      	ldr	r0, [r2, #0]
}
 8001580:	40d8      	lsrs	r0, r3
 8001582:	4770      	bx	lr
 8001584:	40023800 	.word	0x40023800
 8001588:	0800a326 	.word	0x0800a326
 800158c:	20000010 	.word	0x20000010

08001590 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800159a:	5cd3      	ldrb	r3, [r2, r3]
 800159c:	4a03      	ldr	r2, [pc, #12]	; (80015ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 800159e:	6810      	ldr	r0, [r2, #0]
}
 80015a0:	40d8      	lsrs	r0, r3
 80015a2:	4770      	bx	lr
 80015a4:	40023800 	.word	0x40023800
 80015a8:	0800a326 	.word	0x0800a326
 80015ac:	20000010 	.word	0x20000010

080015b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80015b4:	6802      	ldr	r2, [r0, #0]
{
 80015b6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80015b8:	f012 0601 	ands.w	r6, r2, #1
 80015bc:	d00b      	beq.n	80015d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80015be:	4bba      	ldr	r3, [pc, #744]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015c0:	6899      	ldr	r1, [r3, #8]
 80015c2:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80015c6:	6099      	str	r1, [r3, #8]
 80015c8:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80015ca:	6899      	ldr	r1, [r3, #8]
 80015cc:	4331      	orrs	r1, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80015ce:	fab6 f686 	clz	r6, r6
 80015d2:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80015d4:	6099      	str	r1, [r3, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80015d6:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 80015da:	d012      	beq.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80015dc:	49b2      	ldr	r1, [pc, #712]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015de:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80015e0:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80015e4:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80015e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1; 
 80015ec:	bf08      	it	eq
 80015ee:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80015f0:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80015f4:	bf16      	itet	ne
 80015f6:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80015fa:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80015fc:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80015fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001602:	02d7      	lsls	r7, r2, #11
 8001604:	d510      	bpl.n	8001628 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001606:	48a8      	ldr	r0, [pc, #672]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001608:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800160a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800160e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001612:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001616:	ea43 0301 	orr.w	r3, r3, r1
 800161a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800161e:	f000 81a9 	beq.w	8001974 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8001622:	2900      	cmp	r1, #0
 8001624:	bf08      	it	eq
 8001626:	2501      	moveq	r5, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8001628:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 800162c:	bf18      	it	ne
 800162e:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001630:	0690      	lsls	r0, r2, #26
 8001632:	d531      	bpl.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001634:	4b9c      	ldr	r3, [pc, #624]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001636:	4f9d      	ldr	r7, [pc, #628]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800163a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800163e:	641a      	str	r2, [r3, #64]	; 0x40
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001650:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001652:	f7ff f811 	bl	8000678 <HAL_GetTick>
 8001656:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	05d9      	lsls	r1, r3, #23
 800165c:	f140 818c 	bpl.w	8001978 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001660:	4f91      	ldr	r7, [pc, #580]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001662:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001664:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001668:	f040 8191 	bne.w	800198e <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800166c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800166e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001672:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001676:	4a8c      	ldr	r2, [pc, #560]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001678:	f040 81af 	bne.w	80019da <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800167c:	6891      	ldr	r1, [r2, #8]
 800167e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001682:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001686:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800168a:	4301      	orrs	r1, r0
 800168c:	6091      	str	r1, [r2, #8]
 800168e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001692:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001694:	430b      	orrs	r3, r1
 8001696:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	06df      	lsls	r7, r3, #27
 800169c:	d50c      	bpl.n	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800169e:	4a82      	ldr	r2, [pc, #520]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016a0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80016a4:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80016a8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80016ac:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80016b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016b2:	4301      	orrs	r1, r0
 80016b4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80016b8:	0458      	lsls	r0, r3, #17
 80016ba:	d508      	bpl.n	80016ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80016bc:	497a      	ldr	r1, [pc, #488]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016be:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80016c0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016c4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80016c8:	4302      	orrs	r2, r0
 80016ca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80016ce:	0419      	lsls	r1, r3, #16
 80016d0:	d508      	bpl.n	80016e4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80016d2:	4975      	ldr	r1, [pc, #468]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016d4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80016d6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016da:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80016de:	4302      	orrs	r2, r0
 80016e0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80016e4:	03da      	lsls	r2, r3, #15
 80016e6:	d508      	bpl.n	80016fa <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80016e8:	496f      	ldr	r1, [pc, #444]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016ea:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80016ec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016f0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80016f4:	4302      	orrs	r2, r0
 80016f6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80016fa:	039f      	lsls	r7, r3, #14
 80016fc:	d508      	bpl.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80016fe:	496a      	ldr	r1, [pc, #424]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001700:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001702:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001706:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800170a:	4302      	orrs	r2, r0
 800170c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001710:	0658      	lsls	r0, r3, #25
 8001712:	d508      	bpl.n	8001726 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001714:	4964      	ldr	r1, [pc, #400]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001716:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001718:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800171c:	f022 0203 	bic.w	r2, r2, #3
 8001720:	4302      	orrs	r2, r0
 8001722:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001726:	0619      	lsls	r1, r3, #24
 8001728:	d508      	bpl.n	800173c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800172a:	495f      	ldr	r1, [pc, #380]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800172c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800172e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001732:	f022 020c 	bic.w	r2, r2, #12
 8001736:	4302      	orrs	r2, r0
 8001738:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800173c:	05da      	lsls	r2, r3, #23
 800173e:	d508      	bpl.n	8001752 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001740:	4959      	ldr	r1, [pc, #356]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001742:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001744:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001748:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800174c:	4302      	orrs	r2, r0
 800174e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001752:	059f      	lsls	r7, r3, #22
 8001754:	d508      	bpl.n	8001768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001756:	4954      	ldr	r1, [pc, #336]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001758:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800175a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800175e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001762:	4302      	orrs	r2, r0
 8001764:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001768:	0558      	lsls	r0, r3, #21
 800176a:	d508      	bpl.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800176c:	494e      	ldr	r1, [pc, #312]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800176e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001770:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001774:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001778:	4302      	orrs	r2, r0
 800177a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800177e:	0519      	lsls	r1, r3, #20
 8001780:	d508      	bpl.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001782:	4949      	ldr	r1, [pc, #292]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001786:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800178a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800178e:	4302      	orrs	r2, r0
 8001790:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001794:	04da      	lsls	r2, r3, #19
 8001796:	d508      	bpl.n	80017aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001798:	4943      	ldr	r1, [pc, #268]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800179a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800179c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017a0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80017a4:	4302      	orrs	r2, r0
 80017a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80017aa:	049f      	lsls	r7, r3, #18
 80017ac:	d508      	bpl.n	80017c0 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80017ae:	493e      	ldr	r1, [pc, #248]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017b0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80017b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017b6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80017ba:	4302      	orrs	r2, r0
 80017bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80017c0:	0258      	lsls	r0, r3, #9
 80017c2:	d508      	bpl.n	80017d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80017c4:	4938      	ldr	r1, [pc, #224]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017c6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80017c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017cc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80017d0:	4302      	orrs	r2, r0
 80017d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80017d6:	0299      	lsls	r1, r3, #10
 80017d8:	d50c      	bpl.n	80017f4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80017da:	4833      	ldr	r0, [pc, #204]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017dc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80017de:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 80017e2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80017e6:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 80017ea:	bf08      	it	eq
 80017ec:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80017ee:	430a      	orrs	r2, r1
 80017f0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 80017f4:	f013 0f08 	tst.w	r3, #8
 80017f8:	bf18      	it	ne
 80017fa:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80017fc:	035a      	lsls	r2, r3, #13
 80017fe:	d508      	bpl.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001800:	4929      	ldr	r1, [pc, #164]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001802:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001804:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001808:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800180c:	4302      	orrs	r2, r0
 800180e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001812:	021f      	lsls	r7, r3, #8
 8001814:	d509      	bpl.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001816:	4924      	ldr	r1, [pc, #144]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001818:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800181c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001820:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001824:	4302      	orrs	r2, r0
 8001826:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800182a:	0158      	lsls	r0, r3, #5
 800182c:	d509      	bpl.n	8001842 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800182e:	491e      	ldr	r1, [pc, #120]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001830:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001834:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001838:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800183c:	4302      	orrs	r2, r0
 800183e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001842:	0119      	lsls	r1, r3, #4
 8001844:	d509      	bpl.n	800185a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001846:	4918      	ldr	r1, [pc, #96]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001848:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800184c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001850:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001854:	4302      	orrs	r2, r0
 8001856:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800185a:	00da      	lsls	r2, r3, #3
 800185c:	d509      	bpl.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800185e:	4912      	ldr	r1, [pc, #72]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001860:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001864:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001868:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800186c:	4302      	orrs	r2, r0
 800186e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001872:	2e01      	cmp	r6, #1
 8001874:	f000 80b5 	beq.w	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001878:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800187c:	f000 80b1 	beq.w	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001880:	2d01      	cmp	r5, #1
 8001882:	d175      	bne.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8001884:	4d08      	ldr	r5, [pc, #32]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001886:	682b      	ldr	r3, [r5, #0]
 8001888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188c:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800188e:	f7fe fef3 	bl	8000678 <HAL_GetTick>
 8001892:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001894:	682b      	ldr	r3, [r5, #0]
 8001896:	009f      	lsls	r7, r3, #2
 8001898:	f100 8127 	bmi.w	8001aea <HAL_RCCEx_PeriphCLKConfig+0x53a>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800189c:	6821      	ldr	r1, [r4, #0]
 800189e:	030e      	lsls	r6, r1, #12
 80018a0:	d506      	bpl.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80018a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018a4:	b143      	cbz	r3, 80018b8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80018a6:	e003      	b.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40007000 	.word	0x40007000
 80018b0:	02cd      	lsls	r5, r1, #11
 80018b2:	d51d      	bpl.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80018b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018b6:	b9db      	cbnz	r3, 80018f0 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80018b8:	4a93      	ldr	r2, [pc, #588]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80018ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80018be:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80018c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018c6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80018ca:	4303      	orrs	r3, r0
 80018cc:	6960      	ldr	r0, [r4, #20]
 80018ce:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80018d2:	69a0      	ldr	r0, [r4, #24]
 80018d4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80018dc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80018e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80018e2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80018e6:	3801      	subs	r0, #1
 80018e8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80018ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80018f0:	0288      	lsls	r0, r1, #10
 80018f2:	d515      	bpl.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x370>
 80018f4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80018f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018fa:	d111      	bne.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80018fc:	4a82      	ldr	r2, [pc, #520]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80018fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001902:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001906:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800190a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800190e:	4303      	orrs	r3, r0
 8001910:	6960      	ldr	r0, [r4, #20]
 8001912:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001916:	6a20      	ldr	r0, [r4, #32]
 8001918:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800191c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001920:	070a      	lsls	r2, r1, #28
 8001922:	d519      	bpl.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001924:	4978      	ldr	r1, [pc, #480]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001926:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800192a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800192e:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001932:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001936:	4313      	orrs	r3, r2
 8001938:	6962      	ldr	r2, [r4, #20]
 800193a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800193e:	69e2      	ldr	r2, [r4, #28]
 8001940:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001948:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800194c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800194e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001952:	4313      	orrs	r3, r2
 8001954:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001958:	4c6b      	ldr	r4, [pc, #428]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001960:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001962:	f7fe fe89 	bl	8000678 <HAL_GetTick>
 8001966:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001968:	6823      	ldr	r3, [r4, #0]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	f140 80c4 	bpl.w	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001970:	2000      	movs	r0, #0
 8001972:	e009      	b.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1; 
 8001974:	2601      	movs	r6, #1
 8001976:	e657      	b.n	8001628 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001978:	f7fe fe7e 	bl	8000678 <HAL_GetTick>
 800197c:	eba0 0008 	sub.w	r0, r0, r8
 8001980:	2864      	cmp	r0, #100	; 0x64
 8001982:	f67f ae69 	bls.w	8001658 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001986:	2003      	movs	r0, #3
}
 8001988:	b003      	add	sp, #12
 800198a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800198e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001990:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001994:	4293      	cmp	r3, r2
 8001996:	f43f ae69 	beq.w	800166c <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800199a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800199c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800199e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80019a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019a6:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019a8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80019aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019ae:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80019b0:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80019b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019b4:	07da      	lsls	r2, r3, #31
 80019b6:	f57f ae59 	bpl.w	800166c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80019ba:	f7fe fe5d 	bl	8000678 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80019c2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019c6:	079b      	lsls	r3, r3, #30
 80019c8:	f53f ae50 	bmi.w	800166c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019cc:	f7fe fe54 	bl	8000678 <HAL_GetTick>
 80019d0:	eba0 0008 	sub.w	r0, r0, r8
 80019d4:	4548      	cmp	r0, r9
 80019d6:	d9f5      	bls.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80019d8:	e7d5      	b.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019da:	6891      	ldr	r1, [r2, #8]
 80019dc:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80019e0:	e654      	b.n	800168c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();  
 80019e2:	4e49      	ldr	r6, [pc, #292]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80019e4:	6833      	ldr	r3, [r6, #0]
 80019e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80019ea:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80019ec:	f7fe fe44 	bl	8000678 <HAL_GetTick>
 80019f0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80019f2:	6833      	ldr	r3, [r6, #0]
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	d472      	bmi.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80019f8:	6822      	ldr	r2, [r4, #0]
 80019fa:	07d7      	lsls	r7, r2, #31
 80019fc:	d512      	bpl.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x474>
 80019fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a00:	b983      	cbnz	r3, 8001a24 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001a02:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001a06:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001a0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a0e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001a12:	430b      	orrs	r3, r1
 8001a14:	6861      	ldr	r1, [r4, #4]
 8001a16:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001a1a:	68a1      	ldr	r1, [r4, #8]
 8001a1c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001a20:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a24:	0316      	lsls	r6, r2, #12
 8001a26:	d503      	bpl.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001a28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001a30:	02d0      	lsls	r0, r2, #11
 8001a32:	d51e      	bpl.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8001a34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a3a:	d11a      	bne.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001a3c:	4932      	ldr	r1, [pc, #200]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001a3e:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a42:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001a46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a4a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001a4e:	4303      	orrs	r3, r0
 8001a50:	6860      	ldr	r0, [r4, #4]
 8001a52:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001a56:	68e0      	ldr	r0, [r4, #12]
 8001a58:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001a5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8001a60:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001a64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a66:	f020 001f 	bic.w	r0, r0, #31
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	4303      	orrs	r3, r0
 8001a6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a72:	01d1      	lsls	r1, r2, #7
 8001a74:	d511      	bpl.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001a76:	4924      	ldr	r1, [pc, #144]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001a78:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a7c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001a80:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001a84:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001a88:	4303      	orrs	r3, r0
 8001a8a:	6860      	ldr	r0, [r4, #4]
 8001a8c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001a90:	6920      	ldr	r0, [r4, #16]
 8001a92:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001a96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001a9a:	0192      	lsls	r2, r2, #6
 8001a9c:	d50d      	bpl.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001a9e:	6923      	ldr	r3, [r4, #16]
 8001aa0:	6862      	ldr	r2, [r4, #4]
 8001aa2:	041b      	lsls	r3, r3, #16
 8001aa4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001aa8:	68e2      	ldr	r2, [r4, #12]
 8001aaa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001aae:	68a2      	ldr	r2, [r4, #8]
 8001ab0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001ab4:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001ab6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001aba:	4e13      	ldr	r6, [pc, #76]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001abc:	6833      	ldr	r3, [r6, #0]
 8001abe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ac2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001ac4:	f7fe fdd8 	bl	8000678 <HAL_GetTick>
 8001ac8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001aca:	6833      	ldr	r3, [r6, #0]
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	f53f aed7 	bmi.w	8001880 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ad2:	f7fe fdd1 	bl	8000678 <HAL_GetTick>
 8001ad6:	1bc0      	subs	r0, r0, r7
 8001ad8:	2864      	cmp	r0, #100	; 0x64
 8001ada:	d9f6      	bls.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001adc:	e753      	b.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ade:	f7fe fdcb 	bl	8000678 <HAL_GetTick>
 8001ae2:	1bc0      	subs	r0, r0, r7
 8001ae4:	2864      	cmp	r0, #100	; 0x64
 8001ae6:	d984      	bls.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001ae8:	e74d      	b.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001aea:	f7fe fdc5 	bl	8000678 <HAL_GetTick>
 8001aee:	1b80      	subs	r0, r0, r6
 8001af0:	2864      	cmp	r0, #100	; 0x64
 8001af2:	f67f aecf 	bls.w	8001894 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001af6:	e746      	b.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001af8:	f7fe fdbe 	bl	8000678 <HAL_GetTick>
 8001afc:	1b40      	subs	r0, r0, r5
 8001afe:	2864      	cmp	r0, #100	; 0x64
 8001b00:	f67f af32 	bls.w	8001968 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001b04:	e73f      	b.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800

08001b0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b10:	9d06      	ldr	r5, [sp, #24]
 8001b12:	4604      	mov	r4, r0
 8001b14:	460f      	mov	r7, r1
 8001b16:	4616      	mov	r6, r2
 8001b18:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b1a:	6821      	ldr	r1, [r4, #0]
 8001b1c:	69ca      	ldr	r2, [r1, #28]
 8001b1e:	ea37 0302 	bics.w	r3, r7, r2
 8001b22:	bf0c      	ite	eq
 8001b24:	2201      	moveq	r2, #1
 8001b26:	2200      	movne	r2, #0
 8001b28:	42b2      	cmp	r2, r6
 8001b2a:	d002      	beq.n	8001b32 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001b2c:	2000      	movs	r0, #0
}
 8001b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001b32:	1c6b      	adds	r3, r5, #1
 8001b34:	d0f2      	beq.n	8001b1c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8001b36:	b99d      	cbnz	r5, 8001b60 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b38:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001b3a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b42:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	f022 0201 	bic.w	r2, r2, #1
 8001b4a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001b4c:	2320      	movs	r3, #32
 8001b4e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001b52:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001b56:	2300      	movs	r3, #0
 8001b58:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8001b60:	f7fe fd8a 	bl	8000678 <HAL_GetTick>
 8001b64:	eba0 0008 	sub.w	r0, r0, r8
 8001b68:	4285      	cmp	r5, r0
 8001b6a:	d8d6      	bhi.n	8001b1a <UART_WaitOnFlagUntilTimeout+0xe>
 8001b6c:	e7e4      	b.n	8001b38 <UART_WaitOnFlagUntilTimeout+0x2c>

08001b6e <HAL_UART_Transmit>:
{
 8001b6e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001b72:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001b74:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8001b78:	4604      	mov	r4, r0
 8001b7a:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 8001b7c:	2b20      	cmp	r3, #32
{
 8001b7e:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001b80:	d14c      	bne.n	8001c1c <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8001b82:	2900      	cmp	r1, #0
 8001b84:	d048      	beq.n	8001c18 <HAL_UART_Transmit+0xaa>
 8001b86:	2a00      	cmp	r2, #0
 8001b88:	d046      	beq.n	8001c18 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8001b8a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d044      	beq.n	8001c1c <HAL_UART_Transmit+0xae>
 8001b92:	2301      	movs	r3, #1
 8001b94:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b9c:	2321      	movs	r3, #33	; 0x21
 8001b9e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8001ba2:	f7fe fd69 	bl	8000678 <HAL_GetTick>
 8001ba6:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001ba8:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8001bac:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001bb0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001bb4:	b292      	uxth	r2, r2
 8001bb6:	b962      	cbnz	r2, 8001bd2 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bb8:	9700      	str	r7, [sp, #0]
 8001bba:	4633      	mov	r3, r6
 8001bbc:	2140      	movs	r1, #64	; 0x40
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f7ff ffa4 	bl	8001b0c <UART_WaitOnFlagUntilTimeout>
 8001bc4:	b998      	cbnz	r0, 8001bee <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001bc6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001bc8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8001bcc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 8001bd0:	e00e      	b.n	8001bf0 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8001bd2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	9700      	str	r7, [sp, #0]
 8001bda:	2180      	movs	r1, #128	; 0x80
      huart->TxXferCount--;
 8001bdc:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bde:	4620      	mov	r0, r4
      huart->TxXferCount--;
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001be6:	4633      	mov	r3, r6
 8001be8:	f7ff ff90 	bl	8001b0c <UART_WaitOnFlagUntilTimeout>
 8001bec:	b118      	cbz	r0, 8001bf6 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8001bee:	2003      	movs	r0, #3
}
 8001bf0:	b002      	add	sp, #8
 8001bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bf6:	68a3      	ldr	r3, [r4, #8]
 8001bf8:	6822      	ldr	r2, [r4, #0]
 8001bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bfe:	d107      	bne.n	8001c10 <HAL_UART_Transmit+0xa2>
 8001c00:	6923      	ldr	r3, [r4, #16]
 8001c02:	b92b      	cbnz	r3, 8001c10 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001c04:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c0c:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8001c0e:	e7cf      	b.n	8001bb0 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001c10:	782b      	ldrb	r3, [r5, #0]
 8001c12:	3501      	adds	r5, #1
 8001c14:	6293      	str	r3, [r2, #40]	; 0x28
 8001c16:	e7cb      	b.n	8001bb0 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001c18:	2001      	movs	r0, #1
 8001c1a:	e7e9      	b.n	8001bf0 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001c1c:	2002      	movs	r0, #2
 8001c1e:	e7e7      	b.n	8001bf0 <HAL_UART_Transmit+0x82>

08001c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c20:	b538      	push	{r3, r4, r5, lr}
 8001c22:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001c24:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c26:	69c3      	ldr	r3, [r0, #28]
 8001c28:	6921      	ldr	r1, [r4, #16]
 8001c2a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001c2c:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	6961      	ldr	r1, [r4, #20]
 8001c32:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001c34:	4993      	ldr	r1, [pc, #588]	; (8001e84 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c36:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001c38:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001c3a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001c3c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c3e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001c40:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c42:	686a      	ldr	r2, [r5, #4]
 8001c44:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001c4c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001c4e:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001c50:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001c52:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8001c56:	430a      	orrs	r2, r1
 8001c58:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c5a:	4a8b      	ldr	r2, [pc, #556]	; (8001e88 <UART_SetConfig+0x268>)
 8001c5c:	4295      	cmp	r5, r2
 8001c5e:	d119      	bne.n	8001c94 <UART_SetConfig+0x74>
 8001c60:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001c64:	4989      	ldr	r1, [pc, #548]	; (8001e8c <UART_SetConfig+0x26c>)
 8001c66:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001c6a:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c72:	5c8a      	ldrb	r2, [r1, r2]
 8001c74:	f040 80b3 	bne.w	8001dde <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8001c78:	2a08      	cmp	r2, #8
 8001c7a:	f200 80ad 	bhi.w	8001dd8 <UART_SetConfig+0x1b8>
 8001c7e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001c82:	0026      	.short	0x0026
 8001c84:	00e9007b 	.word	0x00e9007b
 8001c88:	00f500ab 	.word	0x00f500ab
 8001c8c:	00ab00ab 	.word	0x00ab00ab
 8001c90:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c94:	4a7e      	ldr	r2, [pc, #504]	; (8001e90 <UART_SetConfig+0x270>)
 8001c96:	4295      	cmp	r5, r2
 8001c98:	d107      	bne.n	8001caa <UART_SetConfig+0x8a>
 8001c9a:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8001c9e:	497d      	ldr	r1, [pc, #500]	; (8001e94 <UART_SetConfig+0x274>)
 8001ca0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001ca4:	f002 020c 	and.w	r2, r2, #12
 8001ca8:	e7e1      	b.n	8001c6e <UART_SetConfig+0x4e>
 8001caa:	4a7b      	ldr	r2, [pc, #492]	; (8001e98 <UART_SetConfig+0x278>)
 8001cac:	4295      	cmp	r5, r2
 8001cae:	d12b      	bne.n	8001d08 <UART_SetConfig+0xe8>
 8001cb0:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8001cb4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001cb8:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001cbc:	2a10      	cmp	r2, #16
 8001cbe:	f000 80d2 	beq.w	8001e66 <UART_SetConfig+0x246>
 8001cc2:	d816      	bhi.n	8001cf2 <UART_SetConfig+0xd2>
 8001cc4:	b9da      	cbnz	r2, 8001cfe <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cca:	f040 809f 	bne.w	8001e0c <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001cce:	f7ff fc4f 	bl	8001570 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001cd2:	6861      	ldr	r1, [r4, #4]
 8001cd4:	084a      	lsrs	r2, r1, #1
 8001cd6:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cde:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ce0:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001ce2:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ce6:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001cea:	6821      	ldr	r1, [r4, #0]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	60cb      	str	r3, [r1, #12]
 8001cf0:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cf2:	2a20      	cmp	r2, #32
 8001cf4:	f000 80ab 	beq.w	8001e4e <UART_SetConfig+0x22e>
 8001cf8:	2a30      	cmp	r2, #48	; 0x30
 8001cfa:	f000 80ba 	beq.w	8001e72 <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d02:	d069      	beq.n	8001dd8 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8001d04:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8001d06:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d08:	4a64      	ldr	r2, [pc, #400]	; (8001e9c <UART_SetConfig+0x27c>)
 8001d0a:	4295      	cmp	r5, r2
 8001d0c:	d10e      	bne.n	8001d2c <UART_SetConfig+0x10c>
 8001d0e:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8001d12:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001d16:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8001d1a:	2a40      	cmp	r2, #64	; 0x40
 8001d1c:	f000 80a3 	beq.w	8001e66 <UART_SetConfig+0x246>
 8001d20:	d9d0      	bls.n	8001cc4 <UART_SetConfig+0xa4>
 8001d22:	2a80      	cmp	r2, #128	; 0x80
 8001d24:	f000 8093 	beq.w	8001e4e <UART_SetConfig+0x22e>
 8001d28:	2ac0      	cmp	r2, #192	; 0xc0
 8001d2a:	e7e6      	b.n	8001cfa <UART_SetConfig+0xda>
 8001d2c:	4a5c      	ldr	r2, [pc, #368]	; (8001ea0 <UART_SetConfig+0x280>)
 8001d2e:	4295      	cmp	r5, r2
 8001d30:	d110      	bne.n	8001d54 <UART_SetConfig+0x134>
 8001d32:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8001d36:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001d3a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001d3e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001d42:	f000 8090 	beq.w	8001e66 <UART_SetConfig+0x246>
 8001d46:	d9bd      	bls.n	8001cc4 <UART_SetConfig+0xa4>
 8001d48:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001d4c:	d07f      	beq.n	8001e4e <UART_SetConfig+0x22e>
 8001d4e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001d52:	e7d2      	b.n	8001cfa <UART_SetConfig+0xda>
 8001d54:	4a53      	ldr	r2, [pc, #332]	; (8001ea4 <UART_SetConfig+0x284>)
 8001d56:	4295      	cmp	r5, r2
 8001d58:	d117      	bne.n	8001d8a <UART_SetConfig+0x16a>
 8001d5a:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8001d5e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001d62:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8001d66:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001d6a:	d07c      	beq.n	8001e66 <UART_SetConfig+0x246>
 8001d6c:	d807      	bhi.n	8001d7e <UART_SetConfig+0x15e>
 8001d6e:	2a00      	cmp	r2, #0
 8001d70:	d1c5      	bne.n	8001cfe <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d76:	d154      	bne.n	8001e22 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001d78:	f7ff fc0a 	bl	8001590 <HAL_RCC_GetPCLK2Freq>
 8001d7c:	e7a9      	b.n	8001cd2 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d7e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001d82:	d064      	beq.n	8001e4e <UART_SetConfig+0x22e>
 8001d84:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8001d88:	e7b7      	b.n	8001cfa <UART_SetConfig+0xda>
 8001d8a:	4a47      	ldr	r2, [pc, #284]	; (8001ea8 <UART_SetConfig+0x288>)
 8001d8c:	4295      	cmp	r5, r2
 8001d8e:	d10f      	bne.n	8001db0 <UART_SetConfig+0x190>
 8001d90:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8001d94:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001d98:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8001d9c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001da0:	d061      	beq.n	8001e66 <UART_SetConfig+0x246>
 8001da2:	d98f      	bls.n	8001cc4 <UART_SetConfig+0xa4>
 8001da4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001da8:	d051      	beq.n	8001e4e <UART_SetConfig+0x22e>
 8001daa:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8001dae:	e7a4      	b.n	8001cfa <UART_SetConfig+0xda>
 8001db0:	4a3e      	ldr	r2, [pc, #248]	; (8001eac <UART_SetConfig+0x28c>)
 8001db2:	4295      	cmp	r5, r2
 8001db4:	d1a3      	bne.n	8001cfe <UART_SetConfig+0xde>
 8001db6:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8001dba:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001dbe:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001dc2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001dc6:	d04e      	beq.n	8001e66 <UART_SetConfig+0x246>
 8001dc8:	f67f af7c 	bls.w	8001cc4 <UART_SetConfig+0xa4>
 8001dcc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001dd0:	d03d      	beq.n	8001e4e <UART_SetConfig+0x22e>
 8001dd2:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8001dd6:	e790      	b.n	8001cfa <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8001dd8:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e781      	b.n	8001ce2 <UART_SetConfig+0xc2>
    switch (clocksource)
 8001dde:	2a08      	cmp	r2, #8
 8001de0:	d890      	bhi.n	8001d04 <UART_SetConfig+0xe4>
 8001de2:	a301      	add	r3, pc, #4	; (adr r3, 8001de8 <UART_SetConfig+0x1c8>)
 8001de4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001de8:	08001e0d 	.word	0x08001e0d
 8001dec:	08001e23 	.word	0x08001e23
 8001df0:	08001e29 	.word	0x08001e29
 8001df4:	08001d05 	.word	0x08001d05
 8001df8:	08001e3f 	.word	0x08001e3f
 8001dfc:	08001d05 	.word	0x08001d05
 8001e00:	08001d05 	.word	0x08001d05
 8001e04:	08001d05 	.word	0x08001d05
 8001e08:	08001e45 	.word	0x08001e45
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e0c:	f7ff fbb0 	bl	8001570 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e10:	6863      	ldr	r3, [r4, #4]
 8001e12:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001e16:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e1a:	b280      	uxth	r0, r0
 8001e1c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e1e:	2000      	movs	r0, #0
      break;
 8001e20:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001e22:	f7ff fbb5 	bl	8001590 <HAL_RCC_GetPCLK2Freq>
 8001e26:	e7f3      	b.n	8001e10 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001e28:	6862      	ldr	r2, [r4, #4]
 8001e2a:	0853      	lsrs	r3, r2, #1
 8001e2c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001e30:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	60eb      	str	r3, [r5, #12]
 8001e3c:	e7ef      	b.n	8001e1e <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e3e:	f7ff fac5 	bl	80013cc <HAL_RCC_GetSysClockFreq>
 8001e42:	e7e5      	b.n	8001e10 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e44:	6862      	ldr	r2, [r4, #4]
 8001e46:	0853      	lsrs	r3, r2, #1
 8001e48:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e4c:	e7f2      	b.n	8001e34 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e52:	d1e9      	bne.n	8001e28 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001e54:	6860      	ldr	r0, [r4, #4]
 8001e56:	0843      	lsrs	r3, r0, #1
 8001e58:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001e5c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001e60:	fbb3 f3f0 	udiv	r3, r3, r0
 8001e64:	e73b      	b.n	8001cde <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e6a:	d1e8      	bne.n	8001e3e <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e6c:	f7ff faae 	bl	80013cc <HAL_RCC_GetSysClockFreq>
 8001e70:	e72f      	b.n	8001cd2 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e76:	d1e5      	bne.n	8001e44 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001e78:	6860      	ldr	r0, [r4, #4]
 8001e7a:	0843      	lsrs	r3, r0, #1
 8001e7c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001e80:	e7ee      	b.n	8001e60 <UART_SetConfig+0x240>
 8001e82:	bf00      	nop
 8001e84:	efff69f3 	.word	0xefff69f3
 8001e88:	40011000 	.word	0x40011000
 8001e8c:	08008df8 	.word	0x08008df8
 8001e90:	40004400 	.word	0x40004400
 8001e94:	08008dfc 	.word	0x08008dfc
 8001e98:	40004800 	.word	0x40004800
 8001e9c:	40004c00 	.word	0x40004c00
 8001ea0:	40005000 	.word	0x40005000
 8001ea4:	40011400 	.word	0x40011400
 8001ea8:	40007800 	.word	0x40007800
 8001eac:	40007c00 	.word	0x40007c00

08001eb0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001eb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001eb2:	07da      	lsls	r2, r3, #31
{
 8001eb4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001eb6:	d506      	bpl.n	8001ec6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001eb8:	6801      	ldr	r1, [r0, #0]
 8001eba:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001ebc:	684a      	ldr	r2, [r1, #4]
 8001ebe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001ec2:	4322      	orrs	r2, r4
 8001ec4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ec6:	079c      	lsls	r4, r3, #30
 8001ec8:	d506      	bpl.n	8001ed8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001eca:	6801      	ldr	r1, [r0, #0]
 8001ecc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001ece:	684a      	ldr	r2, [r1, #4]
 8001ed0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ed4:	4322      	orrs	r2, r4
 8001ed6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001ed8:	0759      	lsls	r1, r3, #29
 8001eda:	d506      	bpl.n	8001eea <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001edc:	6801      	ldr	r1, [r0, #0]
 8001ede:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001ee0:	684a      	ldr	r2, [r1, #4]
 8001ee2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ee6:	4322      	orrs	r2, r4
 8001ee8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001eea:	071a      	lsls	r2, r3, #28
 8001eec:	d506      	bpl.n	8001efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001eee:	6801      	ldr	r1, [r0, #0]
 8001ef0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001ef2:	684a      	ldr	r2, [r1, #4]
 8001ef4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ef8:	4322      	orrs	r2, r4
 8001efa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001efc:	06dc      	lsls	r4, r3, #27
 8001efe:	d506      	bpl.n	8001f0e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f00:	6801      	ldr	r1, [r0, #0]
 8001f02:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001f04:	688a      	ldr	r2, [r1, #8]
 8001f06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f0a:	4322      	orrs	r2, r4
 8001f0c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f0e:	0699      	lsls	r1, r3, #26
 8001f10:	d506      	bpl.n	8001f20 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f12:	6801      	ldr	r1, [r0, #0]
 8001f14:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001f16:	688a      	ldr	r2, [r1, #8]
 8001f18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f1c:	4322      	orrs	r2, r4
 8001f1e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f20:	065a      	lsls	r2, r3, #25
 8001f22:	d510      	bpl.n	8001f46 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f24:	6801      	ldr	r1, [r0, #0]
 8001f26:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001f28:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f2a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f2e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001f32:	ea42 0204 	orr.w	r2, r2, r4
 8001f36:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f38:	d105      	bne.n	8001f46 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f3a:	684a      	ldr	r2, [r1, #4]
 8001f3c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001f3e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001f42:	4322      	orrs	r2, r4
 8001f44:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f46:	061b      	lsls	r3, r3, #24
 8001f48:	d506      	bpl.n	8001f58 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f4a:	6802      	ldr	r2, [r0, #0]
 8001f4c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001f4e:	6853      	ldr	r3, [r2, #4]
 8001f50:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001f54:	430b      	orrs	r3, r1
 8001f56:	6053      	str	r3, [r2, #4]
 8001f58:	bd10      	pop	{r4, pc}

08001f5a <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001f5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f5c:	2500      	movs	r5, #0
{
 8001f5e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f60:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001f62:	f7fe fb89 	bl	8000678 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f66:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8001f68:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	0712      	lsls	r2, r2, #28
 8001f6e:	d409      	bmi.n	8001f84 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8001f70:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001f72:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001f74:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001f78:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8001f7c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8001f80:	b003      	add	sp, #12
 8001f82:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f84:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001f88:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	9200      	str	r2, [sp, #0]
 8001f90:	462a      	mov	r2, r5
 8001f92:	f7ff fdbb 	bl	8001b0c <UART_WaitOnFlagUntilTimeout>
 8001f96:	2800      	cmp	r0, #0
 8001f98:	d0ea      	beq.n	8001f70 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001f9a:	2003      	movs	r0, #3
 8001f9c:	e7f0      	b.n	8001f80 <UART_CheckIdleState+0x26>

08001f9e <HAL_UART_Init>:
{
 8001f9e:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	b360      	cbz	r0, 8001ffe <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001fa4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001fa8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fac:	b91b      	cbnz	r3, 8001fb6 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001fae:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001fb2:	f005 fd5b 	bl	8007a6c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001fb6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001fb8:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fba:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8001fbc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001fc0:	6813      	ldr	r3, [r2, #0]
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fc8:	f7ff fe2a 	bl	8001c20 <UART_SetConfig>
 8001fcc:	2801      	cmp	r0, #1
 8001fce:	d016      	beq.n	8001ffe <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fd2:	b113      	cbz	r3, 8001fda <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f7ff ff6b 	bl	8001eb0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fda:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001fdc:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fe4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fec:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	f042 0201 	orr.w	r2, r2, #1
}
 8001ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8001ff8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001ffa:	f7ff bfae 	b.w	8001f5a <UART_CheckIdleState>
}
 8001ffe:	2001      	movs	r0, #1
 8002000:	bd10      	pop	{r4, pc}

08002002 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8002002:	ba40      	rev16	r0, r0
}
 8002004:	b280      	uxth	r0, r0
 8002006:	4770      	bx	lr

08002008 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 8002008:	ba00      	rev	r0, r0
 800200a:	4770      	bx	lr

0800200c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800200c:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800200e:	f001 f9b7 	bl	8003380 <mem_init>
  memp_init();
 8002012:	f001 fbcb 	bl	80037ac <memp_init>
  pbuf_init();
  netif_init();
 8002016:	f001 fc16 	bl	8003846 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800201a:	f004 fe07 	bl	8006c2c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800201e:	f002 f8b1 	bl	8004184 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8002022:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8002026:	f004 bdd7 	b.w	8006bd8 <sys_timeouts_init>
	...

0800202c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800202c:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800202e:	2618      	movs	r6, #24
 8002030:	4c07      	ldr	r4, [pc, #28]	; (8002050 <etharp_free_entry+0x24>)
{
 8002032:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8002034:	4346      	muls	r6, r0
 8002036:	59a0      	ldr	r0, [r4, r6]
 8002038:	b118      	cbz	r0, 8002042 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800203a:	f001 fd2f 	bl	8003a9c <pbuf_free>
    arp_table[i].q = NULL;
 800203e:	2300      	movs	r3, #0
 8002040:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8002042:	2318      	movs	r3, #24
 8002044:	fb03 4405 	mla	r4, r3, r5, r4
 8002048:	2300      	movs	r3, #0
 800204a:	7523      	strb	r3, [r4, #20]
 800204c:	bd70      	pop	{r4, r5, r6, pc}
 800204e:	bf00      	nop
 8002050:	20000094 	.word	0x20000094

08002054 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8002054:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002058:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800205a:	4689      	mov	r9, r1
 800205c:	4692      	mov	sl, r2
 800205e:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8002060:	4607      	mov	r7, r0
 8002062:	b930      	cbnz	r0, 8002072 <etharp_raw+0x1e>
 8002064:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <etharp_raw+0xc4>)
 8002066:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800206a:	492c      	ldr	r1, [pc, #176]	; (800211c <etharp_raw+0xc8>)
 800206c:	482c      	ldr	r0, [pc, #176]	; (8002120 <etharp_raw+0xcc>)
 800206e:	f005 fdbb 	bl	8007be8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8002072:	2200      	movs	r2, #0
 8002074:	211c      	movs	r1, #28
 8002076:	2002      	movs	r0, #2
 8002078:	f001 fd72 	bl	8003b60 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800207c:	4606      	mov	r6, r0
 800207e:	2800      	cmp	r0, #0
 8002080:	d047      	beq.n	8002112 <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8002082:	8943      	ldrh	r3, [r0, #10]
 8002084:	2b1b      	cmp	r3, #27
 8002086:	d806      	bhi.n	8002096 <etharp_raw+0x42>
 8002088:	4b23      	ldr	r3, [pc, #140]	; (8002118 <etharp_raw+0xc4>)
 800208a:	f240 4264 	movw	r2, #1124	; 0x464
 800208e:	4925      	ldr	r1, [pc, #148]	; (8002124 <etharp_raw+0xd0>)
 8002090:	4823      	ldr	r0, [pc, #140]	; (8002120 <etharp_raw+0xcc>)
 8002092:	f005 fda9 	bl	8007be8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8002096:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8002098:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800209c:	f7ff ffb1 	bl	8002002 <lwip_htons>
 80020a0:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80020a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d006      	beq.n	80020b8 <etharp_raw+0x64>
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <etharp_raw+0xc4>)
 80020ac:	f240 426b 	movw	r2, #1131	; 0x46b
 80020b0:	491d      	ldr	r1, [pc, #116]	; (8002128 <etharp_raw+0xd4>)
 80020b2:	481b      	ldr	r0, [pc, #108]	; (8002120 <etharp_raw+0xcc>)
 80020b4:	f005 fd98 	bl	8007be8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80020b8:	f8d8 3000 	ldr.w	r3, [r8]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80020bc:	464a      	mov	r2, r9
 80020be:	4631      	mov	r1, r6
 80020c0:	4638      	mov	r0, r7
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80020c2:	60a3      	str	r3, [r4, #8]
 80020c4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80020c8:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80020ca:	682b      	ldr	r3, [r5, #0]
 80020cc:	f8c4 3012 	str.w	r3, [r4, #18]
 80020d0:	88ab      	ldrh	r3, [r5, #4]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80020d2:	2500      	movs	r5, #0
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80020d4:	82e3      	strh	r3, [r4, #22]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80020d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80020de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80020e0:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80020e2:	7025      	strb	r5, [r4, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80020e4:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80020e6:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80020e8:	70e5      	strb	r5, [r4, #3]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80020ea:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80020ec:	2308      	movs	r3, #8
 80020ee:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 80020f0:	2306      	movs	r3, #6
 80020f2:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80020f4:	2304      	movs	r3, #4
 80020f6:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80020f8:	f640 0306 	movw	r3, #2054	; 0x806
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	4653      	mov	r3, sl
 8002100:	f004 ffc4 	bl	800708c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8002104:	4630      	mov	r0, r6
 8002106:	f001 fcc9 	bl	8003a9c <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800210a:	4628      	mov	r0, r5
}
 800210c:	b002      	add	sp, #8
 800210e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8002112:	f04f 30ff 	mov.w	r0, #4294967295
 8002116:	e7f9      	b.n	800210c <etharp_raw+0xb8>
 8002118:	08008efe 	.word	0x08008efe
 800211c:	08008f35 	.word	0x08008f35
 8002120:	08008f43 	.word	0x08008f43
 8002124:	08008f6b 	.word	0x08008f6b
 8002128:	08008f9c 	.word	0x08008f9c

0800212c <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 800212c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002130:	4b3e      	ldr	r3, [pc, #248]	; (800222c <etharp_find_entry.isra.0+0x100>)
  s8_t old_queue = ARP_TABLE_SIZE;
 8002132:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8002134:	4605      	mov	r5, r0
 8002136:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8002138:	4694      	mov	ip, r2
 800213a:	4614      	mov	r4, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800213c:	4681      	mov	r9, r0
 800213e:	4680      	mov	r8, r0
 8002140:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 8002142:	4696      	mov	lr, r2
 8002144:	461e      	mov	r6, r3
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8002146:	9101      	str	r1, [sp, #4]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8002148:	f1be 0f0a 	cmp.w	lr, #10
    u8_t state = arp_table[i].state;
 800214c:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800214e:	d111      	bne.n	8002174 <etharp_find_entry.isra.0+0x48>
 8002150:	b997      	cbnz	r7, 8002178 <etharp_find_entry.isra.0+0x4c>
      empty = i;
 8002152:	fa4f fe80 	sxtb.w	lr, r0
 8002156:	3001      	adds	r0, #1
 8002158:	3318      	adds	r3, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800215a:	280a      	cmp	r0, #10
 800215c:	d1f4      	bne.n	8002148 <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800215e:	9b01      	ldr	r3, [sp, #4]
 8002160:	0799      	lsls	r1, r3, #30
 8002162:	d404      	bmi.n	800216e <etharp_find_entry.isra.0+0x42>
 8002164:	f1be 0f0a 	cmp.w	lr, #10
 8002168:	d11c      	bne.n	80021a4 <etharp_find_entry.isra.0+0x78>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800216a:	07db      	lsls	r3, r3, #31
 800216c:	d435      	bmi.n	80021da <etharp_find_entry.isra.0+0xae>
    return (s8_t)ERR_MEM;
 800216e:	f04f 30ff 	mov.w	r0, #4294967295
 8002172:	e009      	b.n	8002188 <etharp_find_entry.isra.0+0x5c>
    } else if (state != ETHARP_STATE_EMPTY) {
 8002174:	2f00      	cmp	r7, #0
 8002176:	d0ee      	beq.n	8002156 <etharp_find_entry.isra.0+0x2a>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8002178:	2d00      	cmp	r5, #0
 800217a:	d04a      	beq.n	8002212 <etharp_find_entry.isra.0+0xe6>
 800217c:	6829      	ldr	r1, [r5, #0]
 800217e:	468a      	mov	sl, r1
 8002180:	6859      	ldr	r1, [r3, #4]
 8002182:	458a      	cmp	sl, r1
 8002184:	d145      	bne.n	8002212 <etharp_find_entry.isra.0+0xe6>
        return i;
 8002186:	b240      	sxtb	r0, r0
}
 8002188:	b003      	add	sp, #12
 800218a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 800218e:	45c2      	cmp	sl, r8
 8002190:	d3e1      	bcc.n	8002156 <etharp_find_entry.isra.0+0x2a>
            old_pending = i;
 8002192:	fa4f fc80 	sxtb.w	ip, r0
 8002196:	46d0      	mov	r8, sl
 8002198:	e7dd      	b.n	8002156 <etharp_find_entry.isra.0+0x2a>
          if (arp_table[i].ctime >= age_stable) {
 800219a:	45ca      	cmp	sl, r9
            old_stable = i;
 800219c:	bf24      	itt	cs
 800219e:	b244      	sxtbcs	r4, r0
 80021a0:	46d1      	movcs	r9, sl
 80021a2:	e7d8      	b.n	8002156 <etharp_find_entry.isra.0+0x2a>
    i = empty;
 80021a4:	fa5f f78e 	uxtb.w	r7, lr
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80021a8:	2318      	movs	r3, #24
 80021aa:	fb03 6307 	mla	r3, r3, r7, r6
 80021ae:	7d1b      	ldrb	r3, [r3, #20]
 80021b0:	b133      	cbz	r3, 80021c0 <etharp_find_entry.isra.0+0x94>
 80021b2:	4b1f      	ldr	r3, [pc, #124]	; (8002230 <etharp_find_entry.isra.0+0x104>)
 80021b4:	f240 1287 	movw	r2, #391	; 0x187
 80021b8:	491e      	ldr	r1, [pc, #120]	; (8002234 <etharp_find_entry.isra.0+0x108>)
 80021ba:	481f      	ldr	r0, [pc, #124]	; (8002238 <etharp_find_entry.isra.0+0x10c>)
 80021bc:	f005 fd14 	bl	8007be8 <iprintf>
  if (ipaddr != NULL) {
 80021c0:	b125      	cbz	r5, 80021cc <etharp_find_entry.isra.0+0xa0>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80021c2:	2318      	movs	r3, #24
 80021c4:	682a      	ldr	r2, [r5, #0]
 80021c6:	fb03 6307 	mla	r3, r3, r7, r6
 80021ca:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 80021cc:	2318      	movs	r3, #24
  return (err_t)i;
 80021ce:	b278      	sxtb	r0, r7
  arp_table[i].ctime = 0;
 80021d0:	fb03 6607 	mla	r6, r3, r7, r6
 80021d4:	2300      	movs	r3, #0
 80021d6:	8273      	strh	r3, [r6, #18]
 80021d8:	e7d6      	b.n	8002188 <etharp_find_entry.isra.0+0x5c>
    if (old_stable < ARP_TABLE_SIZE) {
 80021da:	2c0a      	cmp	r4, #10
 80021dc:	d00f      	beq.n	80021fe <etharp_find_entry.isra.0+0xd2>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80021de:	2318      	movs	r3, #24
      i = old_stable;
 80021e0:	b2e7      	uxtb	r7, r4
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80021e2:	435c      	muls	r4, r3
 80021e4:	5933      	ldr	r3, [r6, r4]
 80021e6:	b133      	cbz	r3, 80021f6 <etharp_find_entry.isra.0+0xca>
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <etharp_find_entry.isra.0+0x104>)
 80021ea:	f240 126f 	movw	r2, #367	; 0x16f
 80021ee:	4913      	ldr	r1, [pc, #76]	; (800223c <etharp_find_entry.isra.0+0x110>)
 80021f0:	4811      	ldr	r0, [pc, #68]	; (8002238 <etharp_find_entry.isra.0+0x10c>)
 80021f2:	f005 fcf9 	bl	8007be8 <iprintf>
    etharp_free_entry(i);
 80021f6:	4638      	mov	r0, r7
 80021f8:	f7ff ff18 	bl	800202c <etharp_free_entry>
 80021fc:	e7d4      	b.n	80021a8 <etharp_find_entry.isra.0+0x7c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 80021fe:	f1bc 0f0a 	cmp.w	ip, #10
 8002202:	d002      	beq.n	800220a <etharp_find_entry.isra.0+0xde>
      i = old_pending;
 8002204:	fa5f f78c 	uxtb.w	r7, ip
 8002208:	e7f5      	b.n	80021f6 <etharp_find_entry.isra.0+0xca>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800220a:	2a0a      	cmp	r2, #10
 800220c:	d0af      	beq.n	800216e <etharp_find_entry.isra.0+0x42>
      i = old_queue;
 800220e:	b2d7      	uxtb	r7, r2
 8002210:	e7f1      	b.n	80021f6 <etharp_find_entry.isra.0+0xca>
      if (state == ETHARP_STATE_PENDING) {
 8002212:	2f01      	cmp	r7, #1
 8002214:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 8002218:	d1bf      	bne.n	800219a <etharp_find_entry.isra.0+0x6e>
        if (arp_table[i].q != NULL) {
 800221a:	681f      	ldr	r7, [r3, #0]
 800221c:	2f00      	cmp	r7, #0
 800221e:	d0b6      	beq.n	800218e <etharp_find_entry.isra.0+0x62>
          if (arp_table[i].ctime >= age_queue) {
 8002220:	45da      	cmp	sl, fp
 8002222:	d398      	bcc.n	8002156 <etharp_find_entry.isra.0+0x2a>
            old_queue = i;
 8002224:	b242      	sxtb	r2, r0
 8002226:	46d3      	mov	fp, sl
 8002228:	e795      	b.n	8002156 <etharp_find_entry.isra.0+0x2a>
 800222a:	bf00      	nop
 800222c:	20000094 	.word	0x20000094
 8002230:	08008efe 	.word	0x08008efe
 8002234:	08008e20 	.word	0x08008e20
 8002238:	08008f43 	.word	0x08008f43
 800223c:	08008e09 	.word	0x08008e09

08002240 <etharp_cleanup_netif>:
{
 8002240:	b570      	push	{r4, r5, r6, lr}
 8002242:	4606      	mov	r6, r0
 8002244:	4d07      	ldr	r5, [pc, #28]	; (8002264 <etharp_cleanup_netif+0x24>)
 8002246:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8002248:	7d2b      	ldrb	r3, [r5, #20]
 800224a:	b12b      	cbz	r3, 8002258 <etharp_cleanup_netif+0x18>
 800224c:	68ab      	ldr	r3, [r5, #8]
 800224e:	42b3      	cmp	r3, r6
 8002250:	d102      	bne.n	8002258 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8002252:	4620      	mov	r0, r4
 8002254:	f7ff feea 	bl	800202c <etharp_free_entry>
 8002258:	3401      	adds	r4, #1
 800225a:	3518      	adds	r5, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800225c:	2c0a      	cmp	r4, #10
 800225e:	d1f3      	bne.n	8002248 <etharp_cleanup_netif+0x8>
}
 8002260:	bd70      	pop	{r4, r5, r6, pc}
 8002262:	bf00      	nop
 8002264:	20000094 	.word	0x20000094

08002268 <etharp_input>:
{
 8002268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800226c:	4680      	mov	r8, r0
 800226e:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8002270:	460c      	mov	r4, r1
 8002272:	b949      	cbnz	r1, 8002288 <etharp_input+0x20>
 8002274:	4b46      	ldr	r3, [pc, #280]	; (8002390 <etharp_input+0x128>)
 8002276:	f44f 7222 	mov.w	r2, #648	; 0x288
 800227a:	4946      	ldr	r1, [pc, #280]	; (8002394 <etharp_input+0x12c>)
 800227c:	4846      	ldr	r0, [pc, #280]	; (8002398 <etharp_input+0x130>)
 800227e:	f005 fcb3 	bl	8007be8 <iprintf>
}
 8002282:	b006      	add	sp, #24
 8002284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8002288:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800228a:	882b      	ldrh	r3, [r5, #0]
 800228c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002290:	d108      	bne.n	80022a4 <etharp_input+0x3c>
 8002292:	792b      	ldrb	r3, [r5, #4]
 8002294:	2b06      	cmp	r3, #6
 8002296:	d105      	bne.n	80022a4 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8002298:	796b      	ldrb	r3, [r5, #5]
 800229a:	2b04      	cmp	r3, #4
 800229c:	d102      	bne.n	80022a4 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800229e:	886b      	ldrh	r3, [r5, #2]
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d003      	beq.n	80022ac <etharp_input+0x44>
  pbuf_free(p);
 80022a4:	4640      	mov	r0, r8
 80022a6:	f001 fbf9 	bl	8003a9c <pbuf_free>
 80022aa:	e7ea      	b.n	8002282 <etharp_input+0x1a>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80022ac:	f8d5 300e 	ldr.w	r3, [r5, #14]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80022b0:	684e      	ldr	r6, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80022b2:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80022b4:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80022b6:	b116      	cbz	r6, 80022be <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80022b8:	1b9b      	subs	r3, r3, r6
 80022ba:	425e      	negs	r6, r3
 80022bc:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80022be:	2e00      	cmp	r6, #0
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80022c0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80022c4:	f105 0708 	add.w	r7, r5, #8
 80022c8:	bf14      	ite	ne
 80022ca:	f04f 0901 	movne.w	r9, #1
 80022ce:	f04f 0902 	moveq.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d006      	beq.n	80022e4 <etharp_input+0x7c>
 80022d6:	4b2e      	ldr	r3, [pc, #184]	; (8002390 <etharp_input+0x128>)
 80022d8:	f240 12ab 	movw	r2, #427	; 0x1ab
 80022dc:	492f      	ldr	r1, [pc, #188]	; (800239c <etharp_input+0x134>)
 80022de:	482e      	ldr	r0, [pc, #184]	; (8002398 <etharp_input+0x130>)
 80022e0:	f005 fc82 	bl	8007be8 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 80022e4:	9805      	ldr	r0, [sp, #20]
 80022e6:	2800      	cmp	r0, #0
 80022e8:	d03c      	beq.n	8002364 <etharp_input+0xfc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80022ea:	4621      	mov	r1, r4
 80022ec:	f000 fc95 	bl	8002c1a <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 80022f0:	4682      	mov	sl, r0
 80022f2:	bbb8      	cbnz	r0, 8002364 <etharp_input+0xfc>
      ip4_addr_ismulticast(ipaddr)) {
 80022f4:	9b05      	ldr	r3, [sp, #20]
 80022f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80022fa:	2be0      	cmp	r3, #224	; 0xe0
 80022fc:	d032      	beq.n	8002364 <etharp_input+0xfc>
  i = etharp_find_entry(ipaddr, flags, netif);
 80022fe:	4649      	mov	r1, r9
 8002300:	a805      	add	r0, sp, #20
 8002302:	f7ff ff13 	bl	800212c <etharp_find_entry.isra.0>
  if (i < 0) {
 8002306:	2800      	cmp	r0, #0
 8002308:	db2c      	blt.n	8002364 <etharp_input+0xfc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800230a:	2218      	movs	r2, #24
 800230c:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <etharp_input+0x138>)
 800230e:	f04f 0c02 	mov.w	ip, #2
 8002312:	fb02 f100 	mul.w	r1, r2, r0
 8002316:	eb03 0e01 	add.w	lr, r3, r1
 800231a:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800231e:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 8002322:	f8ce 4008 	str.w	r4, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8002326:	fb12 c200 	smlabb	r2, r2, r0, ip
 800232a:	6838      	ldr	r0, [r7, #0]
 800232c:	eb03 0c02 	add.w	ip, r3, r2
 8002330:	5098      	str	r0, [r3, r2]
 8002332:	88ba      	ldrh	r2, [r7, #4]
 8002334:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 8002338:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 800233c:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 8002340:	f1b9 0f00 	cmp.w	r9, #0
 8002344:	d00e      	beq.n	8002364 <etharp_input+0xfc>
    arp_table[i].q = NULL;
 8002346:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800234a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800234e:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8002352:	4649      	mov	r1, r9
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	4620      	mov	r0, r4
 8002358:	463b      	mov	r3, r7
 800235a:	f004 fe97 	bl	800708c <ethernet_output>
    pbuf_free(p);
 800235e:	4648      	mov	r0, r9
 8002360:	f001 fb9c 	bl	8003a9c <pbuf_free>
  switch (hdr->opcode) {
 8002364:	88eb      	ldrh	r3, [r5, #6]
 8002366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800236a:	d19b      	bne.n	80022a4 <etharp_input+0x3c>
    if (for_us) {
 800236c:	2e00      	cmp	r6, #0
 800236e:	d099      	beq.n	80022a4 <etharp_input+0x3c>
      etharp_raw(netif,
 8002370:	2202      	movs	r2, #2
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8002372:	f104 0325 	add.w	r3, r4, #37	; 0x25
      etharp_raw(netif,
 8002376:	9701      	str	r7, [sp, #4]
 8002378:	4620      	mov	r0, r4
 800237a:	9203      	str	r2, [sp, #12]
 800237c:	aa05      	add	r2, sp, #20
 800237e:	4619      	mov	r1, r3
 8002380:	9202      	str	r2, [sp, #8]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8002382:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 8002384:	9200      	str	r2, [sp, #0]
 8002386:	463a      	mov	r2, r7
 8002388:	f7ff fe64 	bl	8002054 <etharp_raw>
 800238c:	e78a      	b.n	80022a4 <etharp_input+0x3c>
 800238e:	bf00      	nop
 8002390:	08008efe 	.word	0x08008efe
 8002394:	08008f35 	.word	0x08008f35
 8002398:	08008f43 	.word	0x08008f43
 800239c:	08008e68 	.word	0x08008e68
 80023a0:	20000094 	.word	0x20000094

080023a4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80023a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80023a6:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80023a8:	f100 0325 	add.w	r3, r0, #37	; 0x25
 80023ac:	9102      	str	r1, [sp, #8]
 80023ae:	2401      	movs	r4, #1
 80023b0:	4905      	ldr	r1, [pc, #20]	; (80023c8 <etharp_request+0x24>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80023b2:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80023b4:	9403      	str	r4, [sp, #12]
 80023b6:	9101      	str	r1, [sp, #4]
 80023b8:	4619      	mov	r1, r3
 80023ba:	9200      	str	r2, [sp, #0]
 80023bc:	4a03      	ldr	r2, [pc, #12]	; (80023cc <etharp_request+0x28>)
 80023be:	f7ff fe49 	bl	8002054 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 80023c2:	b004      	add	sp, #16
 80023c4:	bd10      	pop	{r4, pc}
 80023c6:	bf00      	nop
 80023c8:	0800a2de 	.word	0x0800a2de
 80023cc:	0800a272 	.word	0x0800a272

080023d0 <etharp_tmr>:
{
 80023d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d2:	4c13      	ldr	r4, [pc, #76]	; (8002420 <etharp_tmr+0x50>)
 80023d4:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 80023d6:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80023d8:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 80023da:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 80023dc:	b16a      	cbz	r2, 80023fa <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 80023de:	89e3      	ldrh	r3, [r4, #14]
 80023e0:	3301      	adds	r3, #1
 80023e2:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80023e4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 80023e8:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80023ea:	d203      	bcs.n	80023f4 <etharp_tmr+0x24>
 80023ec:	2a01      	cmp	r2, #1
 80023ee:	d109      	bne.n	8002404 <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d90b      	bls.n	800240c <etharp_tmr+0x3c>
        etharp_free_entry(i);
 80023f4:	4628      	mov	r0, r5
 80023f6:	f7ff fe19 	bl	800202c <etharp_free_entry>
 80023fa:	3501      	adds	r5, #1
 80023fc:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80023fe:	2d0a      	cmp	r5, #10
 8002400:	d1eb      	bne.n	80023da <etharp_tmr+0xa>
 8002402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8002404:	2a03      	cmp	r2, #3
 8002406:	d106      	bne.n	8002416 <etharp_tmr+0x46>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8002408:	7427      	strb	r7, [r4, #16]
 800240a:	e7f6      	b.n	80023fa <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800240c:	4621      	mov	r1, r4
 800240e:	6860      	ldr	r0, [r4, #4]
 8002410:	f7ff ffc8 	bl	80023a4 <etharp_request>
 8002414:	e7f1      	b.n	80023fa <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8002416:	2a04      	cmp	r2, #4
 8002418:	d1ef      	bne.n	80023fa <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800241a:	7426      	strb	r6, [r4, #16]
 800241c:	e7ed      	b.n	80023fa <etharp_tmr+0x2a>
 800241e:	bf00      	nop
 8002420:	20000098 	.word	0x20000098

08002424 <etharp_output_to_arp_index>:
{
 8002424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002428:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800242a:	4d27      	ldr	r5, [pc, #156]	; (80024c8 <etharp_output_to_arp_index+0xa4>)
 800242c:	2218      	movs	r2, #24
{
 800242e:	b085      	sub	sp, #20
 8002430:	4606      	mov	r6, r0
 8002432:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8002434:	fb02 5204 	mla	r2, r2, r4, r5
 8002438:	7d12      	ldrb	r2, [r2, #20]
 800243a:	2a01      	cmp	r2, #1
 800243c:	d806      	bhi.n	800244c <etharp_output_to_arp_index+0x28>
 800243e:	4b23      	ldr	r3, [pc, #140]	; (80024cc <etharp_output_to_arp_index+0xa8>)
 8002440:	f240 22ed 	movw	r2, #749	; 0x2ed
 8002444:	4922      	ldr	r1, [pc, #136]	; (80024d0 <etharp_output_to_arp_index+0xac>)
 8002446:	4823      	ldr	r0, [pc, #140]	; (80024d4 <etharp_output_to_arp_index+0xb0>)
 8002448:	f005 fbce 	bl	8007be8 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800244c:	2118      	movs	r1, #24
 800244e:	f106 0725 	add.w	r7, r6, #37	; 0x25
 8002452:	fb01 5904 	mla	r9, r1, r4, r5
 8002456:	f899 3014 	ldrb.w	r3, [r9, #20]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d10d      	bne.n	800247a <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800245e:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 8002462:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8002466:	d917      	bls.n	8002498 <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8002468:	4649      	mov	r1, r9
 800246a:	4630      	mov	r0, r6
 800246c:	3104      	adds	r1, #4
 800246e:	f7ff ff99 	bl	80023a4 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8002472:	b910      	cbnz	r0, 800247a <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8002474:	2303      	movs	r3, #3
 8002476:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800247a:	2318      	movs	r3, #24
 800247c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002480:	4641      	mov	r1, r8
 8002482:	4630      	mov	r0, r6
 8002484:	fb03 5304 	mla	r3, r3, r4, r5
 8002488:	9200      	str	r2, [sp, #0]
 800248a:	463a      	mov	r2, r7
 800248c:	330c      	adds	r3, #12
 800248e:	f004 fdfd 	bl	800708c <ethernet_output>
}
 8002492:	b005      	add	sp, #20
 8002494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8002498:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800249c:	d3ed      	bcc.n	800247a <etharp_output_to_arp_index+0x56>
 800249e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80024a2:	2101      	movs	r1, #1
 80024a4:	4630      	mov	r0, r6
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	9103      	str	r1, [sp, #12]
 80024aa:	4639      	mov	r1, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80024ac:	f103 020c 	add.w	r2, r3, #12
 80024b0:	3304      	adds	r3, #4
 80024b2:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80024b4:	442a      	add	r2, r5
 80024b6:	9302      	str	r3, [sp, #8]
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <etharp_output_to_arp_index+0xb4>)
 80024ba:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80024bc:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	463b      	mov	r3, r7
 80024c2:	f7ff fdc7 	bl	8002054 <etharp_raw>
 80024c6:	e7d4      	b.n	8002472 <etharp_output_to_arp_index+0x4e>
 80024c8:	20000094 	.word	0x20000094
 80024cc:	08008efe 	.word	0x08008efe
 80024d0:	08008e8c 	.word	0x08008e8c
 80024d4:	08008f43 	.word	0x08008f43
 80024d8:	0800a2de 	.word	0x0800a2de

080024dc <etharp_query>:
{
 80024dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80024e0:	4689      	mov	r9, r1
 80024e2:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80024e4:	4601      	mov	r1, r0
{
 80024e6:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80024e8:	f8d9 0000 	ldr.w	r0, [r9]
 80024ec:	f000 fb95 	bl	8002c1a <ip4_addr_isbroadcast_u32>
 80024f0:	4604      	mov	r4, r0
 80024f2:	2800      	cmp	r0, #0
 80024f4:	d15e      	bne.n	80025b4 <etharp_query+0xd8>
      ip4_addr_ismulticast(ipaddr) ||
 80024f6:	f8d9 3000 	ldr.w	r3, [r9]
 80024fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80024fe:	2ae0      	cmp	r2, #224	; 0xe0
 8002500:	d058      	beq.n	80025b4 <etharp_query+0xd8>
      ip4_addr_isany(ipaddr)) {
 8002502:	2b00      	cmp	r3, #0
 8002504:	d056      	beq.n	80025b4 <etharp_query+0xd8>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8002506:	2101      	movs	r1, #1
 8002508:	4648      	mov	r0, r9
 800250a:	f7ff fe0f 	bl	800212c <etharp_find_entry.isra.0>
  if (i < 0) {
 800250e:	1e05      	subs	r5, r0, #0
 8002510:	db53      	blt.n	80025ba <etharp_query+0xde>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8002512:	4f40      	ldr	r7, [pc, #256]	; (8002614 <etharp_query+0x138>)
 8002514:	2318      	movs	r3, #24
 8002516:	fb03 7305 	mla	r3, r3, r5, r7
 800251a:	7d1a      	ldrb	r2, [r3, #20]
 800251c:	b91a      	cbnz	r2, 8002526 <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800251e:	2401      	movs	r4, #1
    arp_table[i].netif = netif;
 8002520:	f8c3 8008 	str.w	r8, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8002524:	751c      	strb	r4, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8002526:	2318      	movs	r3, #24
 8002528:	fb03 7305 	mla	r3, r3, r5, r7
 800252c:	7d1b      	ldrb	r3, [r3, #20]
 800252e:	b933      	cbnz	r3, 800253e <etharp_query+0x62>
 8002530:	4b39      	ldr	r3, [pc, #228]	; (8002618 <etharp_query+0x13c>)
 8002532:	f240 32c9 	movw	r2, #969	; 0x3c9
 8002536:	4939      	ldr	r1, [pc, #228]	; (800261c <etharp_query+0x140>)
 8002538:	4839      	ldr	r0, [pc, #228]	; (8002620 <etharp_query+0x144>)
 800253a:	f005 fb55 	bl	8007be8 <iprintf>
  if (is_new_entry || (q == NULL)) {
 800253e:	b90c      	cbnz	r4, 8002544 <etharp_query+0x68>
 8002540:	2e00      	cmp	r6, #0
 8002542:	d13c      	bne.n	80025be <etharp_query+0xe2>
    result = etharp_request(netif, ipaddr);
 8002544:	4649      	mov	r1, r9
 8002546:	4640      	mov	r0, r8
 8002548:	f7ff ff2c 	bl	80023a4 <etharp_request>
    if (q == NULL) {
 800254c:	2e00      	cmp	r6, #0
 800254e:	d138      	bne.n	80025c2 <etharp_query+0xe6>
}
 8002550:	b002      	add	sp, #8
 8002552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8002556:	d1fb      	bne.n	8002550 <etharp_query+0x74>
 8002558:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800255a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8002618 <etharp_query+0x13c>
 800255e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8002628 <etharp_query+0x14c>
 8002562:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002620 <etharp_query+0x144>
    while (p) {
 8002566:	b99c      	cbnz	r4, 8002590 <etharp_query+0xb4>
      pbuf_ref(p);
 8002568:	4630      	mov	r0, r6
 800256a:	f001 fc51 	bl	8003e10 <pbuf_ref>
    if (p != NULL) {
 800256e:	2e00      	cmp	r6, #0
 8002570:	d04c      	beq.n	800260c <etharp_query+0x130>
 8002572:	46b0      	mov	r8, r6
      if (arp_table[i].q != NULL) {
 8002574:	2318      	movs	r3, #24
 8002576:	fb03 f205 	mul.w	r2, r3, r5
 800257a:	461c      	mov	r4, r3
 800257c:	58b8      	ldr	r0, [r7, r2]
 800257e:	b108      	cbz	r0, 8002584 <etharp_query+0xa8>
        pbuf_free(arp_table[i].q);
 8002580:	f001 fa8c 	bl	8003a9c <pbuf_free>
      arp_table[i].q = p;
 8002584:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 8002588:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800258a:	f847 8003 	str.w	r8, [r7, r3]
 800258e:	e7df      	b.n	8002550 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8002590:	8962      	ldrh	r2, [r4, #10]
 8002592:	8923      	ldrh	r3, [r4, #8]
 8002594:	429a      	cmp	r2, r3
 8002596:	d108      	bne.n	80025aa <etharp_query+0xce>
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	b133      	cbz	r3, 80025aa <etharp_query+0xce>
 800259c:	4643      	mov	r3, r8
 800259e:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80025a2:	4649      	mov	r1, r9
 80025a4:	4650      	mov	r0, sl
 80025a6:	f005 fb1f 	bl	8007be8 <iprintf>
      if (p->type != PBUF_ROM) {
 80025aa:	7b23      	ldrb	r3, [r4, #12]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d11e      	bne.n	80025ee <etharp_query+0x112>
      p = p->next;
 80025b0:	6824      	ldr	r4, [r4, #0]
 80025b2:	e7d8      	b.n	8002566 <etharp_query+0x8a>
    return ERR_ARG;
 80025b4:	f06f 000f 	mvn.w	r0, #15
 80025b8:	e7ca      	b.n	8002550 <etharp_query+0x74>
 80025ba:	4628      	mov	r0, r5
 80025bc:	e7c8      	b.n	8002550 <etharp_query+0x74>
  err_t result = ERR_MEM;
 80025be:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80025c2:	2318      	movs	r3, #24
 80025c4:	fb03 7205 	mla	r2, r3, r5, r7
 80025c8:	7d12      	ldrb	r2, [r2, #20]
 80025ca:	2a01      	cmp	r2, #1
 80025cc:	d9c3      	bls.n	8002556 <etharp_query+0x7a>
    ETHARP_SET_HINT(netif, i);
 80025ce:	4a15      	ldr	r2, [pc, #84]	; (8002624 <etharp_query+0x148>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80025d0:	4631      	mov	r1, r6
 80025d2:	4640      	mov	r0, r8
    ETHARP_SET_HINT(netif, i);
 80025d4:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80025d6:	220c      	movs	r2, #12
 80025d8:	fb13 2305 	smlabb	r3, r3, r5, r2
 80025dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025e0:	443b      	add	r3, r7
 80025e2:	9200      	str	r2, [sp, #0]
 80025e4:	f108 0225 	add.w	r2, r8, #37	; 0x25
 80025e8:	f004 fd50 	bl	800708c <ethernet_output>
 80025ec:	e7b0      	b.n	8002550 <etharp_query+0x74>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80025ee:	2200      	movs	r2, #0
 80025f0:	8921      	ldrh	r1, [r4, #8]
 80025f2:	2002      	movs	r0, #2
 80025f4:	f001 fab4 	bl	8003b60 <pbuf_alloc>
      if (p != NULL) {
 80025f8:	4680      	mov	r8, r0
 80025fa:	b138      	cbz	r0, 800260c <etharp_query+0x130>
        if (pbuf_copy(p, q) != ERR_OK) {
 80025fc:	4631      	mov	r1, r6
 80025fe:	f001 fc5f 	bl	8003ec0 <pbuf_copy>
 8002602:	2800      	cmp	r0, #0
 8002604:	d0b6      	beq.n	8002574 <etharp_query+0x98>
          pbuf_free(p);
 8002606:	4640      	mov	r0, r8
 8002608:	f001 fa48 	bl	8003a9c <pbuf_free>
      result = ERR_MEM;
 800260c:	f04f 30ff 	mov.w	r0, #4294967295
 8002610:	e79e      	b.n	8002550 <etharp_query+0x74>
 8002612:	bf00      	nop
 8002614:	20000094 	.word	0x20000094
 8002618:	08008efe 	.word	0x08008efe
 800261c:	08008ebc 	.word	0x08008ebc
 8002620:	08008f43 	.word	0x08008f43
 8002624:	20000184 	.word	0x20000184
 8002628:	08008ee4 	.word	0x08008ee4

0800262c <etharp_output>:
{
 800262c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800262e:	460e      	mov	r6, r1
 8002630:	b085      	sub	sp, #20
 8002632:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8002634:	4604      	mov	r4, r0
 8002636:	b930      	cbnz	r0, 8002646 <etharp_output+0x1a>
 8002638:	4b3e      	ldr	r3, [pc, #248]	; (8002734 <etharp_output+0x108>)
 800263a:	f240 321b 	movw	r2, #795	; 0x31b
 800263e:	493e      	ldr	r1, [pc, #248]	; (8002738 <etharp_output+0x10c>)
 8002640:	483e      	ldr	r0, [pc, #248]	; (800273c <etharp_output+0x110>)
 8002642:	f005 fad1 	bl	8007be8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8002646:	b936      	cbnz	r6, 8002656 <etharp_output+0x2a>
 8002648:	4b3a      	ldr	r3, [pc, #232]	; (8002734 <etharp_output+0x108>)
 800264a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800264e:	493c      	ldr	r1, [pc, #240]	; (8002740 <etharp_output+0x114>)
 8002650:	483a      	ldr	r0, [pc, #232]	; (800273c <etharp_output+0x110>)
 8002652:	f005 fac9 	bl	8007be8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8002656:	b935      	cbnz	r5, 8002666 <etharp_output+0x3a>
 8002658:	4b36      	ldr	r3, [pc, #216]	; (8002734 <etharp_output+0x108>)
 800265a:	f240 321d 	movw	r2, #797	; 0x31d
 800265e:	4939      	ldr	r1, [pc, #228]	; (8002744 <etharp_output+0x118>)
 8002660:	4836      	ldr	r0, [pc, #216]	; (800273c <etharp_output+0x110>)
 8002662:	f005 fac1 	bl	8007be8 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8002666:	4621      	mov	r1, r4
 8002668:	6828      	ldr	r0, [r5, #0]
 800266a:	f000 fad6 	bl	8002c1a <ip4_addr_isbroadcast_u32>
 800266e:	2800      	cmp	r0, #0
 8002670:	d15a      	bne.n	8002728 <etharp_output+0xfc>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8002672:	682b      	ldr	r3, [r5, #0]
 8002674:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002678:	2ae0      	cmp	r2, #224	; 0xe0
 800267a:	d11d      	bne.n	80026b8 <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800267c:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800267e:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8002682:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8002686:	235e      	movs	r3, #94	; 0x5e
 8002688:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800268c:	786b      	ldrb	r3, [r5, #1]
 800268e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002692:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8002696:	78ab      	ldrb	r3, [r5, #2]
 8002698:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800269c:	78eb      	ldrb	r3, [r5, #3]
 800269e:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 80026a2:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80026a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026a8:	4631      	mov	r1, r6
 80026aa:	4620      	mov	r0, r4
 80026ac:	9200      	str	r2, [sp, #0]
 80026ae:	f104 0225 	add.w	r2, r4, #37	; 0x25
 80026b2:	f004 fceb 	bl	800708c <ethernet_output>
 80026b6:	e01f      	b.n	80026f8 <etharp_output+0xcc>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80026b8:	6862      	ldr	r2, [r4, #4]
 80026ba:	68a1      	ldr	r1, [r4, #8]
 80026bc:	405a      	eors	r2, r3
 80026be:	420a      	tst	r2, r1
 80026c0:	d008      	beq.n	80026d4 <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 80026c2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80026c4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d003      	beq.n	80026d4 <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80026cc:	68e3      	ldr	r3, [r4, #12]
 80026ce:	b36b      	cbz	r3, 800272c <etharp_output+0x100>
            dst_addr = netif_ip4_gw(netif);
 80026d0:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80026d4:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <etharp_output+0x11c>)
 80026d6:	2018      	movs	r0, #24
 80026d8:	491c      	ldr	r1, [pc, #112]	; (800274c <etharp_output+0x120>)
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	fb00 1002 	mla	r0, r0, r2, r1
 80026e0:	7d01      	ldrb	r1, [r0, #20]
 80026e2:	2901      	cmp	r1, #1
 80026e4:	4619      	mov	r1, r3
 80026e6:	d909      	bls.n	80026fc <etharp_output+0xd0>
 80026e8:	682f      	ldr	r7, [r5, #0]
 80026ea:	6843      	ldr	r3, [r0, #4]
 80026ec:	429f      	cmp	r7, r3
 80026ee:	d105      	bne.n	80026fc <etharp_output+0xd0>
        return etharp_output_to_arp_index(netif, q, i);
 80026f0:	4631      	mov	r1, r6
 80026f2:	4620      	mov	r0, r4
 80026f4:	f7ff fe96 	bl	8002424 <etharp_output_to_arp_index>
}
 80026f8:	b005      	add	sp, #20
 80026fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <etharp_output+0x120>)
{
 80026fe:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8002700:	7d18      	ldrb	r0, [r3, #20]
 8002702:	2801      	cmp	r0, #1
 8002704:	d906      	bls.n	8002714 <etharp_output+0xe8>
 8002706:	682f      	ldr	r7, [r5, #0]
 8002708:	6858      	ldr	r0, [r3, #4]
 800270a:	4287      	cmp	r7, r0
 800270c:	d102      	bne.n	8002714 <etharp_output+0xe8>
        ETHARP_SET_HINT(netif, i);
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	700a      	strb	r2, [r1, #0]
 8002712:	e7ed      	b.n	80026f0 <etharp_output+0xc4>
 8002714:	3201      	adds	r2, #1
 8002716:	3318      	adds	r3, #24
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8002718:	2a0a      	cmp	r2, #10
 800271a:	d1f1      	bne.n	8002700 <etharp_output+0xd4>
    return etharp_query(netif, dst_addr, q);
 800271c:	4632      	mov	r2, r6
 800271e:	4629      	mov	r1, r5
 8002720:	4620      	mov	r0, r4
 8002722:	f7ff fedb 	bl	80024dc <etharp_query>
 8002726:	e7e7      	b.n	80026f8 <etharp_output+0xcc>
    dest = (const struct eth_addr *)&ethbroadcast;
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <etharp_output+0x124>)
 800272a:	e7bb      	b.n	80026a4 <etharp_output+0x78>
            return ERR_RTE;
 800272c:	f06f 0003 	mvn.w	r0, #3
 8002730:	e7e2      	b.n	80026f8 <etharp_output+0xcc>
 8002732:	bf00      	nop
 8002734:	08008efe 	.word	0x08008efe
 8002738:	08008f35 	.word	0x08008f35
 800273c:	08008f43 	.word	0x08008f43
 8002740:	0800990b 	.word	0x0800990b
 8002744:	08008e49 	.word	0x08008e49
 8002748:	20000184 	.word	0x20000184
 800274c:	20000094 	.word	0x20000094
 8002750:	0800a272 	.word	0x0800a272

08002754 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8002754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002756:	4604      	mov	r4, r0
 8002758:	b087      	sub	sp, #28
 800275a:	460f      	mov	r7, r1
 800275c:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800275e:	2124      	movs	r1, #36	; 0x24
 8002760:	2200      	movs	r2, #0
 8002762:	2001      	movs	r0, #1
 8002764:	f001 f9fc 	bl	8003b60 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8002768:	4605      	mov	r5, r0
 800276a:	b3a0      	cbz	r0, 80027d6 <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800276c:	8943      	ldrh	r3, [r0, #10]
 800276e:	2b23      	cmp	r3, #35	; 0x23
 8002770:	d806      	bhi.n	8002780 <icmp_send_response.isra.0+0x2c>
 8002772:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <icmp_send_response.isra.0+0x88>)
 8002774:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8002778:	4919      	ldr	r1, [pc, #100]	; (80027e0 <icmp_send_response.isra.0+0x8c>)
 800277a:	481a      	ldr	r0, [pc, #104]	; (80027e4 <icmp_send_response.isra.0+0x90>)
 800277c:	f005 fa34 	bl	8007be8 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8002780:	6822      	ldr	r2, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8002782:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8002784:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8002786:	f102 001c 	add.w	r0, r2, #28
  icmphdr->id = 0;
 800278a:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800278c:	f104 0108 	add.w	r1, r4, #8
  icmphdr->id = 0;
 8002790:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8002792:	71a3      	strb	r3, [r4, #6]
 8002794:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8002796:	4613      	mov	r3, r2
  icmphdr->type = type;
 8002798:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 800279a:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800279c:	f853 6b04 	ldr.w	r6, [r3], #4
 80027a0:	4283      	cmp	r3, r0
 80027a2:	f841 6b04 	str.w	r6, [r1], #4
 80027a6:	d1f9      	bne.n	800279c <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80027a8:	ae06      	add	r6, sp, #24
 80027aa:	68d3      	ldr	r3, [r2, #12]
 80027ac:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80027b0:	4630      	mov	r0, r6
 80027b2:	f000 f8bb 	bl	800292c <ip4_route>
#endif
  if (netif != NULL) {
 80027b6:	b158      	cbz	r0, 80027d0 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80027b8:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80027ba:	2301      	movs	r3, #1
 80027bc:	4632      	mov	r2, r6
    icmphdr->chksum = 0;
 80027be:	70a1      	strb	r1, [r4, #2]
 80027c0:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80027c2:	9002      	str	r0, [sp, #8]
 80027c4:	4628      	mov	r0, r5
 80027c6:	e88d 000a 	stmia.w	sp, {r1, r3}
 80027ca:	23ff      	movs	r3, #255	; 0xff
 80027cc:	f000 fa14 	bl	8002bf8 <ip4_output_if>
  }
  pbuf_free(q);
 80027d0:	4628      	mov	r0, r5
 80027d2:	f001 f963 	bl	8003a9c <pbuf_free>
}
 80027d6:	b007      	add	sp, #28
 80027d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027da:	bf00      	nop
 80027dc:	08009044 	.word	0x08009044
 80027e0:	08009079 	.word	0x08009079
 80027e4:	08008f43 	.word	0x08008f43

080027e8 <icmp_input>:
  iphdr_in = ip4_current_header();
 80027e8:	4b45      	ldr	r3, [pc, #276]	; (8002900 <icmp_input+0x118>)
{
 80027ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 80027ee:	f8d3 9008 	ldr.w	r9, [r3, #8]
{
 80027f2:	b085      	sub	sp, #20
 80027f4:	4604      	mov	r4, r0
 80027f6:	4688      	mov	r8, r1
  hlen = IPH_HL(iphdr_in) * 4;
 80027f8:	f899 5000 	ldrb.w	r5, [r9]
 80027fc:	461f      	mov	r7, r3
 80027fe:	f005 050f 	and.w	r5, r5, #15
 8002802:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8002804:	2d13      	cmp	r5, #19
 8002806:	d92a      	bls.n	800285e <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 8002808:	8942      	ldrh	r2, [r0, #10]
 800280a:	2a03      	cmp	r2, #3
 800280c:	d927      	bls.n	800285e <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 800280e:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 8002810:	7812      	ldrb	r2, [r2, #0]
 8002812:	2a08      	cmp	r2, #8
 8002814:	d123      	bne.n	800285e <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8002816:	6958      	ldr	r0, [r3, #20]
 8002818:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800281c:	2ae0      	cmp	r2, #224	; 0xe0
 800281e:	d01e      	beq.n	800285e <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8002820:	6819      	ldr	r1, [r3, #0]
 8002822:	f000 f9fa 	bl	8002c1a <ip4_addr_isbroadcast_u32>
 8002826:	4606      	mov	r6, r0
 8002828:	b9c8      	cbnz	r0, 800285e <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800282a:	8923      	ldrh	r3, [r4, #8]
 800282c:	2b07      	cmp	r3, #7
 800282e:	d916      	bls.n	800285e <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8002830:	f105 010e 	add.w	r1, r5, #14
 8002834:	4620      	mov	r0, r4
 8002836:	f001 f92b 	bl	8003a90 <pbuf_header>
 800283a:	2800      	cmp	r0, #0
 800283c:	d04f      	beq.n	80028de <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800283e:	8921      	ldrh	r1, [r4, #8]
 8002840:	4632      	mov	r2, r6
 8002842:	2002      	movs	r0, #2
 8002844:	4429      	add	r1, r5
 8002846:	b289      	uxth	r1, r1
 8002848:	f001 f98a 	bl	8003b60 <pbuf_alloc>
      if (r == NULL) {
 800284c:	4606      	mov	r6, r0
 800284e:	b130      	cbz	r0, 800285e <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8002850:	8942      	ldrh	r2, [r0, #10]
 8002852:	f105 0308 	add.w	r3, r5, #8
 8002856:	429a      	cmp	r2, r3
 8002858:	d207      	bcs.n	800286a <icmp_input+0x82>
        pbuf_free(r);
 800285a:	f001 f91f 	bl	8003a9c <pbuf_free>
  pbuf_free(p);
 800285e:	4620      	mov	r0, r4
}
 8002860:	b005      	add	sp, #20
 8002862:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8002866:	f001 b919 	b.w	8003a9c <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 800286a:	4649      	mov	r1, r9
 800286c:	462a      	mov	r2, r5
 800286e:	6840      	ldr	r0, [r0, #4]
 8002870:	f005 f9a7 	bl	8007bc2 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8002874:	4269      	negs	r1, r5
 8002876:	4630      	mov	r0, r6
 8002878:	f001 f90a 	bl	8003a90 <pbuf_header>
 800287c:	b138      	cbz	r0, 800288e <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800287e:	4b21      	ldr	r3, [pc, #132]	; (8002904 <icmp_input+0x11c>)
 8002880:	22af      	movs	r2, #175	; 0xaf
 8002882:	4921      	ldr	r1, [pc, #132]	; (8002908 <icmp_input+0x120>)
 8002884:	4821      	ldr	r0, [pc, #132]	; (800290c <icmp_input+0x124>)
 8002886:	f005 f9af 	bl	8007be8 <iprintf>
        pbuf_free(r);
 800288a:	4630      	mov	r0, r6
 800288c:	e7e5      	b.n	800285a <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 800288e:	4621      	mov	r1, r4
 8002890:	4630      	mov	r0, r6
 8002892:	f001 fb15 	bl	8003ec0 <pbuf_copy>
 8002896:	2800      	cmp	r0, #0
 8002898:	d1f7      	bne.n	800288a <icmp_input+0xa2>
      pbuf_free(p);
 800289a:	4620      	mov	r0, r4
 800289c:	4634      	mov	r4, r6
 800289e:	f001 f8fd 	bl	8003a9c <pbuf_free>
    if (pbuf_header(p, (s16_t)hlen)) {
 80028a2:	4629      	mov	r1, r5
 80028a4:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 80028a6:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 80028a8:	f001 f8f2 	bl	8003a90 <pbuf_header>
 80028ac:	4602      	mov	r2, r0
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d1d5      	bne.n	800285e <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80028b2:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80028bc:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80028be:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 80028c0:	70b0      	strb	r0, [r6, #2]
 80028c2:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80028c4:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80028c6:	7288      	strb	r0, [r1, #10]
 80028c8:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80028ca:	2101      	movs	r1, #1
 80028cc:	9000      	str	r0, [sp, #0]
 80028ce:	4620      	mov	r0, r4
 80028d0:	9101      	str	r1, [sp, #4]
 80028d2:	f8cd 8008 	str.w	r8, [sp, #8]
 80028d6:	490e      	ldr	r1, [pc, #56]	; (8002910 <icmp_input+0x128>)
 80028d8:	f000 f98e 	bl	8002bf8 <ip4_output_if>
 80028dc:	e7bf      	b.n	800285e <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80028de:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 80028e2:	4620      	mov	r0, r4
 80028e4:	31f2      	adds	r1, #242	; 0xf2
 80028e6:	b209      	sxth	r1, r1
 80028e8:	f001 f8d2 	bl	8003a90 <pbuf_header>
 80028ec:	2800      	cmp	r0, #0
 80028ee:	d0d8      	beq.n	80028a2 <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <icmp_input+0x11c>)
 80028f2:	22c0      	movs	r2, #192	; 0xc0
 80028f4:	4907      	ldr	r1, [pc, #28]	; (8002914 <icmp_input+0x12c>)
 80028f6:	4805      	ldr	r0, [pc, #20]	; (800290c <icmp_input+0x124>)
 80028f8:	f005 f976 	bl	8007be8 <iprintf>
        goto icmperr;
 80028fc:	e7af      	b.n	800285e <icmp_input+0x76>
 80028fe:	bf00      	nop
 8002900:	20000220 	.word	0x20000220
 8002904:	08009044 	.word	0x08009044
 8002908:	08008fdd 	.word	0x08008fdd
 800290c:	08008f43 	.word	0x08008f43
 8002910:	20000234 	.word	0x20000234
 8002914:	08009012 	.word	0x08009012

08002918 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8002918:	460a      	mov	r2, r1
 800291a:	3004      	adds	r0, #4
 800291c:	2103      	movs	r1, #3
 800291e:	f7ff bf19 	b.w	8002754 <icmp_send_response.isra.0>

08002922 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8002922:	460a      	mov	r2, r1
 8002924:	3004      	adds	r0, #4
 8002926:	210b      	movs	r1, #11
 8002928:	f7ff bf14 	b.w	8002754 <icmp_send_response.isra.0>

0800292c <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800292c:	4b13      	ldr	r3, [pc, #76]	; (800297c <ip4_route+0x50>)
{
 800292e:	b530      	push	{r4, r5, lr}
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	b96b      	cbnz	r3, 8002950 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8002934:	4a12      	ldr	r2, [pc, #72]	; (8002980 <ip4_route+0x54>)
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	b1ea      	cbz	r2, 8002976 <ip4_route+0x4a>
 800293a:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
 800293e:	f001 0105 	and.w	r1, r1, #5
 8002942:	2905      	cmp	r1, #5
 8002944:	d117      	bne.n	8002976 <ip4_route+0x4a>
 8002946:	6851      	ldr	r1, [r2, #4]
 8002948:	2900      	cmp	r1, #0
 800294a:	bf18      	it	ne
 800294c:	4613      	movne	r3, r2
 800294e:	e012      	b.n	8002976 <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8002950:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 8002954:	f004 0205 	and.w	r2, r4, #5
 8002958:	2a05      	cmp	r2, #5
 800295a:	d1e9      	bne.n	8002930 <ip4_route+0x4>
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	2a00      	cmp	r2, #0
 8002960:	d0e6      	beq.n	8002930 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8002962:	6801      	ldr	r1, [r0, #0]
 8002964:	689d      	ldr	r5, [r3, #8]
 8002966:	404a      	eors	r2, r1
 8002968:	422a      	tst	r2, r5
 800296a:	d004      	beq.n	8002976 <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800296c:	07a2      	lsls	r2, r4, #30
 800296e:	d4df      	bmi.n	8002930 <ip4_route+0x4>
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	4291      	cmp	r1, r2
 8002974:	d1dc      	bne.n	8002930 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8002976:	4618      	mov	r0, r3
 8002978:	bd30      	pop	{r4, r5, pc}
 800297a:	bf00      	nop
 800297c:	20003738 	.word	0x20003738
 8002980:	2000373c 	.word	0x2000373c

08002984 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8002984:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8002988:	6847      	ldr	r7, [r0, #4]
{
 800298a:	4605      	mov	r5, r0
 800298c:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 800298e:	f897 9000 	ldrb.w	r9, [r7]
 8002992:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8002996:	2b04      	cmp	r3, #4
 8002998:	d005      	beq.n	80029a6 <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800299a:	4628      	mov	r0, r5
 800299c:	f001 f87e 	bl	8003a9c <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 80029a0:	2000      	movs	r0, #0
 80029a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80029a6:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL(iphdr);
 80029a8:	f009 090f 	and.w	r9, r9, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80029ac:	f7ff fb29 	bl	8002002 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 80029b0:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen *= 4;
 80029b2:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80029b6:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 80029b8:	4283      	cmp	r3, r0
 80029ba:	d903      	bls.n	80029c4 <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 80029bc:	4601      	mov	r1, r0
 80029be:	4628      	mov	r0, r5
 80029c0:	f001 f9ae 	bl	8003d20 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80029c4:	896b      	ldrh	r3, [r5, #10]
 80029c6:	454b      	cmp	r3, r9
 80029c8:	d3e7      	bcc.n	800299a <ip4_input+0x16>
 80029ca:	892b      	ldrh	r3, [r5, #8]
 80029cc:	42a3      	cmp	r3, r4
 80029ce:	d3e4      	bcc.n	800299a <ip4_input+0x16>
 80029d0:	f1b9 0f13 	cmp.w	r9, #19
 80029d4:	d9e1      	bls.n	800299a <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4c49      	ldr	r4, [pc, #292]	; (8002b00 <ip4_input+0x17c>)
 80029da:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80029dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80029e0:	68fa      	ldr	r2, [r7, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80029e2:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80029e4:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80029e6:	d139      	bne.n	8002a5c <ip4_input+0xd8>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80029e8:	f898 302b 	ldrb.w	r3, [r8, #43]	; 0x2b
 80029ec:	07da      	lsls	r2, r3, #31
 80029ee:	d503      	bpl.n	80029f8 <ip4_input+0x74>
 80029f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d158      	bne.n	8002aaa <ip4_input+0x126>
      netif = NULL;
 80029f8:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80029fa:	4641      	mov	r1, r8
 80029fc:	6920      	ldr	r0, [r4, #16]
 80029fe:	f000 f90c 	bl	8002c1a <ip4_addr_isbroadcast_u32>
 8002a02:	2800      	cmp	r0, #0
 8002a04:	d1c9      	bne.n	800299a <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8002a06:	6923      	ldr	r3, [r4, #16]
 8002a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8002a0c:	2be0      	cmp	r3, #224	; 0xe0
 8002a0e:	d0c4      	beq.n	800299a <ip4_input+0x16>
  if (netif == NULL) {
 8002a10:	2e00      	cmp	r6, #0
 8002a12:	d0c2      	beq.n	800299a <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a1a:	b133      	cbz	r3, 8002a2a <ip4_input+0xa6>
    p = ip4_reass(p);
 8002a1c:	4628      	mov	r0, r5
 8002a1e:	f000 fa2b 	bl	8002e78 <ip4_reass>
    if (p == NULL) {
 8002a22:	4605      	mov	r5, r0
 8002a24:	2800      	cmp	r0, #0
 8002a26:	d0bb      	beq.n	80029a0 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 8002a28:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8002a2a:	60a7      	str	r7, [r4, #8]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8002a2c:	f1c9 0100 	rsb	r1, r9, #0
 8002a30:	4628      	mov	r0, r5
  ip_data.current_input_netif = inp;
 8002a32:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8002a36:	783b      	ldrb	r3, [r7, #0]
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8002a40:	f001 f826 	bl	8003a90 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8002a44:	7a7b      	ldrb	r3, [r7, #9]
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d03d      	beq.n	8002ac6 <ip4_input+0x142>
 8002a4a:	2b11      	cmp	r3, #17
 8002a4c:	d02f      	beq.n	8002aae <ip4_input+0x12a>
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d13e      	bne.n	8002ad0 <ip4_input+0x14c>
      icmp_input(p, inp);
 8002a52:	4641      	mov	r1, r8
 8002a54:	4628      	mov	r0, r5
 8002a56:	f7ff fec7 	bl	80027e8 <icmp_input>
      break;
 8002a5a:	e02c      	b.n	8002ab6 <ip4_input+0x132>
 8002a5c:	4646      	mov	r6, r8
 8002a5e:	f04f 0a01 	mov.w	sl, #1
        netif = netif_list;
 8002a62:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8002b04 <ip4_input+0x180>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8002a66:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 8002a6a:	07db      	lsls	r3, r3, #31
 8002a6c:	d404      	bmi.n	8002a78 <ip4_input+0xf4>
      if (first) {
 8002a6e:	f1ba 0f00 	cmp.w	sl, #0
 8002a72:	d10d      	bne.n	8002a90 <ip4_input+0x10c>
        netif = netif->next;
 8002a74:	6836      	ldr	r6, [r6, #0]
 8002a76:	e010      	b.n	8002a9a <ip4_input+0x116>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8002a78:	6873      	ldr	r3, [r6, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f7      	beq.n	8002a6e <ip4_input+0xea>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8002a7e:	6960      	ldr	r0, [r4, #20]
 8002a80:	4283      	cmp	r3, r0
 8002a82:	d0ba      	beq.n	80029fa <ip4_input+0x76>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8002a84:	4631      	mov	r1, r6
 8002a86:	f000 f8c8 	bl	8002c1a <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	d0ef      	beq.n	8002a6e <ip4_input+0xea>
 8002a8e:	e7b4      	b.n	80029fa <ip4_input+0x76>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8002a90:	7d23      	ldrb	r3, [r4, #20]
 8002a92:	2b7f      	cmp	r3, #127	; 0x7f
 8002a94:	d0b0      	beq.n	80029f8 <ip4_input+0x74>
        netif = netif_list;
 8002a96:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 8002a9a:	4546      	cmp	r6, r8
 8002a9c:	f04f 0a00 	mov.w	sl, #0
        netif = netif->next;
 8002aa0:	bf08      	it	eq
 8002aa2:	6836      	ldreq	r6, [r6, #0]
    } while (netif != NULL);
 8002aa4:	2e00      	cmp	r6, #0
 8002aa6:	d1de      	bne.n	8002a66 <ip4_input+0xe2>
 8002aa8:	e7a6      	b.n	80029f8 <ip4_input+0x74>
 8002aaa:	4646      	mov	r6, r8
 8002aac:	e7a5      	b.n	80029fa <ip4_input+0x76>
      udp_input(p, inp);
 8002aae:	4641      	mov	r1, r8
 8002ab0:	4628      	mov	r0, r5
 8002ab2:	f004 f8bd 	bl	8006c30 <udp_input>
  ip_data.current_netif = NULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 8002aba:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 8002abc:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 8002abe:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8002ac0:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8002ac2:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 8002ac4:	e76c      	b.n	80029a0 <ip4_input+0x1c>
      tcp_input(p, inp);
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	4628      	mov	r0, r5
 8002aca:	f002 fe99 	bl	8005800 <tcp_input>
      break;
 8002ace:	e7f2      	b.n	8002ab6 <ip4_input+0x132>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8002ad0:	4631      	mov	r1, r6
 8002ad2:	6960      	ldr	r0, [r4, #20]
 8002ad4:	f000 f8a1 	bl	8002c1a <ip4_addr_isbroadcast_u32>
 8002ad8:	b968      	cbnz	r0, 8002af6 <ip4_input+0x172>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8002ada:	6963      	ldr	r3, [r4, #20]
 8002adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8002ae0:	2be0      	cmp	r3, #224	; 0xe0
 8002ae2:	d008      	beq.n	8002af6 <ip4_input+0x172>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8002ae4:	4649      	mov	r1, r9
 8002ae6:	4628      	mov	r0, r5
 8002ae8:	f000 ffd5 	bl	8003a96 <pbuf_header_force>
        p->payload = iphdr;
 8002aec:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8002aee:	2102      	movs	r1, #2
 8002af0:	4628      	mov	r0, r5
 8002af2:	f7ff ff11 	bl	8002918 <icmp_dest_unreach>
      pbuf_free(p);
 8002af6:	4628      	mov	r0, r5
 8002af8:	f000 ffd0 	bl	8003a9c <pbuf_free>
 8002afc:	e7db      	b.n	8002ab6 <ip4_input+0x132>
 8002afe:	bf00      	nop
 8002b00:	20000220 	.word	0x20000220
 8002b04:	20003738 	.word	0x20003738

08002b08 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8002b08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b0c:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8002b0e:	89c3      	ldrh	r3, [r0, #14]
{
 8002b10:	4605      	mov	r5, r0
 8002b12:	468a      	mov	sl, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8002b14:	2b01      	cmp	r3, #1
{
 8002b16:	4616      	mov	r6, r2
 8002b18:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8002b1c:	d006      	beq.n	8002b2c <ip4_output_if_src+0x24>
 8002b1e:	4b30      	ldr	r3, [pc, #192]	; (8002be0 <ip4_output_if_src+0xd8>)
 8002b20:	f240 3233 	movw	r2, #819	; 0x333
 8002b24:	492f      	ldr	r1, [pc, #188]	; (8002be4 <ip4_output_if_src+0xdc>)
 8002b26:	4830      	ldr	r0, [pc, #192]	; (8002be8 <ip4_output_if_src+0xe0>)
 8002b28:	f005 f85e 	bl	8007be8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8002b2c:	2e00      	cmp	r6, #0
 8002b2e:	d047      	beq.n	8002bc0 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8002b30:	2114      	movs	r1, #20
 8002b32:	4628      	mov	r0, r5
 8002b34:	f000 ffac 	bl	8003a90 <pbuf_header>
 8002b38:	2800      	cmp	r0, #0
 8002b3a:	d14e      	bne.n	8002bda <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8002b3c:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8002b3e:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8002b40:	2b13      	cmp	r3, #19
 8002b42:	d806      	bhi.n	8002b52 <ip4_output_if_src+0x4a>
 8002b44:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <ip4_output_if_src+0xd8>)
 8002b46:	f240 3261 	movw	r2, #865	; 0x361
 8002b4a:	4928      	ldr	r1, [pc, #160]	; (8002bec <ip4_output_if_src+0xe4>)
 8002b4c:	4826      	ldr	r0, [pc, #152]	; (8002be8 <ip4_output_if_src+0xe0>)
 8002b4e:	f005 f84b 	bl	8007be8 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 8002b52:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8002b56:	7227      	strb	r7, [r4, #8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8002b58:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
 8002b5a:	7263      	strb	r3, [r4, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 8002b5c:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8002b5e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8002bf4 <ip4_output_if_src+0xec>
    ip4_addr_copy(iphdr->dest, *dest);
 8002b62:	6123      	str	r3, [r4, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8002b64:	2345      	movs	r3, #69	; 0x45
 8002b66:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8002b68:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8002b6c:	7063      	strb	r3, [r4, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8002b6e:	8928      	ldrh	r0, [r5, #8]
 8002b70:	f7ff fa47 	bl	8002002 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8002b74:	71a7      	strb	r7, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8002b76:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8002b78:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8002b7a:	f8b9 0000 	ldrh.w	r0, [r9]
 8002b7e:	f7ff fa40 	bl	8002002 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8002b82:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8002b86:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 8002b88:	3301      	adds	r3, #1
 8002b8a:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 8002b8e:	f1ba 0f00 	cmp.w	sl, #0
 8002b92:	d112      	bne.n	8002bba <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8002b94:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <ip4_output_if_src+0xe8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8002b98:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8002b9a:	72a7      	strb	r7, [r4, #10]
 8002b9c:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8002b9e:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 8002ba2:	b19b      	cbz	r3, 8002bcc <ip4_output_if_src+0xc4>
 8002ba4:	892a      	ldrh	r2, [r5, #8]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d910      	bls.n	8002bcc <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 8002baa:	4632      	mov	r2, r6
 8002bac:	4641      	mov	r1, r8
 8002bae:	4628      	mov	r0, r5
 8002bb0:	f000 fb0c 	bl	80031cc <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8002bb4:	b002      	add	sp, #8
 8002bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 8002bba:	f8da 3000 	ldr.w	r3, [sl]
 8002bbe:	e7eb      	b.n	8002b98 <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8002bc0:	686b      	ldr	r3, [r5, #4]
 8002bc2:	ae02      	add	r6, sp, #8
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f846 3d04 	str.w	r3, [r6, #-4]!
 8002bca:	e7e8      	b.n	8002b9e <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 8002bcc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8002bd0:	4632      	mov	r2, r6
 8002bd2:	4629      	mov	r1, r5
 8002bd4:	4640      	mov	r0, r8
 8002bd6:	4798      	blx	r3
 8002bd8:	e7ec      	b.n	8002bb4 <ip4_output_if_src+0xac>
      return ERR_BUF;
 8002bda:	f06f 0001 	mvn.w	r0, #1
 8002bde:	e7e9      	b.n	8002bb4 <ip4_output_if_src+0xac>
 8002be0:	080090a5 	.word	0x080090a5
 8002be4:	080090d9 	.word	0x080090d9
 8002be8:	08008f43 	.word	0x08008f43
 8002bec:	080090e5 	.word	0x080090e5
 8002bf0:	08009114 	.word	0x08009114
 8002bf4:	20000186 	.word	0x20000186

08002bf8 <ip4_output_if>:
{
 8002bf8:	b4f0      	push	{r4, r5, r6, r7}
 8002bfa:	9c06      	ldr	r4, [sp, #24]
 8002bfc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8002c00:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8002c04:	b11a      	cbz	r2, 8002c0e <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8002c06:	b109      	cbz	r1, 8002c0c <ip4_output_if+0x14>
 8002c08:	680f      	ldr	r7, [r1, #0]
 8002c0a:	b907      	cbnz	r7, 8002c0e <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8002c0c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8002c0e:	9406      	str	r4, [sp, #24]
 8002c10:	9605      	str	r6, [sp, #20]
 8002c12:	9504      	str	r5, [sp, #16]
}
 8002c14:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8002c16:	f7ff bf77 	b.w	8002b08 <ip4_output_if_src>

08002c1a <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8002c1a:	1e43      	subs	r3, r0, #1
 8002c1c:	3303      	adds	r3, #3
 8002c1e:	d811      	bhi.n	8002c44 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8002c20:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8002c24:	f013 0302 	ands.w	r3, r3, #2
 8002c28:	d00e      	beq.n	8002c48 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8002c2a:	684a      	ldr	r2, [r1, #4]
 8002c2c:	4290      	cmp	r0, r2
 8002c2e:	d00b      	beq.n	8002c48 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8002c30:	688b      	ldr	r3, [r1, #8]
 8002c32:	4042      	eors	r2, r0
 8002c34:	421a      	tst	r2, r3
 8002c36:	d107      	bne.n	8002c48 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	4383      	bics	r3, r0
    return 1;
 8002c3c:	bf0c      	ite	eq
 8002c3e:	2001      	moveq	r0, #1
 8002c40:	2000      	movne	r0, #0
 8002c42:	4770      	bx	lr
 8002c44:	2001      	movs	r0, #1
 8002c46:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8002c48:	2000      	movs	r0, #0
  }
}
 8002c4a:	4770      	bx	lr

08002c4c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8002c4c:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <ip_reass_dequeue_datagram+0x34>)
{
 8002c50:	4604      	mov	r4, r0
 8002c52:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	4282      	cmp	r2, r0
 8002c58:	d107      	bne.n	8002c6a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8002c5a:	6802      	ldr	r2, [r0, #0]
 8002c5c:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8002c5e:	4621      	mov	r1, r4
 8002c60:	2004      	movs	r0, #4
}
 8002c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8002c66:	f000 bdcb 	b.w	8003800 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8002c6a:	b931      	cbnz	r1, 8002c7a <ip_reass_dequeue_datagram+0x2e>
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <ip_reass_dequeue_datagram+0x38>)
 8002c6e:	f240 1245 	movw	r2, #325	; 0x145
 8002c72:	4905      	ldr	r1, [pc, #20]	; (8002c88 <ip_reass_dequeue_datagram+0x3c>)
 8002c74:	4805      	ldr	r0, [pc, #20]	; (8002c8c <ip_reass_dequeue_datagram+0x40>)
 8002c76:	f004 ffb7 	bl	8007be8 <iprintf>
    prev->next = ipr->next;
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	602b      	str	r3, [r5, #0]
 8002c7e:	e7ee      	b.n	8002c5e <ip_reass_dequeue_datagram+0x12>
 8002c80:	2000018c 	.word	0x2000018c
 8002c84:	080091fd 	.word	0x080091fd
 8002c88:	08009236 	.word	0x08009236
 8002c8c:	08008f43 	.word	0x08008f43

08002c90 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8002c90:	4281      	cmp	r1, r0
{
 8002c92:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c96:	4605      	mov	r5, r0
 8002c98:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8002c9a:	d105      	bne.n	8002ca8 <ip_reass_free_complete_datagram+0x18>
 8002c9c:	4b2f      	ldr	r3, [pc, #188]	; (8002d5c <ip_reass_free_complete_datagram+0xcc>)
 8002c9e:	22ab      	movs	r2, #171	; 0xab
 8002ca0:	492f      	ldr	r1, [pc, #188]	; (8002d60 <ip_reass_free_complete_datagram+0xd0>)
 8002ca2:	4830      	ldr	r0, [pc, #192]	; (8002d64 <ip_reass_free_complete_datagram+0xd4>)
 8002ca4:	f004 ffa0 	bl	8007be8 <iprintf>
  if (prev != NULL) {
 8002ca8:	b147      	cbz	r7, 8002cbc <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	429d      	cmp	r5, r3
 8002cae:	d005      	beq.n	8002cbc <ip_reass_free_complete_datagram+0x2c>
 8002cb0:	4b2a      	ldr	r3, [pc, #168]	; (8002d5c <ip_reass_free_complete_datagram+0xcc>)
 8002cb2:	22ad      	movs	r2, #173	; 0xad
 8002cb4:	492c      	ldr	r1, [pc, #176]	; (8002d68 <ip_reass_free_complete_datagram+0xd8>)
 8002cb6:	482b      	ldr	r0, [pc, #172]	; (8002d64 <ip_reass_free_complete_datagram+0xd4>)
 8002cb8:	f004 ff96 	bl	8007be8 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8002cbc:	686e      	ldr	r6, [r5, #4]
 8002cbe:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8002cc0:	889a      	ldrh	r2, [r3, #4]
 8002cc2:	bb92      	cbnz	r2, 8002d2a <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8002cc4:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8002cc6:	f105 011c 	add.w	r1, r5, #28
    ipr->p = iprh->next_pbuf;
 8002cca:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8002ccc:	f105 0208 	add.w	r2, r5, #8
 8002cd0:	f852 0b04 	ldr.w	r0, [r2], #4
 8002cd4:	428a      	cmp	r2, r1
 8002cd6:	f843 0b04 	str.w	r0, [r3], #4
 8002cda:	d1f9      	bne.n	8002cd0 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8002cdc:	2101      	movs	r1, #1
 8002cde:	4630      	mov	r0, r6
 8002ce0:	f7ff fe1f 	bl	8002922 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8002ce4:	4630      	mov	r0, r6
 8002ce6:	f001 f88b 	bl	8003e00 <pbuf_clen>
 8002cea:	4604      	mov	r4, r0
    pbuf_free(p);
 8002cec:	4630      	mov	r0, r6
 8002cee:	f000 fed5 	bl	8003a9c <pbuf_free>
  p = ipr->p;
 8002cf2:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8002cf4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8002d5c <ip_reass_free_complete_datagram+0xcc>
 8002cf8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8002d74 <ip_reass_free_complete_datagram+0xe4>
 8002cfc:	f8df a064 	ldr.w	sl, [pc, #100]	; 8002d64 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8002d00:	b9ae      	cbnz	r6, 8002d2e <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8002d02:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8002d04:	4d19      	ldr	r5, [pc, #100]	; (8002d6c <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8002d06:	4639      	mov	r1, r7
 8002d08:	f7ff ffa0 	bl	8002c4c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8002d0c:	882b      	ldrh	r3, [r5, #0]
 8002d0e:	42a3      	cmp	r3, r4
 8002d10:	d205      	bcs.n	8002d1e <ip_reass_free_complete_datagram+0x8e>
 8002d12:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <ip_reass_free_complete_datagram+0xcc>)
 8002d14:	22d2      	movs	r2, #210	; 0xd2
 8002d16:	4916      	ldr	r1, [pc, #88]	; (8002d70 <ip_reass_free_complete_datagram+0xe0>)
 8002d18:	4812      	ldr	r0, [pc, #72]	; (8002d64 <ip_reass_free_complete_datagram+0xd4>)
 8002d1a:	f004 ff65 	bl	8007be8 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8002d1e:	882b      	ldrh	r3, [r5, #0]
}
 8002d20:	4620      	mov	r0, r4
  ip_reass_pbufcount -= pbufs_freed;
 8002d22:	1b1b      	subs	r3, r3, r4
 8002d24:	802b      	strh	r3, [r5, #0]
}
 8002d26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 8002d2a:	2400      	movs	r4, #0
 8002d2c:	e7e1      	b.n	8002cf2 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8002d2e:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8002d30:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8002d32:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8002d36:	f001 f863 	bl	8003e00 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8002d3a:	4404      	add	r4, r0
 8002d3c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8002d40:	db05      	blt.n	8002d4e <ip_reass_free_complete_datagram+0xbe>
 8002d42:	4643      	mov	r3, r8
 8002d44:	22cc      	movs	r2, #204	; 0xcc
 8002d46:	4649      	mov	r1, r9
 8002d48:	4650      	mov	r0, sl
 8002d4a:	f004 ff4d 	bl	8007be8 <iprintf>
    pbuf_free(pcur);
 8002d4e:	4630      	mov	r0, r6
    pbufs_freed += clen;
 8002d50:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 8002d52:	f000 fea3 	bl	8003a9c <pbuf_free>
    p = iprh->next_pbuf;
 8002d56:	465e      	mov	r6, fp
 8002d58:	e7d2      	b.n	8002d00 <ip_reass_free_complete_datagram+0x70>
 8002d5a:	bf00      	nop
 8002d5c:	080091fd 	.word	0x080091fd
 8002d60:	0800924f 	.word	0x0800924f
 8002d64:	08008f43 	.word	0x08008f43
 8002d68:	0800925b 	.word	0x0800925b
 8002d6c:	20000188 	.word	0x20000188
 8002d70:	0800928a 	.word	0x0800928a
 8002d74:	0800926d 	.word	0x0800926d

08002d78 <ip_reass_remove_oldest_datagram>:
{
 8002d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d7c:	4606      	mov	r6, r0
 8002d7e:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8002d80:	2500      	movs	r5, #0
    r = reassdatagrams;
 8002d82:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8002dec <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 8002d86:	2400      	movs	r4, #0
    r = reassdatagrams;
 8002d88:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8002d8c:	4621      	mov	r1, r4
    prev = NULL;
 8002d8e:	46a6      	mov	lr, r4
    oldest = NULL;
 8002d90:	4620      	mov	r0, r4
    while (r != NULL) {
 8002d92:	b953      	cbnz	r3, 8002daa <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8002d94:	b110      	cbz	r0, 8002d9c <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8002d96:	f7ff ff7b 	bl	8002c90 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8002d9a:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8002d9c:	42bd      	cmp	r5, r7
 8002d9e:	da01      	bge.n	8002da4 <ip_reass_remove_oldest_datagram+0x2c>
 8002da0:	2c01      	cmp	r4, #1
 8002da2:	dcf0      	bgt.n	8002d86 <ip_reass_remove_oldest_datagram+0xe>
}
 8002da4:	4628      	mov	r0, r5
 8002da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8002daa:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8002dae:	695a      	ldr	r2, [r3, #20]
 8002db0:	4562      	cmp	r2, ip
 8002db2:	d109      	bne.n	8002dc8 <ip_reass_remove_oldest_datagram+0x50>
 8002db4:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	4562      	cmp	r2, ip
 8002dbc:	d104      	bne.n	8002dc8 <ip_reass_remove_oldest_datagram+0x50>
 8002dbe:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8002dc2:	88b2      	ldrh	r2, [r6, #4]
 8002dc4:	4594      	cmp	ip, r2
 8002dc6:	d008      	beq.n	8002dda <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8002dc8:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8002dca:	b160      	cbz	r0, 8002de6 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8002dcc:	7fc2      	ldrb	r2, [r0, #31]
 8002dce:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 8002dd2:	4594      	cmp	ip, r2
 8002dd4:	bf9c      	itt	ls
 8002dd6:	4671      	movls	r1, lr
 8002dd8:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	2a00      	cmp	r2, #0
 8002dde:	bf18      	it	ne
 8002de0:	469e      	movne	lr, r3
 8002de2:	4613      	mov	r3, r2
 8002de4:	e7d5      	b.n	8002d92 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8002de6:	4671      	mov	r1, lr
 8002de8:	4618      	mov	r0, r3
 8002dea:	e7f6      	b.n	8002dda <ip_reass_remove_oldest_datagram+0x62>
 8002dec:	2000018c 	.word	0x2000018c

08002df0 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8002df0:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8002df2:	4604      	mov	r4, r0
 8002df4:	b930      	cbnz	r0, 8002e04 <ip_frag_free_pbuf_custom_ref+0x14>
 8002df6:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <ip_frag_free_pbuf_custom_ref+0x20>)
 8002df8:	f240 22ae 	movw	r2, #686	; 0x2ae
 8002dfc:	4905      	ldr	r1, [pc, #20]	; (8002e14 <ip_frag_free_pbuf_custom_ref+0x24>)
 8002dfe:	4806      	ldr	r0, [pc, #24]	; (8002e18 <ip_frag_free_pbuf_custom_ref+0x28>)
 8002e00:	f004 fef2 	bl	8007be8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8002e04:	4621      	mov	r1, r4
 8002e06:	2005      	movs	r0, #5
}
 8002e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8002e0c:	f000 bcf8 	b.w	8003800 <memp_free>
 8002e10:	080091fd 	.word	0x080091fd
 8002e14:	080098c7 	.word	0x080098c7
 8002e18:	08008f43 	.word	0x08008f43

08002e1c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8002e1c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8002e1e:	4604      	mov	r4, r0
 8002e20:	b930      	cbnz	r0, 8002e30 <ipfrag_free_pbuf_custom+0x14>
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <ipfrag_free_pbuf_custom+0x28>)
 8002e24:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8002e28:	4907      	ldr	r1, [pc, #28]	; (8002e48 <ipfrag_free_pbuf_custom+0x2c>)
 8002e2a:	4808      	ldr	r0, [pc, #32]	; (8002e4c <ipfrag_free_pbuf_custom+0x30>)
 8002e2c:	f004 fedc 	bl	8007be8 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8002e30:	6960      	ldr	r0, [r4, #20]
 8002e32:	b108      	cbz	r0, 8002e38 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8002e34:	f000 fe32 	bl	8003a9c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8002e38:	4620      	mov	r0, r4
}
 8002e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8002e3e:	f7ff bfd7 	b.w	8002df0 <ip_frag_free_pbuf_custom_ref>
 8002e42:	bf00      	nop
 8002e44:	080091fd 	.word	0x080091fd
 8002e48:	080092a5 	.word	0x080092a5
 8002e4c:	08008f43 	.word	0x08008f43

08002e50 <ip_reass_tmr>:
{
 8002e50:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8002e52:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <ip_reass_tmr+0x24>)
  struct ip_reassdata *r, *prev = NULL;
 8002e54:	2400      	movs	r4, #0
  r = reassdatagrams;
 8002e56:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8002e58:	b900      	cbnz	r0, 8002e5c <ip_reass_tmr+0xc>
}
 8002e5a:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8002e5c:	7fc3      	ldrb	r3, [r0, #31]
 8002e5e:	6805      	ldr	r5, [r0, #0]
 8002e60:	b123      	cbz	r3, 8002e6c <ip_reass_tmr+0x1c>
      r->timer--;
 8002e62:	3b01      	subs	r3, #1
 8002e64:	4604      	mov	r4, r0
 8002e66:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 8002e68:	4628      	mov	r0, r5
 8002e6a:	e7f5      	b.n	8002e58 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	f7ff ff0f 	bl	8002c90 <ip_reass_free_complete_datagram>
 8002e72:	e7f9      	b.n	8002e68 <ip_reass_tmr+0x18>
 8002e74:	2000018c 	.word	0x2000018c

08002e78 <ip4_reass>:
{
 8002e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 8002e7c:	6845      	ldr	r5, [r0, #4]
{
 8002e7e:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8002e80:	782b      	ldrb	r3, [r5, #0]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	2b05      	cmp	r3, #5
 8002e88:	f040 808c 	bne.w	8002fa4 <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8002e8c:	88e8      	ldrh	r0, [r5, #6]
 8002e8e:	f7ff f8b8 	bl	8002002 <lwip_htons>
 8002e92:	f3c0 000c 	ubfx	r0, r0, #0, #13
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8002e96:	4cb2      	ldr	r4, [pc, #712]	; (8003160 <ip4_reass+0x2e8>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8002e98:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8002e9c:	8868      	ldrh	r0, [r5, #2]
 8002e9e:	f7ff f8b0 	bl	8002002 <lwip_htons>
 8002ea2:	782b      	ldrb	r3, [r5, #0]
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 8002eac:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 8002eae:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8002eb0:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8002eb2:	f000 ffa5 	bl	8003e00 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8002eb6:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 8002eb8:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8002eba:	4403      	add	r3, r0
 8002ebc:	2b0a      	cmp	r3, #10
 8002ebe:	dc68      	bgt.n	8002f92 <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8002ec0:	4ea8      	ldr	r6, [pc, #672]	; (8003164 <ip4_reass+0x2ec>)
 8002ec2:	6834      	ldr	r4, [r6, #0]
 8002ec4:	2c00      	cmp	r4, #0
 8002ec6:	d172      	bne.n	8002fae <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8002ec8:	2004      	movs	r0, #4
 8002eca:	f000 fc7d 	bl	80037c8 <memp_malloc>
  if (ipr == NULL) {
 8002ece:	4604      	mov	r4, r0
 8002ed0:	b958      	cbnz	r0, 8002eea <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8002ed2:	4651      	mov	r1, sl
 8002ed4:	4628      	mov	r0, r5
 8002ed6:	f7ff ff4f 	bl	8002d78 <ip_reass_remove_oldest_datagram>
 8002eda:	4582      	cmp	sl, r0
 8002edc:	dc62      	bgt.n	8002fa4 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8002ede:	2004      	movs	r0, #4
 8002ee0:	f000 fc72 	bl	80037c8 <memp_malloc>
    if (ipr == NULL)
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	2800      	cmp	r0, #0
 8002ee8:	d05c      	beq.n	8002fa4 <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8002eea:	2220      	movs	r2, #32
 8002eec:	2100      	movs	r1, #0
 8002eee:	4620      	mov	r0, r4
 8002ef0:	f004 fe72 	bl	8007bd8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8002ef4:	2303      	movs	r3, #3
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8002ef6:	f104 0208 	add.w	r2, r4, #8
 8002efa:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 8002efe:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8002f00:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 8002f02:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 8002f04:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8002f06:	462b      	mov	r3, r5
 8002f08:	f853 0b04 	ldr.w	r0, [r3], #4
 8002f0c:	428b      	cmp	r3, r1
 8002f0e:	f842 0b04 	str.w	r0, [r2], #4
 8002f12:	d1f9      	bne.n	8002f08 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8002f14:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 8002f18:	f01b 0b20 	ands.w	fp, fp, #32
 8002f1c:	d108      	bne.n	8002f30 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 8002f1e:	9b01      	ldr	r3, [sp, #4]
 8002f20:	444b      	add	r3, r9
 8002f22:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8002f24:	4599      	cmp	r9, r3
 8002f26:	d83d      	bhi.n	8002fa4 <ip4_reass+0x12c>
 8002f28:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d839      	bhi.n	8002fa4 <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 8002f30:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8002f32:	8868      	ldrh	r0, [r5, #2]
 8002f34:	f7ff f865 	bl	8002002 <lwip_htons>
 8002f38:	f895 8000 	ldrb.w	r8, [r5]
 8002f3c:	f008 080f 	and.w	r8, r8, #15
 8002f40:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8002f44:	88e8      	ldrh	r0, [r5, #6]
 8002f46:	f7ff f85c 	bl	8002002 <lwip_htons>
 8002f4a:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8002f4e:	fa1f f888 	uxth.w	r8, r8
  for (q = ipr->p; q != NULL;) {
 8002f52:	f8d4 e004 	ldr.w	lr, [r4, #4]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8002f56:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 8002f58:	687e      	ldr	r6, [r7, #4]
  iprh->next_pbuf = NULL;
 8002f5a:	2500      	movs	r5, #0
  for (q = ipr->p; q != NULL;) {
 8002f5c:	4672      	mov	r2, lr
  iprh->end = offset + len;
 8002f5e:	eb08 0300 	add.w	r3, r8, r0
  int valid = 1;
 8002f62:	f04f 0801 	mov.w	r8, #1
  iprh->next_pbuf = NULL;
 8002f66:	7035      	strb	r5, [r6, #0]
  iprh->end = offset + len;
 8002f68:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 8002f6a:	7075      	strb	r5, [r6, #1]
 8002f6c:	70b5      	strb	r5, [r6, #2]
 8002f6e:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8002f70:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 8002f72:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 8002f74:	bb52      	cbnz	r2, 8002fcc <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 8002f76:	2d00      	cmp	r5, #0
 8002f78:	f040 8092 	bne.w	80030a0 <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8002f7c:	f1be 0f00 	cmp.w	lr, #0
 8002f80:	d07d      	beq.n	800307e <ip4_reass+0x206>
 8002f82:	4b79      	ldr	r3, [pc, #484]	; (8003168 <ip4_reass+0x2f0>)
 8002f84:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8002f88:	4978      	ldr	r1, [pc, #480]	; (800316c <ip4_reass+0x2f4>)
 8002f8a:	4879      	ldr	r0, [pc, #484]	; (8003170 <ip4_reass+0x2f8>)
 8002f8c:	f004 fe2c 	bl	8007be8 <iprintf>
 8002f90:	e075      	b.n	800307e <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8002f92:	4601      	mov	r1, r0
 8002f94:	4628      	mov	r0, r5
 8002f96:	f7ff feef 	bl	8002d78 <ip_reass_remove_oldest_datagram>
 8002f9a:	b118      	cbz	r0, 8002fa4 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8002f9c:	8823      	ldrh	r3, [r4, #0]
 8002f9e:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8002fa0:	2b0a      	cmp	r3, #10
 8002fa2:	dd8d      	ble.n	8002ec0 <ip4_reass+0x48>
  pbuf_free(p);
 8002fa4:	4638      	mov	r0, r7
 8002fa6:	f000 fd79 	bl	8003a9c <pbuf_free>
  return NULL;
 8002faa:	2500      	movs	r5, #0
 8002fac:	e0d4      	b.n	8003158 <ip4_reass+0x2e0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8002fae:	68eb      	ldr	r3, [r5, #12]
 8002fb0:	6962      	ldr	r2, [r4, #20]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d108      	bne.n	8002fc8 <ip4_reass+0x150>
 8002fb6:	692b      	ldr	r3, [r5, #16]
 8002fb8:	69a2      	ldr	r2, [r4, #24]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d104      	bne.n	8002fc8 <ip4_reass+0x150>
 8002fbe:	89a2      	ldrh	r2, [r4, #12]
 8002fc0:	88ab      	ldrh	r3, [r5, #4]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	f000 80dc 	beq.w	8003180 <ip4_reass+0x308>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8002fc8:	6824      	ldr	r4, [r4, #0]
 8002fca:	e77b      	b.n	8002ec4 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8002fcc:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8002fd0:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8002fd4:	4288      	cmp	r0, r1
 8002fd6:	d254      	bcs.n	8003082 <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 8002fd8:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 8002fda:	2d00      	cmp	r5, #0
 8002fdc:	d04d      	beq.n	800307a <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8002fde:	88ea      	ldrh	r2, [r5, #6]
 8002fe0:	4290      	cmp	r0, r2
 8002fe2:	f0c0 8091 	bcc.w	8003108 <ip4_reass+0x290>
 8002fe6:	428b      	cmp	r3, r1
 8002fe8:	f200 808e 	bhi.w	8003108 <ip4_reass+0x290>
        if (iprh_prev->end != iprh->start) {
 8002fec:	4290      	cmp	r0, r2
        iprh_prev->next_pbuf = new_p;
 8002fee:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 8002ff0:	f040 80e4 	bne.w	80031bc <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8002ff4:	f1bb 0f00 	cmp.w	fp, #0
 8002ff8:	d004      	beq.n	8003004 <ip4_reass+0x18c>
 8002ffa:	7fa3      	ldrb	r3, [r4, #30]
 8002ffc:	f013 0301 	ands.w	r3, r3, #1
 8003000:	f000 80da 	beq.w	80031b8 <ip4_reass+0x340>
    if (valid) {
 8003004:	f1b8 0f00 	cmp.w	r8, #0
 8003008:	d159      	bne.n	80030be <ip4_reass+0x246>
          q = iprh->next_pbuf;
 800300a:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800300e:	4e54      	ldr	r6, [pc, #336]	; (8003160 <ip4_reass+0x2e8>)
 8003010:	8833      	ldrh	r3, [r6, #0]
 8003012:	449a      	add	sl, r3
 8003014:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 8003018:	f1bb 0f00 	cmp.w	fp, #0
 800301c:	d107      	bne.n	800302e <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 800301e:	9b01      	ldr	r3, [sp, #4]
 8003020:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8003022:	7fa3      	ldrb	r3, [r4, #30]
 8003024:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 8003028:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800302c:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800302e:	f1b8 0f01 	cmp.w	r8, #1
 8003032:	d1ba      	bne.n	8002faa <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 8003034:	8ba3      	ldrh	r3, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8003036:	f104 011c 	add.w	r1, r4, #28
    ipr->datagram_len += IP_HLEN;
 800303a:	3314      	adds	r3, #20
 800303c:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800303e:	6863      	ldr	r3, [r4, #4]
 8003040:	685d      	ldr	r5, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8003042:	f104 0308 	add.w	r3, r4, #8
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8003046:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8003048:	462a      	mov	r2, r5
 800304a:	f853 0b04 	ldr.w	r0, [r3], #4
 800304e:	428b      	cmp	r3, r1
 8003050:	f842 0b04 	str.w	r0, [r2], #4
 8003054:	d1f9      	bne.n	800304a <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8003056:	8ba0      	ldrh	r0, [r4, #28]
 8003058:	f7fe ffd3 	bl	8002002 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800305c:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800305e:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8003060:	71ab      	strb	r3, [r5, #6]
 8003062:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8003064:	72ab      	strb	r3, [r5, #10]
 8003066:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 8003068:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800306a:	2f00      	cmp	r7, #0
 800306c:	d157      	bne.n	800311e <ip4_reass+0x2a6>
    if (ipr == reassdatagrams) {
 800306e:	4b3d      	ldr	r3, [pc, #244]	; (8003164 <ip4_reass+0x2ec>)
 8003070:	6819      	ldr	r1, [r3, #0]
 8003072:	428c      	cmp	r4, r1
 8003074:	d165      	bne.n	8003142 <ip4_reass+0x2ca>
      ipr_prev = NULL;
 8003076:	4639      	mov	r1, r7
 8003078:	e065      	b.n	8003146 <ip4_reass+0x2ce>
        if (iprh->end > iprh_tmp->start) {
 800307a:	428b      	cmp	r3, r1
 800307c:	d844      	bhi.n	8003108 <ip4_reass+0x290>
      ipr->p = new_p;
 800307e:	6067      	str	r7, [r4, #4]
 8003080:	e7b8      	b.n	8002ff4 <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 8003082:	d041      	beq.n	8003108 <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 8003084:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8003088:	4282      	cmp	r2, r0
 800308a:	d83d      	bhi.n	8003108 <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 800308c:	b125      	cbz	r5, 8003098 <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 800308e:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 8003090:	428a      	cmp	r2, r1
 8003092:	bf18      	it	ne
 8003094:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 8003098:	f8dc 2000 	ldr.w	r2, [ip]
 800309c:	4665      	mov	r5, ip
 800309e:	e769      	b.n	8002f74 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80030a0:	88eb      	ldrh	r3, [r5, #6]
 80030a2:	4283      	cmp	r3, r0
 80030a4:	d906      	bls.n	80030b4 <ip4_reass+0x23c>
 80030a6:	4b30      	ldr	r3, [pc, #192]	; (8003168 <ip4_reass+0x2f0>)
 80030a8:	f240 12ab 	movw	r2, #427	; 0x1ab
 80030ac:	4931      	ldr	r1, [pc, #196]	; (8003174 <ip4_reass+0x2fc>)
 80030ae:	4830      	ldr	r0, [pc, #192]	; (8003170 <ip4_reass+0x2f8>)
 80030b0:	f004 fd9a 	bl	8007be8 <iprintf>
      iprh_prev->next_pbuf = new_p;
 80030b4:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 80030b6:	88ea      	ldrh	r2, [r5, #6]
 80030b8:	88b3      	ldrh	r3, [r6, #4]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	e798      	b.n	8002ff0 <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80030be:	6863      	ldr	r3, [r4, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0a2      	beq.n	800300a <ip4_reass+0x192>
 80030c4:	6859      	ldr	r1, [r3, #4]
 80030c6:	888b      	ldrh	r3, [r1, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d19e      	bne.n	800300a <ip4_reass+0x192>
        q = iprh->next_pbuf;
 80030cc:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 80030ce:	b99b      	cbnz	r3, 80030f8 <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 80030d0:	42b1      	cmp	r1, r6
 80030d2:	d106      	bne.n	80030e2 <ip4_reass+0x26a>
 80030d4:	4b24      	ldr	r3, [pc, #144]	; (8003168 <ip4_reass+0x2f0>)
 80030d6:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80030da:	4927      	ldr	r1, [pc, #156]	; (8003178 <ip4_reass+0x300>)
 80030dc:	4824      	ldr	r0, [pc, #144]	; (8003170 <ip4_reass+0x2f8>)
 80030de:	f004 fd83 	bl	8007be8 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80030e2:	6833      	ldr	r3, [r6, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d092      	beq.n	800300e <ip4_reass+0x196>
 80030e8:	4b1f      	ldr	r3, [pc, #124]	; (8003168 <ip4_reass+0x2f0>)
 80030ea:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80030ee:	4923      	ldr	r1, [pc, #140]	; (800317c <ip4_reass+0x304>)
 80030f0:	481f      	ldr	r0, [pc, #124]	; (8003170 <ip4_reass+0x2f8>)
 80030f2:	f004 fd79 	bl	8007be8 <iprintf>
 80030f6:	e78a      	b.n	800300e <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 80030f8:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80030fa:	88f0      	ldrh	r0, [r6, #6]
 80030fc:	8893      	ldrh	r3, [r2, #4]
 80030fe:	4298      	cmp	r0, r3
 8003100:	d183      	bne.n	800300a <ip4_reass+0x192>
          q = iprh->next_pbuf;
 8003102:	6813      	ldr	r3, [r2, #0]
 8003104:	4616      	mov	r6, r2
 8003106:	e7e2      	b.n	80030ce <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8003108:	4638      	mov	r0, r7
 800310a:	f000 fe79 	bl	8003e00 <pbuf_clen>
 800310e:	4a14      	ldr	r2, [pc, #80]	; (8003160 <ip4_reass+0x2e8>)
 8003110:	8813      	ldrh	r3, [r2, #0]
 8003112:	1a18      	subs	r0, r3, r0
 8003114:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 8003116:	4638      	mov	r0, r7
 8003118:	f000 fcc0 	bl	8003a9c <pbuf_free>
 800311c:	e742      	b.n	8002fa4 <ip4_reass+0x12c>
      iprh = (struct ip_reass_helper*)r->payload;
 800311e:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 8003122:	f06f 0113 	mvn.w	r1, #19
 8003126:	4638      	mov	r0, r7
 8003128:	f000 fcb2 	bl	8003a90 <pbuf_header>
      pbuf_cat(p, r);
 800312c:	4639      	mov	r1, r7
 800312e:	4628      	mov	r0, r5
 8003130:	f000 fe82 	bl	8003e38 <pbuf_cat>
      r = iprh->next_pbuf;
 8003134:	f8d8 7000 	ldr.w	r7, [r8]
 8003138:	e797      	b.n	800306a <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 800313a:	680b      	ldr	r3, [r1, #0]
 800313c:	429c      	cmp	r4, r3
 800313e:	d002      	beq.n	8003146 <ip4_reass+0x2ce>
 8003140:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8003142:	2900      	cmp	r1, #0
 8003144:	d1f9      	bne.n	800313a <ip4_reass+0x2c2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8003146:	4620      	mov	r0, r4
 8003148:	f7ff fd80 	bl	8002c4c <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 800314c:	4628      	mov	r0, r5
 800314e:	f000 fe57 	bl	8003e00 <pbuf_clen>
 8003152:	8833      	ldrh	r3, [r6, #0]
 8003154:	1a18      	subs	r0, r3, r0
 8003156:	8030      	strh	r0, [r6, #0]
}
 8003158:	4628      	mov	r0, r5
 800315a:	b003      	add	sp, #12
 800315c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003160:	20000188 	.word	0x20000188
 8003164:	2000018c 	.word	0x2000018c
 8003168:	080091fd 	.word	0x080091fd
 800316c:	08009197 	.word	0x08009197
 8003170:	08008f43 	.word	0x08008f43
 8003174:	08009179 	.word	0x08009179
 8003178:	080091ce 	.word	0x080091ce
 800317c:	080091db 	.word	0x080091db
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8003180:	88e8      	ldrh	r0, [r5, #6]
 8003182:	f7fe ff3e 	bl	8002002 <lwip_htons>
 8003186:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800318a:	2800      	cmp	r0, #0
 800318c:	f47f aec2 	bne.w	8002f14 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8003190:	89e0      	ldrh	r0, [r4, #14]
 8003192:	f7fe ff36 	bl	8002002 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8003196:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800319a:	2800      	cmp	r0, #0
 800319c:	f43f aeba 	beq.w	8002f14 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80031a0:	462b      	mov	r3, r5
 80031a2:	f104 0208 	add.w	r2, r4, #8
 80031a6:	f105 0114 	add.w	r1, r5, #20
 80031aa:	f853 0b04 	ldr.w	r0, [r3], #4
 80031ae:	428b      	cmp	r3, r1
 80031b0:	f842 0b04 	str.w	r0, [r2], #4
 80031b4:	d1f9      	bne.n	80031aa <ip4_reass+0x332>
 80031b6:	e6ad      	b.n	8002f14 <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80031b8:	4698      	mov	r8, r3
 80031ba:	e728      	b.n	800300e <ip4_reass+0x196>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80031bc:	f1bb 0f00 	cmp.w	fp, #0
 80031c0:	f43f af23 	beq.w	800300a <ip4_reass+0x192>
 80031c4:	f04f 0800 	mov.w	r8, #0
 80031c8:	e717      	b.n	8002ffa <ip4_reass+0x182>
 80031ca:	bf00      	nop

080031cc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80031cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80031d0:	f8b1 8022 	ldrh.w	r8, [r1, #34]	; 0x22
 80031d4:	2308      	movs	r3, #8
{
 80031d6:	b08b      	sub	sp, #44	; 0x2c
 80031d8:	4607      	mov	r7, r0
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80031da:	f1a8 0814 	sub.w	r8, r8, #20
{
 80031de:	468b      	mov	fp, r1
 80031e0:	9208      	str	r2, [sp, #32]
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80031e2:	fb98 f8f3 	sdiv	r8, r8, r3
 80031e6:	fa1f f388 	uxth.w	r3, r8
 80031ea:	9306      	str	r3, [sp, #24]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80031ec:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80031ee:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 80031f0:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80031f2:	f006 060f 	and.w	r6, r6, #15
 80031f6:	00b6      	lsls	r6, r6, #2
 80031f8:	2e14      	cmp	r6, #20
 80031fa:	d00b      	beq.n	8003214 <ip4_frag+0x48>
 80031fc:	4b5a      	ldr	r3, [pc, #360]	; (8003368 <ip4_frag+0x19c>)
 80031fe:	f240 22e1 	movw	r2, #737	; 0x2e1
 8003202:	495a      	ldr	r1, [pc, #360]	; (800336c <ip4_frag+0x1a0>)

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8003204:	485a      	ldr	r0, [pc, #360]	; (8003370 <ip4_frag+0x1a4>)
 8003206:	f004 fcef 	bl	8007be8 <iprintf>
 800320a:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 800320e:	b00b      	add	sp, #44	; 0x2c
 8003210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8003214:	9b02      	ldr	r3, [sp, #8]
 8003216:	88d8      	ldrh	r0, [r3, #6]
 8003218:	f7fe fef3 	bl	8002002 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800321c:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8003220:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 8003224:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8003226:	d004      	beq.n	8003232 <ip4_frag+0x66>
 8003228:	4b4f      	ldr	r3, [pc, #316]	; (8003368 <ip4_frag+0x19c>)
 800322a:	f240 22e6 	movw	r2, #742	; 0x2e6
 800322e:	4951      	ldr	r1, [pc, #324]	; (8003374 <ip4_frag+0x1a8>)
 8003230:	e7e8      	b.n	8003204 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 8003232:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 8003234:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 8003238:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 800323a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 800323e:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 8003240:	9307      	str	r3, [sp, #28]
  while (left) {
 8003242:	b90d      	cbnz	r5, 8003248 <ip4_frag+0x7c>
  return ERR_OK;
 8003244:	4628      	mov	r0, r5
 8003246:	e7e2      	b.n	800320e <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 8003248:	9b07      	ldr	r3, [sp, #28]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800324a:	2200      	movs	r2, #0
 800324c:	2114      	movs	r1, #20
 800324e:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 8003250:	42ab      	cmp	r3, r5
 8003252:	bfa8      	it	ge
 8003254:	462b      	movge	r3, r5
 8003256:	b29b      	uxth	r3, r3
 8003258:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800325a:	f000 fc81 	bl	8003b60 <pbuf_alloc>
    if (rambuf == NULL) {
 800325e:	4680      	mov	r8, r0
 8003260:	b370      	cbz	r0, 80032c0 <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8003262:	897b      	ldrh	r3, [r7, #10]
 8003264:	2b13      	cmp	r3, #19
 8003266:	d806      	bhi.n	8003276 <ip4_frag+0xaa>
 8003268:	4b3f      	ldr	r3, [pc, #252]	; (8003368 <ip4_frag+0x19c>)
 800326a:	f240 3209 	movw	r2, #777	; 0x309
 800326e:	4942      	ldr	r1, [pc, #264]	; (8003378 <ip4_frag+0x1ac>)
 8003270:	483f      	ldr	r0, [pc, #252]	; (8003370 <ip4_frag+0x1a4>)
 8003272:	f004 fcb9 	bl	8007be8 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8003276:	9b02      	ldr	r3, [sp, #8]
 8003278:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800327c:	4619      	mov	r1, r3
 800327e:	3114      	adds	r1, #20
 8003280:	f853 0b04 	ldr.w	r0, [r3], #4
 8003284:	428b      	cmp	r3, r1
 8003286:	f842 0b04 	str.w	r0, [r2], #4
 800328a:	d1f9      	bne.n	8003280 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800328c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8003290:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8003294:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 8003296:	f1b9 0f00 	cmp.w	r9, #0
 800329a:	d037      	beq.n	800330c <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 800329c:	897c      	ldrh	r4, [r7, #10]
 800329e:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80032a0:	b2a4      	uxth	r4, r4
 80032a2:	454c      	cmp	r4, r9
 80032a4:	bf28      	it	cs
 80032a6:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 80032a8:	b914      	cbnz	r4, 80032b0 <ip4_frag+0xe4>
        p = p->next;
 80032aa:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 80032ac:	2600      	movs	r6, #0
 80032ae:	e7f2      	b.n	8003296 <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80032b0:	2005      	movs	r0, #5
 80032b2:	f000 fa89 	bl	80037c8 <memp_malloc>
      if (pcr == NULL) {
 80032b6:	4682      	mov	sl, r0
 80032b8:	b928      	cbnz	r0, 80032c6 <ip4_frag+0xfa>
        pbuf_free(rambuf);
 80032ba:	4640      	mov	r0, r8
 80032bc:	f000 fbee 	bl	8003a9c <pbuf_free>
  return ERR_MEM;
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	e7a3      	b.n	800320e <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80032c6:	9401      	str	r4, [sp, #4]
 80032c8:	2202      	movs	r2, #2
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4621      	mov	r1, r4
 80032ce:	4433      	add	r3, r6
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	4603      	mov	r3, r0
 80032d4:	2004      	movs	r0, #4
 80032d6:	f000 fba3 	bl	8003a20 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 80032da:	b918      	cbnz	r0, 80032e4 <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 80032dc:	4650      	mov	r0, sl
 80032de:	f7ff fd87 	bl	8002df0 <ip_frag_free_pbuf_custom_ref>
 80032e2:	e7ea      	b.n	80032ba <ip4_frag+0xee>
 80032e4:	9009      	str	r0, [sp, #36]	; 0x24
      left_to_copy -= newpbuflen;
 80032e6:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 80032ea:	4638      	mov	r0, r7
 80032ec:	f000 fd90 	bl	8003e10 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80032f0:	4b22      	ldr	r3, [pc, #136]	; (800337c <ip4_frag+0x1b0>)
      left_to_copy -= newpbuflen;
 80032f2:	fa1f f989 	uxth.w	r9, r9
      pcr->original = p;
 80032f6:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80032fa:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 80032fe:	4640      	mov	r0, r8
 8003300:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003302:	f000 fd99 	bl	8003e38 <pbuf_cat>
      if (left_to_copy) {
 8003306:	f1b9 0f00 	cmp.w	r9, #0
 800330a:	d1ce      	bne.n	80032aa <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 800330c:	9b04      	ldr	r3, [sp, #16]
    poff += newpbuflen;
 800330e:	4426      	add	r6, r4
    tmp = (IP_OFFMASK & (ofo));
 8003310:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8003314:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
    poff += newpbuflen;
 8003318:	b2b6      	uxth	r6, r6
    last = (left <= netif->mtu - IP_HLEN);
 800331a:	3b13      	subs	r3, #19
    if (!last) {
 800331c:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 800331e:	bfa8      	it	ge
 8003320:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8003324:	f7fe fe6d 	bl	8002002 <lwip_htons>
 8003328:	9b03      	ldr	r3, [sp, #12]
 800332a:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800332c:	9b05      	ldr	r3, [sp, #20]
 800332e:	f103 0014 	add.w	r0, r3, #20
 8003332:	b280      	uxth	r0, r0
 8003334:	f7fe fe65 	bl	8002002 <lwip_htons>
 8003338:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800333a:	9a03      	ldr	r2, [sp, #12]
    netif->output(netif, rambuf, dest);
 800333c:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800333e:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8003340:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 8003342:	4658      	mov	r0, fp
    IPH_CHKSUM_SET(iphdr, 0);
 8003344:	7293      	strb	r3, [r2, #10]
 8003346:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 8003348:	f8db 3014 	ldr.w	r3, [fp, #20]
 800334c:	9a08      	ldr	r2, [sp, #32]
 800334e:	4798      	blx	r3
    pbuf_free(rambuf);
 8003350:	4640      	mov	r0, r8
 8003352:	f000 fba3 	bl	8003a9c <pbuf_free>
    left -= fragsize;
 8003356:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 8003358:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 800335a:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 800335c:	9b04      	ldr	r3, [sp, #16]
 800335e:	4413      	add	r3, r2
    left -= fragsize;
 8003360:	b2ad      	uxth	r5, r5
    ofo += nfb;
 8003362:	b29b      	uxth	r3, r3
 8003364:	9304      	str	r3, [sp, #16]
 8003366:	e76c      	b.n	8003242 <ip4_frag+0x76>
 8003368:	080091fd 	.word	0x080091fd
 800336c:	08009118 	.word	0x08009118
 8003370:	08008f43 	.word	0x08008f43
 8003374:	0800913f 	.word	0x0800913f
 8003378:	08009159 	.word	0x08009159
 800337c:	08002e1d 	.word	0x08002e1d

08003380 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <mem_init+0x30>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 8003382:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003384:	4a0b      	ldr	r2, [pc, #44]	; (80033b4 <mem_init+0x34>)
 8003386:	f023 0303 	bic.w	r3, r3, #3
 800338a:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
 800338c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->prev = 0;
 8003390:	8059      	strh	r1, [r3, #2]
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8003392:	1898      	adds	r0, r3, r2
  mem->used = 0;
 8003394:	7119      	strb	r1, [r3, #4]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8003396:	4908      	ldr	r1, [pc, #32]	; (80033b8 <mem_init+0x38>)
  mem->next = MEM_SIZE_ALIGNED;
 8003398:	801a      	strh	r2, [r3, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800339a:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 800339c:	2101      	movs	r1, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 800339e:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 80033a2:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80033a6:	4a05      	ldr	r2, [pc, #20]	; (80033bc <mem_init+0x3c>)
  ram_end->used = 1;
 80033a8:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644
  lfree = (struct mem *)(void *)ram;
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4770      	bx	lr
 80033b0:	2000023b 	.word	0x2000023b
 80033b4:	20000194 	.word	0x20000194
 80033b8:	20000198 	.word	0x20000198
 80033bc:	20000190 	.word	0x20000190

080033c0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80033c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80033c4:	4604      	mov	r4, r0
 80033c6:	2800      	cmp	r0, #0
 80033c8:	f000 8089 	beq.w	80034de <mem_free+0x11e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80033cc:	0783      	lsls	r3, r0, #30
 80033ce:	d006      	beq.n	80033de <mem_free+0x1e>
 80033d0:	4b44      	ldr	r3, [pc, #272]	; (80034e4 <mem_free+0x124>)
 80033d2:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80033d6:	4944      	ldr	r1, [pc, #272]	; (80034e8 <mem_free+0x128>)
 80033d8:	4844      	ldr	r0, [pc, #272]	; (80034ec <mem_free+0x12c>)
 80033da:	f004 fc05 	bl	8007be8 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80033de:	4f44      	ldr	r7, [pc, #272]	; (80034f0 <mem_free+0x130>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	429c      	cmp	r4, r3
 80033e4:	d303      	bcc.n	80033ee <mem_free+0x2e>
 80033e6:	4b43      	ldr	r3, [pc, #268]	; (80034f4 <mem_free+0x134>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	429c      	cmp	r4, r3
 80033ec:	d306      	bcc.n	80033fc <mem_free+0x3c>
 80033ee:	4b3d      	ldr	r3, [pc, #244]	; (80034e4 <mem_free+0x124>)
 80033f0:	f240 12af 	movw	r2, #431	; 0x1af
 80033f4:	4940      	ldr	r1, [pc, #256]	; (80034f8 <mem_free+0x138>)
 80033f6:	483d      	ldr	r0, [pc, #244]	; (80034ec <mem_free+0x12c>)
 80033f8:	f004 fbf6 	bl	8007be8 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	429c      	cmp	r4, r3
 8003400:	d36d      	bcc.n	80034de <mem_free+0x11e>
 8003402:	4b3c      	ldr	r3, [pc, #240]	; (80034f4 <mem_free+0x134>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	4698      	mov	r8, r3
 8003408:	4294      	cmp	r4, r2
 800340a:	d268      	bcs.n	80034de <mem_free+0x11e>
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800340c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003410:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8003414:	b933      	cbnz	r3, 8003424 <mem_free+0x64>
 8003416:	4b33      	ldr	r3, [pc, #204]	; (80034e4 <mem_free+0x124>)
 8003418:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800341c:	4937      	ldr	r1, [pc, #220]	; (80034fc <mem_free+0x13c>)
 800341e:	4833      	ldr	r0, [pc, #204]	; (80034ec <mem_free+0x12c>)
 8003420:	f004 fbe2 	bl	8007be8 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8003424:	2300      	movs	r3, #0

  if (mem < lfree) {
 8003426:	4e36      	ldr	r6, [pc, #216]	; (8003500 <mem_free+0x140>)
  mem->used = 0;
 8003428:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 800342c:	6833      	ldr	r3, [r6, #0]
 800342e:	429d      	cmp	r5, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003430:	683b      	ldr	r3, [r7, #0]
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003432:	bf38      	it	cc
 8003434:	6035      	strcc	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003436:	429d      	cmp	r5, r3
 8003438:	d206      	bcs.n	8003448 <mem_free+0x88>
 800343a:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <mem_free+0x124>)
 800343c:	f240 125d 	movw	r2, #349	; 0x15d
 8003440:	4930      	ldr	r1, [pc, #192]	; (8003504 <mem_free+0x144>)
 8003442:	482a      	ldr	r0, [pc, #168]	; (80034ec <mem_free+0x12c>)
 8003444:	f004 fbd0 	bl	8007be8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003448:	f8d8 3000 	ldr.w	r3, [r8]
 800344c:	429d      	cmp	r5, r3
 800344e:	d306      	bcc.n	800345e <mem_free+0x9e>
 8003450:	4b24      	ldr	r3, [pc, #144]	; (80034e4 <mem_free+0x124>)
 8003452:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8003456:	492c      	ldr	r1, [pc, #176]	; (8003508 <mem_free+0x148>)
 8003458:	4824      	ldr	r0, [pc, #144]	; (80034ec <mem_free+0x12c>)
 800345a:	f004 fbc5 	bl	8007be8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800345e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8003462:	b133      	cbz	r3, 8003472 <mem_free+0xb2>
 8003464:	4b1f      	ldr	r3, [pc, #124]	; (80034e4 <mem_free+0x124>)
 8003466:	f240 125f 	movw	r2, #351	; 0x15f
 800346a:	4928      	ldr	r1, [pc, #160]	; (800350c <mem_free+0x14c>)
 800346c:	481f      	ldr	r0, [pc, #124]	; (80034ec <mem_free+0x12c>)
 800346e:	f004 fbbb 	bl	8007be8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003472:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8003476:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800347a:	d906      	bls.n	800348a <mem_free+0xca>
 800347c:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <mem_free+0x124>)
 800347e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8003482:	4923      	ldr	r1, [pc, #140]	; (8003510 <mem_free+0x150>)
 8003484:	4819      	ldr	r0, [pc, #100]	; (80034ec <mem_free+0x12c>)
 8003486:	f004 fbaf 	bl	8007be8 <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8003490:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003492:	4295      	cmp	r5, r2
 8003494:	d011      	beq.n	80034ba <mem_free+0xfa>
 8003496:	7910      	ldrb	r0, [r2, #4]
 8003498:	b978      	cbnz	r0, 80034ba <mem_free+0xfa>
 800349a:	f8d8 0000 	ldr.w	r0, [r8]
 800349e:	4282      	cmp	r2, r0
 80034a0:	d00b      	beq.n	80034ba <mem_free+0xfa>
    if (lfree == nmem) {
 80034a2:	6830      	ldr	r0, [r6, #0]
 80034a4:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 80034a6:	5a5a      	ldrh	r2, [r3, r1]
 80034a8:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80034ac:	5a5a      	ldrh	r2, [r3, r1]
 80034ae:	eba5 0103 	sub.w	r1, r5, r3
      lfree = mem;
 80034b2:	bf08      	it	eq
 80034b4:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80034b6:	441a      	add	r2, r3
 80034b8:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80034ba:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 80034be:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 80034c0:	428d      	cmp	r5, r1
 80034c2:	d00c      	beq.n	80034de <mem_free+0x11e>
 80034c4:	7908      	ldrb	r0, [r1, #4]
 80034c6:	b950      	cbnz	r0, 80034de <mem_free+0x11e>
    if (lfree == mem) {
 80034c8:	6830      	ldr	r0, [r6, #0]
 80034ca:	4285      	cmp	r5, r0
      lfree = pmem;
 80034cc:	bf08      	it	eq
 80034ce:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 80034d0:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80034d4:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80034d6:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80034da:	440b      	add	r3, r1
 80034dc:	805a      	strh	r2, [r3, #2]
 80034de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034e2:	bf00      	nop
 80034e4:	080092b1 	.word	0x080092b1
 80034e8:	080092e0 	.word	0x080092e0
 80034ec:	08008f43 	.word	0x08008f43
 80034f0:	20000194 	.word	0x20000194
 80034f4:	20000198 	.word	0x20000198
 80034f8:	08009301 	.word	0x08009301
 80034fc:	08009318 	.word	0x08009318
 8003500:	20000190 	.word	0x20000190
 8003504:	0800932c 	.word	0x0800932c
 8003508:	08009343 	.word	0x08009343
 800350c:	0800935d 	.word	0x0800935d
 8003510:	08009378 	.word	0x08009378

08003514 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8003514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8003516:	3103      	adds	r1, #3
 8003518:	f64f 75fc 	movw	r5, #65532	; 0xfffc
{
 800351c:	4604      	mov	r4, r0
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800351e:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8003520:	2d0b      	cmp	r5, #11
 8003522:	d904      	bls.n	800352e <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8003524:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8003528:	d902      	bls.n	8003530 <mem_trim+0x1c>
    return NULL;
 800352a:	2400      	movs	r4, #0
 800352c:	e059      	b.n	80035e2 <mem_trim+0xce>
    newsize = MIN_SIZE_ALIGNED;
 800352e:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003530:	4e2d      	ldr	r6, [pc, #180]	; (80035e8 <mem_trim+0xd4>)
 8003532:	6832      	ldr	r2, [r6, #0]
 8003534:	42a2      	cmp	r2, r4
 8003536:	d803      	bhi.n	8003540 <mem_trim+0x2c>
 8003538:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <mem_trim+0xd8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	429c      	cmp	r4, r3
 800353e:	d306      	bcc.n	800354e <mem_trim+0x3a>
 8003540:	4b2b      	ldr	r3, [pc, #172]	; (80035f0 <mem_trim+0xdc>)
 8003542:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003546:	492b      	ldr	r1, [pc, #172]	; (80035f4 <mem_trim+0xe0>)
 8003548:	482b      	ldr	r0, [pc, #172]	; (80035f8 <mem_trim+0xe4>)
 800354a:	f004 fb4d 	bl	8007be8 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800354e:	6833      	ldr	r3, [r6, #0]
 8003550:	429c      	cmp	r4, r3
 8003552:	d346      	bcc.n	80035e2 <mem_trim+0xce>
 8003554:	4a25      	ldr	r2, [pc, #148]	; (80035ec <mem_trim+0xd8>)
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	4294      	cmp	r4, r2
 800355a:	d242      	bcs.n	80035e2 <mem_trim+0xce>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800355c:	f1a4 0208 	sub.w	r2, r4, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8003560:	f834 0c08 	ldrh.w	r0, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8003564:	1ad2      	subs	r2, r2, r3
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8003566:	f1a0 0108 	sub.w	r1, r0, #8
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800356a:	b292      	uxth	r2, r2
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800356c:	1a89      	subs	r1, r1, r2
 800356e:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003570:	42a9      	cmp	r1, r5
 8003572:	d219      	bcs.n	80035a8 <mem_trim+0x94>
 8003574:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <mem_trim+0xdc>)
 8003576:	f240 2206 	movw	r2, #518	; 0x206
 800357a:	4920      	ldr	r1, [pc, #128]	; (80035fc <mem_trim+0xe8>)
 800357c:	481e      	ldr	r0, [pc, #120]	; (80035f8 <mem_trim+0xe4>)
 800357e:	f004 fb33 	bl	8007be8 <iprintf>
 8003582:	e7d2      	b.n	800352a <mem_trim+0x16>
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003584:	f105 0614 	add.w	r6, r5, #20
 8003588:	428e      	cmp	r6, r1
 800358a:	d82a      	bhi.n	80035e2 <mem_trim+0xce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800358c:	f102 0108 	add.w	r1, r2, #8
    mem2 = (struct mem *)(void *)&ram[ptr2];
    if (mem2 < lfree) {
 8003590:	4e1b      	ldr	r6, [pc, #108]	; (8003600 <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8003592:	440d      	add	r5, r1
    if (mem2 < lfree) {
 8003594:	6837      	ldr	r7, [r6, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8003596:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8003598:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 800359a:	42b9      	cmp	r1, r7
      lfree = mem2;
 800359c:	bf38      	it	cc
 800359e:	6031      	strcc	r1, [r6, #0]
    }
    mem2->used = 0;
 80035a0:	2600      	movs	r6, #0
 80035a2:	710e      	strb	r6, [r1, #4]
    mem2->next = mem->next;
 80035a4:	5358      	strh	r0, [r3, r5]
 80035a6:	e013      	b.n	80035d0 <mem_trim+0xbc>
  if (newsize == size) {
 80035a8:	d01b      	beq.n	80035e2 <mem_trim+0xce>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 80035aa:	181e      	adds	r6, r3, r0
  if (mem2->used == 0) {
 80035ac:	7937      	ldrb	r7, [r6, #4]
 80035ae:	2f00      	cmp	r7, #0
 80035b0:	d1e8      	bne.n	8003584 <mem_trim+0x70>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80035b2:	f102 0108 	add.w	r1, r2, #8
    next = mem2->next;
 80035b6:	5a1f      	ldrh	r7, [r3, r0]
    if (lfree == mem2) {
 80035b8:	4811      	ldr	r0, [pc, #68]	; (8003600 <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80035ba:	440d      	add	r5, r1
    if (lfree == mem2) {
 80035bc:	6801      	ldr	r1, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80035be:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 80035c0:	428e      	cmp	r6, r1
 80035c2:	eb03 0105 	add.w	r1, r3, r5
      lfree = (struct mem *)(void *)&ram[ptr2];
 80035c6:	bf08      	it	eq
 80035c8:	6001      	streq	r1, [r0, #0]
    mem2->used = 0;
 80035ca:	2000      	movs	r0, #0
 80035cc:	7108      	strb	r0, [r1, #4]
    mem2->next = next;
 80035ce:	535f      	strh	r7, [r3, r5]
    mem2->prev = ptr;
 80035d0:	804a      	strh	r2, [r1, #2]
    mem->next = ptr2;
 80035d2:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80035d6:	5b5a      	ldrh	r2, [r3, r5]
 80035d8:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 80035dc:	d001      	beq.n	80035e2 <mem_trim+0xce>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80035de:	4413      	add	r3, r2
 80035e0:	805d      	strh	r5, [r3, #2]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 80035e2:	4620      	mov	r0, r4
 80035e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000194 	.word	0x20000194
 80035ec:	20000198 	.word	0x20000198
 80035f0:	080092b1 	.word	0x080092b1
 80035f4:	0800943d 	.word	0x0800943d
 80035f8:	08008f43 	.word	0x08008f43
 80035fc:	08009454 	.word	0x08009454
 8003600:	20000190 	.word	0x20000190

08003604 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8003604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8003608:	b148      	cbz	r0, 800361e <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800360a:	3003      	adds	r0, #3
 800360c:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 8003610:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 8003612:	2d0b      	cmp	r5, #11
 8003614:	d905      	bls.n	8003622 <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 8003616:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 800361a:	d903      	bls.n	8003624 <mem_malloc+0x20>
    return NULL;
 800361c:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 800361e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 8003622:	250c      	movs	r5, #12
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8003624:	4837      	ldr	r0, [pc, #220]	; (8003704 <mem_malloc+0x100>)
 8003626:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
 800362a:	4e37      	ldr	r6, [pc, #220]	; (8003708 <mem_malloc+0x104>)
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800362c:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8003630:	6807      	ldr	r7, [r0, #0]
 8003632:	6831      	ldr	r1, [r6, #0]
 8003634:	1a7b      	subs	r3, r7, r1
 8003636:	b29b      	uxth	r3, r3
 8003638:	4543      	cmp	r3, r8
 800363a:	d2ef      	bcs.n	800361c <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 800363c:	18cc      	adds	r4, r1, r3
 800363e:	f831 e003 	ldrh.w	lr, [r1, r3]
      if ((!mem->used) &&
 8003642:	f894 c004 	ldrb.w	ip, [r4, #4]
 8003646:	f1bc 0f00 	cmp.w	ip, #0
 800364a:	d158      	bne.n	80036fe <mem_malloc+0xfa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800364c:	eba9 0203 	sub.w	r2, r9, r3
 8003650:	4472      	add	r2, lr
      if ((!mem->used) &&
 8003652:	4295      	cmp	r5, r2
 8003654:	d853      	bhi.n	80036fe <mem_malloc+0xfa>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003656:	f105 0814 	add.w	r8, r5, #20
 800365a:	4542      	cmp	r2, r8
 800365c:	d349      	bcc.n	80036f2 <mem_malloc+0xee>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800365e:	f105 0208 	add.w	r2, r5, #8
 8003662:	441a      	add	r2, r3
 8003664:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8003666:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 800366a:	f888 c004 	strb.w	ip, [r8, #4]
          mem2->next = mem->next;
 800366e:	f821 e002 	strh.w	lr, [r1, r2]
          mem2->prev = ptr;
 8003672:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 8003676:	2301      	movs	r3, #1
          mem->next = ptr2;
 8003678:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 800367a:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800367c:	5a8b      	ldrh	r3, [r1, r2]
 800367e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003682:	d001      	beq.n	8003688 <mem_malloc+0x84>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8003684:	4419      	add	r1, r3
 8003686:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 8003688:	42a7      	cmp	r7, r4
 800368a:	4f20      	ldr	r7, [pc, #128]	; (800370c <mem_malloc+0x108>)
 800368c:	d111      	bne.n	80036b2 <mem_malloc+0xae>
          while (cur->used && cur != ram_end) {
 800368e:	6839      	ldr	r1, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 8003690:	4623      	mov	r3, r4
 8003692:	6836      	ldr	r6, [r6, #0]
          while (cur->used && cur != ram_end) {
 8003694:	791a      	ldrb	r2, [r3, #4]
 8003696:	b10a      	cbz	r2, 800369c <mem_malloc+0x98>
 8003698:	428b      	cmp	r3, r1
 800369a:	d12d      	bne.n	80036f8 <mem_malloc+0xf4>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800369c:	428b      	cmp	r3, r1
          lfree = cur;
 800369e:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80036a0:	d007      	beq.n	80036b2 <mem_malloc+0xae>
 80036a2:	b132      	cbz	r2, 80036b2 <mem_malloc+0xae>
 80036a4:	4b1a      	ldr	r3, [pc, #104]	; (8003710 <mem_malloc+0x10c>)
 80036a6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80036aa:	491a      	ldr	r1, [pc, #104]	; (8003714 <mem_malloc+0x110>)
 80036ac:	481a      	ldr	r0, [pc, #104]	; (8003718 <mem_malloc+0x114>)
 80036ae:	f004 fa9b 	bl	8007be8 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80036b2:	3508      	adds	r5, #8
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	4425      	add	r5, r4
 80036b8:	42ab      	cmp	r3, r5
 80036ba:	d206      	bcs.n	80036ca <mem_malloc+0xc6>
 80036bc:	4b14      	ldr	r3, [pc, #80]	; (8003710 <mem_malloc+0x10c>)
 80036be:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80036c2:	4916      	ldr	r1, [pc, #88]	; (800371c <mem_malloc+0x118>)
 80036c4:	4814      	ldr	r0, [pc, #80]	; (8003718 <mem_malloc+0x114>)
 80036c6:	f004 fa8f 	bl	8007be8 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80036ca:	07a3      	lsls	r3, r4, #30
 80036cc:	d00d      	beq.n	80036ea <mem_malloc+0xe6>
 80036ce:	4b10      	ldr	r3, [pc, #64]	; (8003710 <mem_malloc+0x10c>)
 80036d0:	f240 22d6 	movw	r2, #726	; 0x2d6
 80036d4:	4912      	ldr	r1, [pc, #72]	; (8003720 <mem_malloc+0x11c>)
 80036d6:	4810      	ldr	r0, [pc, #64]	; (8003718 <mem_malloc+0x114>)
 80036d8:	f004 fa86 	bl	8007be8 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80036dc:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <mem_malloc+0x10c>)
 80036de:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 80036e2:	4910      	ldr	r1, [pc, #64]	; (8003724 <mem_malloc+0x120>)
 80036e4:	480c      	ldr	r0, [pc, #48]	; (8003718 <mem_malloc+0x114>)
 80036e6:	f004 fa7f 	bl	8007be8 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80036ea:	f104 0008 	add.w	r0, r4, #8
 80036ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 80036f2:	2301      	movs	r3, #1
 80036f4:	7123      	strb	r3, [r4, #4]
 80036f6:	e7c7      	b.n	8003688 <mem_malloc+0x84>
            cur = (struct mem *)(void *)&ram[cur->next];
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	4433      	add	r3, r6
 80036fc:	e7ca      	b.n	8003694 <mem_malloc+0x90>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80036fe:	4673      	mov	r3, lr
 8003700:	e79a      	b.n	8003638 <mem_malloc+0x34>
 8003702:	bf00      	nop
 8003704:	20000190 	.word	0x20000190
 8003708:	20000194 	.word	0x20000194
 800370c:	20000198 	.word	0x20000198
 8003710:	080092b1 	.word	0x080092b1
 8003714:	080093a2 	.word	0x080093a2
 8003718:	08008f43 	.word	0x08008f43
 800371c:	080093bb 	.word	0x080093bb
 8003720:	080093eb 	.word	0x080093eb
 8003724:	0800941a 	.word	0x0800941a

08003728 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8003728:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800372a:	6804      	ldr	r4, [r0, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800372c:	b154      	cbz	r4, 8003744 <do_memp_malloc_pool.isra.0+0x1c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	6003      	str	r3, [r0, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003732:	07a3      	lsls	r3, r4, #30
 8003734:	d006      	beq.n	8003744 <do_memp_malloc_pool.isra.0+0x1c>
 8003736:	4b04      	ldr	r3, [pc, #16]	; (8003748 <do_memp_malloc_pool.isra.0+0x20>)
 8003738:	f240 1249 	movw	r2, #329	; 0x149
 800373c:	4903      	ldr	r1, [pc, #12]	; (800374c <do_memp_malloc_pool.isra.0+0x24>)
 800373e:	4804      	ldr	r0, [pc, #16]	; (8003750 <do_memp_malloc_pool.isra.0+0x28>)
 8003740:	f004 fa52 	bl	8007be8 <iprintf>
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
}
 8003744:	4620      	mov	r0, r4
 8003746:	bd10      	pop	{r4, pc}
 8003748:	08009494 	.word	0x08009494
 800374c:	080094c4 	.word	0x080094c4
 8003750:	08008f43 	.word	0x08008f43

08003754 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8003754:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8003756:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8003758:	4605      	mov	r5, r0
 800375a:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 800375c:	d006      	beq.n	800376c <do_memp_free_pool.isra.1+0x18>
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <do_memp_free_pool.isra.1+0x24>)
 8003760:	f240 129d 	movw	r2, #413	; 0x19d
 8003764:	4905      	ldr	r1, [pc, #20]	; (800377c <do_memp_free_pool.isra.1+0x28>)
 8003766:	4806      	ldr	r0, [pc, #24]	; (8003780 <do_memp_free_pool.isra.1+0x2c>)
 8003768:	f004 fa3e 	bl	8007be8 <iprintf>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800376c:	682b      	ldr	r3, [r5, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8003772:	601c      	str	r4, [r3, #0]
 8003774:	bd38      	pop	{r3, r4, r5, pc}
 8003776:	bf00      	nop
 8003778:	08009494 	.word	0x08009494
 800377c:	08009474 	.word	0x08009474
 8003780:	08008f43 	.word	0x08008f43

08003784 <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8003784:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8003786:	2200      	movs	r2, #0
 8003788:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800378a:	3303      	adds	r3, #3
{
 800378c:	b530      	push	{r4, r5, lr}
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800378e:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8003792:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8003794:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8003796:	42a2      	cmp	r2, r4
 8003798:	db00      	blt.n	800379c <memp_init_pool+0x18>
}
 800379a:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 800379c:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800379e:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 80037a0:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80037a2:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 80037a4:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80037a6:	442b      	add	r3, r5
 80037a8:	e7f5      	b.n	8003796 <memp_init_pool+0x12>
	...

080037ac <memp_init>:
{
 80037ac:	b538      	push	{r3, r4, r5, lr}
 80037ae:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 80037b0:	4d04      	ldr	r5, [pc, #16]	; (80037c4 <memp_init+0x18>)
 80037b2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80037b6:	3401      	adds	r4, #1
 80037b8:	f7ff ffe4 	bl	8003784 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80037bc:	2c09      	cmp	r4, #9
 80037be:	d1f8      	bne.n	80037b2 <memp_init+0x6>
}
 80037c0:	bd38      	pop	{r3, r4, r5, pc}
 80037c2:	bf00      	nop
 80037c4:	0800958c 	.word	0x0800958c

080037c8 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80037c8:	2808      	cmp	r0, #8
{
 80037ca:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80037cc:	d807      	bhi.n	80037de <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 80037ce:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <memp_malloc+0x28>)
 80037d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80037d4:	6898      	ldr	r0, [r3, #8]
}
 80037d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 80037da:	f7ff bfa5 	b.w	8003728 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80037de:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <memp_malloc+0x2c>)
 80037e0:	f240 1287 	movw	r2, #391	; 0x187
 80037e4:	4904      	ldr	r1, [pc, #16]	; (80037f8 <memp_malloc+0x30>)
 80037e6:	4805      	ldr	r0, [pc, #20]	; (80037fc <memp_malloc+0x34>)
 80037e8:	f004 f9fe 	bl	8007be8 <iprintf>
}
 80037ec:	2000      	movs	r0, #0
 80037ee:	bd08      	pop	{r3, pc}
 80037f0:	0800958c 	.word	0x0800958c
 80037f4:	08009494 	.word	0x08009494
 80037f8:	0800956f 	.word	0x0800956f
 80037fc:	08008f43 	.word	0x08008f43

08003800 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8003800:	2808      	cmp	r0, #8
 8003802:	d906      	bls.n	8003812 <memp_free+0x12>
 8003804:	4b07      	ldr	r3, [pc, #28]	; (8003824 <memp_free+0x24>)
 8003806:	f240 12db 	movw	r2, #475	; 0x1db
 800380a:	4907      	ldr	r1, [pc, #28]	; (8003828 <memp_free+0x28>)
 800380c:	4807      	ldr	r0, [pc, #28]	; (800382c <memp_free+0x2c>)
 800380e:	f004 b9eb 	b.w	8007be8 <iprintf>

  if (mem == NULL) {
 8003812:	b129      	cbz	r1, 8003820 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8003814:	4b06      	ldr	r3, [pc, #24]	; (8003830 <memp_free+0x30>)
 8003816:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800381a:	3008      	adds	r0, #8
 800381c:	f7ff bf9a 	b.w	8003754 <do_memp_free_pool.isra.1>
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	08009494 	.word	0x08009494
 8003828:	08009554 	.word	0x08009554
 800382c:	08008f43 	.word	0x08008f43
 8003830:	0800958c 	.word	0x0800958c

08003834 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8003834:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
netif_issue_reports(struct netif* netif, u8_t report_type)
 8003838:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800383a:	071b      	lsls	r3, r3, #28
 800383c:	d502      	bpl.n	8003844 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 800383e:	3104      	adds	r1, #4
 8003840:	f7fe bdb0 	b.w	80023a4 <etharp_request>
 8003844:	4770      	bx	lr

08003846 <netif_init>:
{
 8003846:	4770      	bx	lr

08003848 <netif_set_ipaddr>:
{
 8003848:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800384a:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800384c:	460c      	mov	r4, r1
 800384e:	b1b9      	cbz	r1, 8003880 <netif_set_ipaddr+0x38>
 8003850:	680b      	ldr	r3, [r1, #0]
 8003852:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8003854:	9a01      	ldr	r2, [sp, #4]
 8003856:	686b      	ldr	r3, [r5, #4]
 8003858:	429a      	cmp	r2, r3
 800385a:	d00f      	beq.n	800387c <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800385c:	1d2e      	adds	r6, r5, #4
 800385e:	a901      	add	r1, sp, #4
 8003860:	4630      	mov	r0, r6
 8003862:	f001 fa1d 	bl	8004ca0 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8003866:	a901      	add	r1, sp, #4
 8003868:	4630      	mov	r0, r6
 800386a:	f003 fbad 	bl	8006fc8 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800386e:	b104      	cbz	r4, 8003872 <netif_set_ipaddr+0x2a>
 8003870:	6824      	ldr	r4, [r4, #0]
 8003872:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003874:	b114      	cbz	r4, 800387c <netif_set_ipaddr+0x34>
 8003876:	4628      	mov	r0, r5
 8003878:	f7ff ffdc 	bl	8003834 <netif_issue_reports.part.0>
}
 800387c:	b002      	add	sp, #8
 800387e:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8003880:	4b01      	ldr	r3, [pc, #4]	; (8003888 <netif_set_ipaddr+0x40>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	e7e5      	b.n	8003852 <netif_set_ipaddr+0xa>
 8003886:	bf00      	nop
 8003888:	08009114 	.word	0x08009114

0800388c <netif_set_addr>:
{
 800388c:	b570      	push	{r4, r5, r6, lr}
 800388e:	4606      	mov	r6, r0
 8003890:	4615      	mov	r5, r2
 8003892:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8003894:	b109      	cbz	r1, 800389a <netif_set_addr+0xe>
 8003896:	680b      	ldr	r3, [r1, #0]
 8003898:	b94b      	cbnz	r3, 80038ae <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 800389a:	4630      	mov	r0, r6
 800389c:	f7ff ffd4 	bl	8003848 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80038a0:	b105      	cbz	r5, 80038a4 <netif_set_addr+0x18>
 80038a2:	682d      	ldr	r5, [r5, #0]
 80038a4:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80038a6:	b104      	cbz	r4, 80038aa <netif_set_addr+0x1e>
 80038a8:	6824      	ldr	r4, [r4, #0]
 80038aa:	60f4      	str	r4, [r6, #12]
 80038ac:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80038ae:	b102      	cbz	r2, 80038b2 <netif_set_addr+0x26>
 80038b0:	6815      	ldr	r5, [r2, #0]
 80038b2:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80038b4:	b104      	cbz	r4, 80038b8 <netif_set_addr+0x2c>
 80038b6:	6824      	ldr	r4, [r4, #0]
 80038b8:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 80038ba:	4630      	mov	r0, r6
}
 80038bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 80038c0:	f7ff bfc2 	b.w	8003848 <netif_set_ipaddr>

080038c4 <netif_add>:
{
 80038c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80038ca:	4604      	mov	r4, r0
 80038cc:	460f      	mov	r7, r1
 80038ce:	4690      	mov	r8, r2
 80038d0:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 80038d2:	b92e      	cbnz	r6, 80038e0 <netif_add+0x1c>
 80038d4:	4b15      	ldr	r3, [pc, #84]	; (800392c <netif_add+0x68>)
 80038d6:	22fb      	movs	r2, #251	; 0xfb
 80038d8:	4915      	ldr	r1, [pc, #84]	; (8003930 <netif_add+0x6c>)
 80038da:	4816      	ldr	r0, [pc, #88]	; (8003934 <netif_add+0x70>)
 80038dc:	f004 f984 	bl	8007be8 <iprintf>
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80038e0:	2303      	movs	r3, #3
  netif->num = netif_num++;
 80038e2:	4a15      	ldr	r2, [pc, #84]	; (8003938 <netif_add+0x74>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80038e4:	2500      	movs	r5, #0
  netif_set_addr(netif, ipaddr, netmask, gw);
 80038e6:	4620      	mov	r0, r4
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80038e8:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 80038ec:	9b08      	ldr	r3, [sp, #32]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80038ee:	6065      	str	r5, [r4, #4]
  netif->state = state;
 80038f0:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 80038f2:	7813      	ldrb	r3, [r2, #0]
  ip_addr_set_zero_ip4(&netif->netmask);
 80038f4:	60a5      	str	r5, [r4, #8]
  netif->num = netif_num++;
 80038f6:	1c59      	adds	r1, r3, #1
 80038f8:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->input = input;
 80038fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 80038fe:	7011      	strb	r1, [r2, #0]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8003900:	4642      	mov	r2, r8
  netif->input = input;
 8003902:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8003904:	4639      	mov	r1, r7
  ip_addr_set_zero_ip4(&netif->gw);
 8003906:	60e5      	str	r5, [r4, #12]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8003908:	464b      	mov	r3, r9
  netif->flags = 0;
 800390a:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
  netif_set_addr(netif, ipaddr, netmask, gw);
 800390e:	f7ff ffbd 	bl	800388c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8003912:	4620      	mov	r0, r4
 8003914:	47b0      	blx	r6
 8003916:	b930      	cbnz	r0, 8003926 <netif_add+0x62>
  netif->next = netif_list;
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <netif_add+0x78>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 800391e:	601c      	str	r4, [r3, #0]
}
 8003920:	4620      	mov	r0, r4
 8003922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8003926:	462c      	mov	r4, r5
 8003928:	e7fa      	b.n	8003920 <netif_add+0x5c>
 800392a:	bf00      	nop
 800392c:	080095b0 	.word	0x080095b0
 8003930:	080095e1 	.word	0x080095e1
 8003934:	08008f43 	.word	0x08008f43
 8003938:	200001c0 	.word	0x200001c0
 800393c:	20003738 	.word	0x20003738

08003940 <netif_set_default>:
  netif_default = netif;
 8003940:	4b01      	ldr	r3, [pc, #4]	; (8003948 <netif_set_default+0x8>)
 8003942:	6018      	str	r0, [r3, #0]
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	2000373c 	.word	0x2000373c

0800394c <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800394c:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8003950:	07d1      	lsls	r1, r2, #31
 8003952:	d409      	bmi.n	8003968 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8003954:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8003958:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 800395a:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800395e:	d503      	bpl.n	8003968 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003960:	6843      	ldr	r3, [r0, #4]
 8003962:	b10b      	cbz	r3, 8003968 <netif_set_up+0x1c>
 8003964:	f7ff bf66 	b.w	8003834 <netif_issue_reports.part.0>
 8003968:	4770      	bx	lr

0800396a <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 800396a:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800396e:	07d9      	lsls	r1, r3, #31
 8003970:	d507      	bpl.n	8003982 <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 8003972:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8003976:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 8003978:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800397c:	d501      	bpl.n	8003982 <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 800397e:	f7fe bc5f 	b.w	8002240 <etharp_cleanup_netif>
 8003982:	4770      	bx	lr

08003984 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8003984:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8003986:	4604      	mov	r4, r0
 8003988:	2800      	cmp	r0, #0
 800398a:	d12f      	bne.n	80039ec <pbuf_header_impl+0x68>
 800398c:	4b1f      	ldr	r3, [pc, #124]	; (8003a0c <pbuf_header_impl+0x88>)
 800398e:	f240 223f 	movw	r2, #575	; 0x23f
 8003992:	491f      	ldr	r1, [pc, #124]	; (8003a10 <pbuf_header_impl+0x8c>)
 8003994:	481f      	ldr	r0, [pc, #124]	; (8003a14 <pbuf_header_impl+0x90>)
 8003996:	f004 f927 	bl	8007be8 <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800399a:	2000      	movs	r0, #0
 800399c:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)header_size_increment;
 800399e:	b288      	uxth	r0, r1
  type = p->type;
 80039a0:	7b25      	ldrb	r5, [r4, #12]
  payload = p->payload;
 80039a2:	6863      	ldr	r3, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80039a4:	b10d      	cbz	r5, 80039aa <pbuf_header_impl+0x26>
 80039a6:	2d03      	cmp	r5, #3
 80039a8:	d106      	bne.n	80039b8 <pbuf_header_impl+0x34>
    p->payload = (u8_t *)p->payload - header_size_increment;
 80039aa:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80039ac:	f104 0210 	add.w	r2, r4, #16
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d20a      	bcs.n	80039ca <pbuf_header_impl+0x46>
      return 1;
 80039b4:	2001      	movs	r0, #1
 80039b6:	bd38      	pop	{r3, r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80039b8:	3d01      	subs	r5, #1
 80039ba:	2d01      	cmp	r5, #1
 80039bc:	d811      	bhi.n	80039e2 <pbuf_header_impl+0x5e>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80039be:	2900      	cmp	r1, #0
 80039c0:	da0c      	bge.n	80039dc <pbuf_header_impl+0x58>
 80039c2:	8962      	ldrh	r2, [r4, #10]
 80039c4:	4282      	cmp	r2, r0
 80039c6:	d3f5      	bcc.n	80039b4 <pbuf_header_impl+0x30>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80039c8:	1a5b      	subs	r3, r3, r1
  p->len += header_size_increment;
 80039ca:	b289      	uxth	r1, r1
  p->tot_len += header_size_increment;
 80039cc:	8920      	ldrh	r0, [r4, #8]
    p->payload = (u8_t *)p->payload - header_size_increment;
 80039ce:	6063      	str	r3, [r4, #4]
  p->len += header_size_increment;
 80039d0:	8963      	ldrh	r3, [r4, #10]
 80039d2:	440b      	add	r3, r1
  p->tot_len += header_size_increment;
 80039d4:	4401      	add	r1, r0
  p->len += header_size_increment;
 80039d6:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 80039d8:	8121      	strh	r1, [r4, #8]
 80039da:	e7de      	b.n	800399a <pbuf_header_impl+0x16>
    } else if ((header_size_increment > 0) && force) {
 80039dc:	2a00      	cmp	r2, #0
 80039de:	d1f3      	bne.n	80039c8 <pbuf_header_impl+0x44>
 80039e0:	e7e8      	b.n	80039b4 <pbuf_header_impl+0x30>
    LWIP_ASSERT("bad pbuf type", 0);
 80039e2:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <pbuf_header_impl+0x88>)
 80039e4:	f240 2277 	movw	r2, #631	; 0x277
 80039e8:	490b      	ldr	r1, [pc, #44]	; (8003a18 <pbuf_header_impl+0x94>)
 80039ea:	e00b      	b.n	8003a04 <pbuf_header_impl+0x80>
  if ((header_size_increment == 0) || (p == NULL)) {
 80039ec:	2900      	cmp	r1, #0
 80039ee:	d0d4      	beq.n	800399a <pbuf_header_impl+0x16>
  if (header_size_increment < 0) {
 80039f0:	dad5      	bge.n	800399e <pbuf_header_impl+0x1a>
    increment_magnitude = (u16_t)-header_size_increment;
 80039f2:	4248      	negs	r0, r1
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80039f4:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 80039f6:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80039f8:	4283      	cmp	r3, r0
 80039fa:	d2d1      	bcs.n	80039a0 <pbuf_header_impl+0x1c>
 80039fc:	4b03      	ldr	r3, [pc, #12]	; (8003a0c <pbuf_header_impl+0x88>)
 80039fe:	f240 2247 	movw	r2, #583	; 0x247
 8003a02:	4906      	ldr	r1, [pc, #24]	; (8003a1c <pbuf_header_impl+0x98>)
    LWIP_ASSERT("bad pbuf type", 0);
 8003a04:	4803      	ldr	r0, [pc, #12]	; (8003a14 <pbuf_header_impl+0x90>)
 8003a06:	f004 f8ef 	bl	8007be8 <iprintf>
 8003a0a:	e7d3      	b.n	80039b4 <pbuf_header_impl+0x30>
 8003a0c:	0800985d 	.word	0x0800985d
 8003a10:	080098c7 	.word	0x080098c7
 8003a14:	08008f43 	.word	0x08008f43
 8003a18:	080098ab 	.word	0x080098ab
 8003a1c:	0800988d 	.word	0x0800988d

08003a20 <pbuf_alloced_custom>:
{
 8003a20:	b570      	push	{r4, r5, r6, lr}
 8003a22:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8003a24:	2804      	cmp	r0, #4
 8003a26:	d81e      	bhi.n	8003a66 <pbuf_alloced_custom+0x46>
 8003a28:	e8df f000 	tbb	[pc, r0]
 8003a2c:	1b280326 	.word	0x1b280326
 8003a30:	1b          	.byte	0x1b
 8003a31:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8003a32:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8003a34:	3403      	adds	r4, #3
 8003a36:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8003a3a:	f024 0403 	bic.w	r4, r4, #3
 8003a3e:	190e      	adds	r6, r1, r4
 8003a40:	4286      	cmp	r6, r0
 8003a42:	f04f 0000 	mov.w	r0, #0
 8003a46:	d80b      	bhi.n	8003a60 <pbuf_alloced_custom+0x40>
  p->pbuf.next = NULL;
 8003a48:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 8003a4a:	b1cd      	cbz	r5, 8003a80 <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8003a4c:	442c      	add	r4, r5
 8003a4e:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8003a50:	2002      	movs	r0, #2
  p->pbuf.type = type;
 8003a52:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8003a54:	2201      	movs	r2, #1
  p->pbuf.len = p->pbuf.tot_len = length;
 8003a56:	8119      	strh	r1, [r3, #8]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8003a58:	7358      	strb	r0, [r3, #13]
  return &p->pbuf;
 8003a5a:	4618      	mov	r0, r3
  p->pbuf.len = p->pbuf.tot_len = length;
 8003a5c:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 8003a5e:	81da      	strh	r2, [r3, #14]
}
 8003a60:	bd70      	pop	{r4, r5, r6, pc}
    offset = 0;
 8003a62:	2400      	movs	r4, #0
    break;
 8003a64:	e7e6      	b.n	8003a34 <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8003a66:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <pbuf_alloced_custom+0x64>)
 8003a68:	f240 12c5 	movw	r2, #453	; 0x1c5
 8003a6c:	4906      	ldr	r1, [pc, #24]	; (8003a88 <pbuf_alloced_custom+0x68>)
 8003a6e:	4807      	ldr	r0, [pc, #28]	; (8003a8c <pbuf_alloced_custom+0x6c>)
 8003a70:	f004 f8ba 	bl	8007be8 <iprintf>
    return NULL;
 8003a74:	2000      	movs	r0, #0
 8003a76:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8003a78:	2436      	movs	r4, #54	; 0x36
 8003a7a:	e7db      	b.n	8003a34 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8003a7c:	240e      	movs	r4, #14
 8003a7e:	e7d9      	b.n	8003a34 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 8003a80:	605d      	str	r5, [r3, #4]
 8003a82:	e7e5      	b.n	8003a50 <pbuf_alloced_custom+0x30>
 8003a84:	0800985d 	.word	0x0800985d
 8003a88:	080096a0 	.word	0x080096a0
 8003a8c:	08008f43 	.word	0x08008f43

08003a90 <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 8003a90:	2200      	movs	r2, #0
 8003a92:	f7ff bf77 	b.w	8003984 <pbuf_header_impl>

08003a96 <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 8003a96:	2201      	movs	r2, #1
 8003a98:	f7ff bf74 	b.w	8003984 <pbuf_header_impl>

08003a9c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8003a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	b950      	cbnz	r0, 8003aba <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8003aa4:	4626      	mov	r6, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 8003aa6:	4b28      	ldr	r3, [pc, #160]	; (8003b48 <pbuf_free+0xac>)
 8003aa8:	f240 22d2 	movw	r2, #722	; 0x2d2
 8003aac:	4927      	ldr	r1, [pc, #156]	; (8003b4c <pbuf_free+0xb0>)
 8003aae:	4828      	ldr	r0, [pc, #160]	; (8003b50 <pbuf_free+0xb4>)
 8003ab0:	f004 f89a 	bl	8007be8 <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8003aba:	7b03      	ldrb	r3, [r0, #12]
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d906      	bls.n	8003ace <pbuf_free+0x32>
 8003ac0:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <pbuf_free+0xac>)
 8003ac2:	f240 22de 	movw	r2, #734	; 0x2de
 8003ac6:	4923      	ldr	r1, [pc, #140]	; (8003b54 <pbuf_free+0xb8>)
 8003ac8:	4821      	ldr	r0, [pc, #132]	; (8003b50 <pbuf_free+0xb4>)
 8003aca:	f004 f88d 	bl	8007be8 <iprintf>
{
 8003ace:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8003ad0:	4f1d      	ldr	r7, [pc, #116]	; (8003b48 <pbuf_free+0xac>)
 8003ad2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8003b5c <pbuf_free+0xc0>
 8003ad6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8003b50 <pbuf_free+0xb4>
 8003ada:	b2ee      	uxtb	r6, r5
  while (p != NULL) {
 8003adc:	2c00      	cmp	r4, #0
 8003ade:	d0e9      	beq.n	8003ab4 <pbuf_free+0x18>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8003ae0:	89e3      	ldrh	r3, [r4, #14]
 8003ae2:	b933      	cbnz	r3, 8003af2 <pbuf_free+0x56>
 8003ae4:	463b      	mov	r3, r7
 8003ae6:	f240 22eb 	movw	r2, #747	; 0x2eb
 8003aea:	4649      	mov	r1, r9
 8003aec:	4640      	mov	r0, r8
 8003aee:	f004 f87b 	bl	8007be8 <iprintf>
    ref = --(p->ref);
 8003af2:	89e3      	ldrh	r3, [r4, #14]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	81e3      	strh	r3, [r4, #14]
    if (ref == 0) {
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1da      	bne.n	8003ab4 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8003afe:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8003b00:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8003b02:	079b      	lsls	r3, r3, #30
 8003b04:	d50e      	bpl.n	8003b24 <pbuf_free+0x88>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8003b06:	6923      	ldr	r3, [r4, #16]
 8003b08:	b933      	cbnz	r3, 8003b18 <pbuf_free+0x7c>
 8003b0a:	463b      	mov	r3, r7
 8003b0c:	f240 22f9 	movw	r2, #761	; 0x2f9
 8003b10:	4911      	ldr	r1, [pc, #68]	; (8003b58 <pbuf_free+0xbc>)
 8003b12:	4640      	mov	r0, r8
 8003b14:	f004 f868 	bl	8007be8 <iprintf>
        pc->custom_free_function(p);
 8003b18:	6923      	ldr	r3, [r4, #16]
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	4798      	blx	r3
 8003b1e:	3501      	adds	r5, #1
      p = q;
 8003b20:	4634      	mov	r4, r6
 8003b22:	e7da      	b.n	8003ada <pbuf_free+0x3e>
      type = p->type;
 8003b24:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d104      	bne.n	8003b34 <pbuf_free+0x98>
          memp_free(MEMP_PBUF_POOL, p);
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	2008      	movs	r0, #8
          memp_free(MEMP_PBUF, p);
 8003b2e:	f7ff fe67 	bl	8003800 <memp_free>
 8003b32:	e7f4      	b.n	8003b1e <pbuf_free+0x82>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8003b34:	3b01      	subs	r3, #1
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d802      	bhi.n	8003b40 <pbuf_free+0xa4>
          memp_free(MEMP_PBUF, p);
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	2007      	movs	r0, #7
 8003b3e:	e7f6      	b.n	8003b2e <pbuf_free+0x92>
          mem_free(p);
 8003b40:	4620      	mov	r0, r4
 8003b42:	f7ff fc3d 	bl	80033c0 <mem_free>
 8003b46:	e7ea      	b.n	8003b1e <pbuf_free+0x82>
 8003b48:	0800985d 	.word	0x0800985d
 8003b4c:	080098c7 	.word	0x080098c7
 8003b50:	08008f43 	.word	0x08008f43
 8003b54:	08009811 	.word	0x08009811
 8003b58:	0800983c 	.word	0x0800983c
 8003b5c:	08009826 	.word	0x08009826

08003b60 <pbuf_alloc>:
{
 8003b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b64:	460e      	mov	r6, r1
 8003b66:	4617      	mov	r7, r2
  switch (layer) {
 8003b68:	2804      	cmp	r0, #4
 8003b6a:	d80e      	bhi.n	8003b8a <pbuf_alloc+0x2a>
 8003b6c:	e8df f000 	tbb	[pc, r0]
 8003b70:	0b170315 	.word	0x0b170315
 8003b74:	0b          	.byte	0x0b
 8003b75:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8003b76:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 8003b78:	2f03      	cmp	r7, #3
 8003b7a:	f200 80bb 	bhi.w	8003cf4 <pbuf_alloc+0x194>
 8003b7e:	e8df f007 	tbb	[pc, r7]
 8003b82:	ac91      	.short	0xac91
 8003b84:	10ac      	.short	0x10ac
    offset = 0;
 8003b86:	2500      	movs	r5, #0
    break;
 8003b88:	e7f6      	b.n	8003b78 <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8003b8a:	4b5d      	ldr	r3, [pc, #372]	; (8003d00 <pbuf_alloc+0x1a0>)
 8003b8c:	f44f 728b 	mov.w	r2, #278	; 0x116
 8003b90:	495c      	ldr	r1, [pc, #368]	; (8003d04 <pbuf_alloc+0x1a4>)
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8003b92:	485d      	ldr	r0, [pc, #372]	; (8003d08 <pbuf_alloc+0x1a8>)
 8003b94:	f004 f828 	bl	8007be8 <iprintf>
 8003b98:	e04a      	b.n	8003c30 <pbuf_alloc+0xd0>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8003b9a:	2536      	movs	r5, #54	; 0x36
 8003b9c:	e7ec      	b.n	8003b78 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8003b9e:	250e      	movs	r5, #14
 8003ba0:	e7ea      	b.n	8003b78 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8003ba2:	2008      	movs	r0, #8
 8003ba4:	f7ff fe10 	bl	80037c8 <memp_malloc>
    if (p == NULL) {
 8003ba8:	4604      	mov	r4, r0
 8003baa:	b928      	cbnz	r0, 8003bb8 <pbuf_alloc+0x58>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8003bac:	2201      	movs	r2, #1
 8003bae:	4b57      	ldr	r3, [pc, #348]	; (8003d0c <pbuf_alloc+0x1ac>)
 8003bb0:	701a      	strb	r2, [r3, #0]
}
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 8003bb8:	2303      	movs	r3, #3
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8003bba:	f500 7718 	add.w	r7, r0, #608	; 0x260
    p->tot_len = length;
 8003bbe:	8106      	strh	r6, [r0, #8]
    p->type = type;
 8003bc0:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8003bc6:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8003bc8:	3503      	adds	r5, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8003bca:	3313      	adds	r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8003bcc:	f025 0503 	bic.w	r5, r5, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8003bd0:	f023 0303 	bic.w	r3, r3, #3
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8003bd4:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8003bd8:	6043      	str	r3, [r0, #4]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8003bda:	42b5      	cmp	r5, r6
 8003bdc:	bf28      	it	cs
 8003bde:	4635      	movcs	r5, r6
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8003be0:	442b      	add	r3, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8003be2:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8003be4:	429f      	cmp	r7, r3
 8003be6:	d206      	bcs.n	8003bf6 <pbuf_alloc+0x96>
 8003be8:	4b45      	ldr	r3, [pc, #276]	; (8003d00 <pbuf_alloc+0x1a0>)
 8003bea:	f44f 7298 	mov.w	r2, #304	; 0x130
 8003bee:	4948      	ldr	r1, [pc, #288]	; (8003d10 <pbuf_alloc+0x1b0>)
 8003bf0:	4845      	ldr	r0, [pc, #276]	; (8003d08 <pbuf_alloc+0x1a8>)
 8003bf2:	f003 fff9 	bl	8007be8 <iprintf>
    p->ref = 1;
 8003bf6:	2301      	movs	r3, #1
    while (rem_len > 0) {
 8003bf8:	46a3      	mov	fp, r4
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8003bfa:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8003d00 <pbuf_alloc+0x1a0>
    p->ref = 1;
 8003bfe:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 8003c00:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8003c02:	f8df a118 	ldr.w	sl, [pc, #280]	; 8003d1c <pbuf_alloc+0x1bc>
    rem_len = length - p->len;
 8003c06:	1af6      	subs	r6, r6, r3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8003c08:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8003d08 <pbuf_alloc+0x1a8>
    while (rem_len > 0) {
 8003c0c:	2e00      	cmp	r6, #0
 8003c0e:	dc04      	bgt.n	8003c1a <pbuf_alloc+0xba>
  p->ref = 1;
 8003c10:	2301      	movs	r3, #1
 8003c12:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	7363      	strb	r3, [r4, #13]
  return p;
 8003c18:	e7cb      	b.n	8003bb2 <pbuf_alloc+0x52>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8003c1a:	2008      	movs	r0, #8
 8003c1c:	f7ff fdd4 	bl	80037c8 <memp_malloc>
      if (q == NULL) {
 8003c20:	4605      	mov	r5, r0
 8003c22:	b938      	cbnz	r0, 8003c34 <pbuf_alloc+0xd4>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8003c24:	2201      	movs	r2, #1
 8003c26:	4b39      	ldr	r3, [pc, #228]	; (8003d0c <pbuf_alloc+0x1ac>)
        pbuf_free(p);
 8003c28:	4620      	mov	r0, r4
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8003c2a:	701a      	strb	r2, [r3, #0]
        pbuf_free(p);
 8003c2c:	f7ff ff36 	bl	8003a9c <pbuf_free>
    return NULL;
 8003c30:	2400      	movs	r4, #0
 8003c32:	e7be      	b.n	8003bb2 <pbuf_alloc+0x52>
      q->type = type;
 8003c34:	2303      	movs	r3, #3
 8003c36:	7303      	strb	r3, [r0, #12]
      q->flags = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8003c3c:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8003c3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
      r->next = q;
 8003c42:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8003c46:	429e      	cmp	r6, r3
 8003c48:	d106      	bne.n	8003c58 <pbuf_alloc+0xf8>
 8003c4a:	4643      	mov	r3, r8
 8003c4c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8003c50:	4651      	mov	r1, sl
 8003c52:	4648      	mov	r0, r9
 8003c54:	f003 ffc8 	bl	8007be8 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8003c58:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8003c5a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 8003c5e:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8003c60:	bf28      	it	cs
 8003c62:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8003c66:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8003c68:	f105 0310 	add.w	r3, r5, #16
 8003c6c:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8003c6e:	079b      	lsls	r3, r3, #30
 8003c70:	d006      	beq.n	8003c80 <pbuf_alloc+0x120>
 8003c72:	4643      	mov	r3, r8
 8003c74:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8003c78:	4926      	ldr	r1, [pc, #152]	; (8003d14 <pbuf_alloc+0x1b4>)
 8003c7a:	4648      	mov	r0, r9
 8003c7c:	f003 ffb4 	bl	8007be8 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8003c80:	8962      	ldrh	r2, [r4, #10]
 8003c82:	6863      	ldr	r3, [r4, #4]
 8003c84:	4413      	add	r3, r2
 8003c86:	429f      	cmp	r7, r3
 8003c88:	d206      	bcs.n	8003c98 <pbuf_alloc+0x138>
 8003c8a:	4643      	mov	r3, r8
 8003c8c:	f240 1255 	movw	r2, #341	; 0x155
 8003c90:	491f      	ldr	r1, [pc, #124]	; (8003d10 <pbuf_alloc+0x1b0>)
 8003c92:	4648      	mov	r0, r9
 8003c94:	f003 ffa8 	bl	8007be8 <iprintf>
      q->ref = 1;
 8003c98:	2301      	movs	r3, #1
      rem_len -= q->len;
 8003c9a:	46ab      	mov	fp, r5
      q->ref = 1;
 8003c9c:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 8003c9e:	896b      	ldrh	r3, [r5, #10]
 8003ca0:	1af6      	subs	r6, r6, r3
 8003ca2:	e7b3      	b.n	8003c0c <pbuf_alloc+0xac>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8003ca4:	f105 0013 	add.w	r0, r5, #19
 8003ca8:	1cf3      	adds	r3, r6, #3
 8003caa:	f020 0003 	bic.w	r0, r0, #3
 8003cae:	f023 0303 	bic.w	r3, r3, #3
 8003cb2:	4418      	add	r0, r3
 8003cb4:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8003cb6:	4298      	cmp	r0, r3
 8003cb8:	d3ba      	bcc.n	8003c30 <pbuf_alloc+0xd0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8003cba:	f7ff fca3 	bl	8003604 <mem_malloc>
    if (p == NULL) {
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d0b5      	beq.n	8003c30 <pbuf_alloc+0xd0>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8003cc4:	4405      	add	r5, r0
    p->next = NULL;
 8003cc6:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 8003cc8:	8106      	strh	r6, [r0, #8]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8003cca:	3513      	adds	r5, #19
    p->len = p->tot_len = length;
 8003ccc:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8003cce:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8003cd0:	f025 0503 	bic.w	r5, r5, #3
    p->type = type;
 8003cd4:	7303      	strb	r3, [r0, #12]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8003cd6:	6045      	str	r5, [r0, #4]
 8003cd8:	e79a      	b.n	8003c10 <pbuf_alloc+0xb0>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8003cda:	2007      	movs	r0, #7
 8003cdc:	f7ff fd74 	bl	80037c8 <memp_malloc>
    if (p == NULL) {
 8003ce0:	4604      	mov	r4, r0
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d0a4      	beq.n	8003c30 <pbuf_alloc+0xd0>
    p->payload = NULL;
 8003ce6:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 8003ce8:	8106      	strh	r6, [r0, #8]
 8003cea:	8146      	strh	r6, [r0, #10]
    p->payload = NULL;
 8003cec:	6043      	str	r3, [r0, #4]
    p->next = NULL;
 8003cee:	6003      	str	r3, [r0, #0]
    p->type = type;
 8003cf0:	7307      	strb	r7, [r0, #12]
    break;
 8003cf2:	e78d      	b.n	8003c10 <pbuf_alloc+0xb0>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8003cf4:	4b02      	ldr	r3, [pc, #8]	; (8003d00 <pbuf_alloc+0x1a0>)
 8003cf6:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8003cfa:	4907      	ldr	r1, [pc, #28]	; (8003d18 <pbuf_alloc+0x1b8>)
 8003cfc:	e749      	b.n	8003b92 <pbuf_alloc+0x32>
 8003cfe:	bf00      	nop
 8003d00:	0800985d 	.word	0x0800985d
 8003d04:	080095f8 	.word	0x080095f8
 8003d08:	08008f43 	.word	0x08008f43
 8003d0c:	20003740 	.word	0x20003740
 8003d10:	08009613 	.word	0x08009613
 8003d14:	08009658 	.word	0x08009658
 8003d18:	08009685 	.word	0x08009685
 8003d1c:	08009644 	.word	0x08009644

08003d20 <pbuf_realloc>:
{
 8003d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d24:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8003d26:	4604      	mov	r4, r0
 8003d28:	b930      	cbnz	r0, 8003d38 <pbuf_realloc+0x18>
 8003d2a:	4b2e      	ldr	r3, [pc, #184]	; (8003de4 <pbuf_realloc+0xc4>)
 8003d2c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003d30:	492d      	ldr	r1, [pc, #180]	; (8003de8 <pbuf_realloc+0xc8>)
 8003d32:	482e      	ldr	r0, [pc, #184]	; (8003dec <pbuf_realloc+0xcc>)
 8003d34:	f003 ff58 	bl	8007be8 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8003d38:	7b23      	ldrb	r3, [r4, #12]
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d906      	bls.n	8003d4c <pbuf_realloc+0x2c>
 8003d3e:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <pbuf_realloc+0xc4>)
 8003d40:	f240 12f7 	movw	r2, #503	; 0x1f7
 8003d44:	492a      	ldr	r1, [pc, #168]	; (8003df0 <pbuf_realloc+0xd0>)
 8003d46:	4829      	ldr	r0, [pc, #164]	; (8003dec <pbuf_realloc+0xcc>)
 8003d48:	f003 ff4e 	bl	8007be8 <iprintf>
  if (new_len >= p->tot_len) {
 8003d4c:	8926      	ldrh	r6, [r4, #8]
 8003d4e:	42ae      	cmp	r6, r5
 8003d50:	d945      	bls.n	8003dde <pbuf_realloc+0xbe>
  grow = new_len - p->tot_len;
 8003d52:	1bae      	subs	r6, r5, r6
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8003d54:	4f23      	ldr	r7, [pc, #140]	; (8003de4 <pbuf_realloc+0xc4>)
 8003d56:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8003dfc <pbuf_realloc+0xdc>
 8003d5a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8003dec <pbuf_realloc+0xcc>
  while (rem_len > q->len) {
 8003d5e:	8963      	ldrh	r3, [r4, #10]
 8003d60:	429d      	cmp	r5, r3
 8003d62:	d819      	bhi.n	8003d98 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8003d64:	7b22      	ldrb	r2, [r4, #12]
 8003d66:	2a00      	cmp	r2, #0
 8003d68:	d131      	bne.n	8003dce <pbuf_realloc+0xae>
 8003d6a:	429d      	cmp	r5, r3
 8003d6c:	d02f      	beq.n	8003dce <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8003d6e:	7b63      	ldrb	r3, [r4, #13]
 8003d70:	079b      	lsls	r3, r3, #30
 8003d72:	d42c      	bmi.n	8003dce <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8003d74:	6861      	ldr	r1, [r4, #4]
 8003d76:	4620      	mov	r0, r4
 8003d78:	1b09      	subs	r1, r1, r4
 8003d7a:	4429      	add	r1, r5
 8003d7c:	b289      	uxth	r1, r1
 8003d7e:	f7ff fbc9 	bl	8003514 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8003d82:	4604      	mov	r4, r0
 8003d84:	bb18      	cbnz	r0, 8003dce <pbuf_realloc+0xae>
 8003d86:	4b17      	ldr	r3, [pc, #92]	; (8003de4 <pbuf_realloc+0xc4>)
 8003d88:	f240 221d 	movw	r2, #541	; 0x21d
 8003d8c:	4919      	ldr	r1, [pc, #100]	; (8003df4 <pbuf_realloc+0xd4>)
 8003d8e:	4817      	ldr	r0, [pc, #92]	; (8003dec <pbuf_realloc+0xcc>)
 8003d90:	f003 ff2a 	bl	8007be8 <iprintf>
  q->len = rem_len;
 8003d94:	8164      	strh	r4, [r4, #10]
 8003d96:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 8003d98:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8003d9a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003d9e:	429e      	cmp	r6, r3
    rem_len -= q->len;
 8003da0:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8003da2:	dd06      	ble.n	8003db2 <pbuf_realloc+0x92>
 8003da4:	463b      	mov	r3, r7
 8003da6:	f240 220b 	movw	r2, #523	; 0x20b
 8003daa:	4649      	mov	r1, r9
 8003dac:	4640      	mov	r0, r8
 8003dae:	f003 ff1b 	bl	8007be8 <iprintf>
    q->tot_len += (u16_t)grow;
 8003db2:	8923      	ldrh	r3, [r4, #8]
 8003db4:	4433      	add	r3, r6
 8003db6:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8003db8:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8003dba:	2c00      	cmp	r4, #0
 8003dbc:	d1cf      	bne.n	8003d5e <pbuf_realloc+0x3e>
 8003dbe:	463b      	mov	r3, r7
 8003dc0:	f240 220f 	movw	r2, #527	; 0x20f
 8003dc4:	490c      	ldr	r1, [pc, #48]	; (8003df8 <pbuf_realloc+0xd8>)
 8003dc6:	4640      	mov	r0, r8
 8003dc8:	f003 ff0e 	bl	8007be8 <iprintf>
 8003dcc:	e7c7      	b.n	8003d5e <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 8003dce:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8003dd0:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8003dd2:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8003dd4:	b108      	cbz	r0, 8003dda <pbuf_realloc+0xba>
    pbuf_free(q->next);
 8003dd6:	f7ff fe61 	bl	8003a9c <pbuf_free>
  q->next = NULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	6023      	str	r3, [r4, #0]
 8003dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003de2:	bf00      	nop
 8003de4:	0800985d 	.word	0x0800985d
 8003de8:	080098b9 	.word	0x080098b9
 8003dec:	08008f43 	.word	0x08008f43
 8003df0:	080098d1 	.word	0x080098d1
 8003df4:	08009915 	.word	0x08009915
 8003df8:	080098fd 	.word	0x080098fd
 8003dfc:	080098ec 	.word	0x080098ec

08003e00 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8003e00:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 8003e02:	2200      	movs	r2, #0
 8003e04:	b290      	uxth	r0, r2
 8003e06:	3201      	adds	r2, #1
 8003e08:	b903      	cbnz	r3, 8003e0c <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8003e0a:	4770      	bx	lr
    p = p->next;
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	e7f9      	b.n	8003e04 <pbuf_clen+0x4>

08003e10 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8003e10:	b158      	cbz	r0, 8003e2a <pbuf_ref+0x1a>
    SYS_ARCH_INC(p->ref, 1);
 8003e12:	89c3      	ldrh	r3, [r0, #14]
 8003e14:	3301      	adds	r3, #1
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	81c3      	strh	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8003e1a:	b933      	cbnz	r3, 8003e2a <pbuf_ref+0x1a>
 8003e1c:	4b03      	ldr	r3, [pc, #12]	; (8003e2c <pbuf_ref+0x1c>)
 8003e1e:	f240 3239 	movw	r2, #825	; 0x339
 8003e22:	4903      	ldr	r1, [pc, #12]	; (8003e30 <pbuf_ref+0x20>)
 8003e24:	4803      	ldr	r0, [pc, #12]	; (8003e34 <pbuf_ref+0x24>)
 8003e26:	f003 bedf 	b.w	8007be8 <iprintf>
 8003e2a:	4770      	bx	lr
 8003e2c:	0800985d 	.word	0x0800985d
 8003e30:	08009931 	.word	0x08009931
 8003e34:	08008f43 	.word	0x08008f43

08003e38 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8003e38:	b570      	push	{r4, r5, r6, lr}
 8003e3a:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8003e3c:	4604      	mov	r4, r0
 8003e3e:	b100      	cbz	r0, 8003e42 <pbuf_cat+0xa>
 8003e40:	b969      	cbnz	r1, 8003e5e <pbuf_cat+0x26>
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <pbuf_cat+0x60>)
 8003e44:	f240 324d 	movw	r2, #845	; 0x34d
 8003e48:	4914      	ldr	r1, [pc, #80]	; (8003e9c <pbuf_cat+0x64>)
 8003e4a:	4815      	ldr	r0, [pc, #84]	; (8003ea0 <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8003e4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8003e50:	f003 beca 	b.w	8007be8 <iprintf>
    p->tot_len += t->tot_len;
 8003e54:	8923      	ldrh	r3, [r4, #8]
 8003e56:	8929      	ldrh	r1, [r5, #8]
 8003e58:	440b      	add	r3, r1
 8003e5a:	8123      	strh	r3, [r4, #8]
 8003e5c:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8003e5e:	6822      	ldr	r2, [r4, #0]
 8003e60:	2a00      	cmp	r2, #0
 8003e62:	d1f7      	bne.n	8003e54 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8003e64:	8922      	ldrh	r2, [r4, #8]
 8003e66:	8963      	ldrh	r3, [r4, #10]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d006      	beq.n	8003e7a <pbuf_cat+0x42>
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <pbuf_cat+0x60>)
 8003e6e:	f240 3255 	movw	r2, #853	; 0x355
 8003e72:	490c      	ldr	r1, [pc, #48]	; (8003ea4 <pbuf_cat+0x6c>)
 8003e74:	480a      	ldr	r0, [pc, #40]	; (8003ea0 <pbuf_cat+0x68>)
 8003e76:	f003 feb7 	bl	8007be8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	b133      	cbz	r3, 8003e8c <pbuf_cat+0x54>
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <pbuf_cat+0x60>)
 8003e80:	f240 3256 	movw	r2, #854	; 0x356
 8003e84:	4908      	ldr	r1, [pc, #32]	; (8003ea8 <pbuf_cat+0x70>)
 8003e86:	4806      	ldr	r0, [pc, #24]	; (8003ea0 <pbuf_cat+0x68>)
 8003e88:	f003 feae 	bl	8007be8 <iprintf>
  p->tot_len += t->tot_len;
 8003e8c:	892a      	ldrh	r2, [r5, #8]
 8003e8e:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 8003e90:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 8003e92:	4413      	add	r3, r2
 8003e94:	8123      	strh	r3, [r4, #8]
  p->next = t;
 8003e96:	bd70      	pop	{r4, r5, r6, pc}
 8003e98:	0800985d 	.word	0x0800985d
 8003e9c:	080096c4 	.word	0x080096c4
 8003ea0:	08008f43 	.word	0x08008f43
 8003ea4:	080096f9 	.word	0x080096f9
 8003ea8:	08009726 	.word	0x08009726

08003eac <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8003eac:	b510      	push	{r4, lr}
 8003eae:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8003eb0:	f7ff ffc2 	bl	8003e38 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8003eb4:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8003eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 8003eba:	f7ff bfa9 	b.w	8003e10 <pbuf_ref>
	...

08003ec0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8003ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec4:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8003ec6:	4605      	mov	r5, r0
 8003ec8:	b120      	cbz	r0, 8003ed4 <pbuf_copy+0x14>
 8003eca:	b119      	cbz	r1, 8003ed4 <pbuf_copy+0x14>
 8003ecc:	8902      	ldrh	r2, [r0, #8]
 8003ece:	890b      	ldrh	r3, [r1, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d20a      	bcs.n	8003eea <pbuf_copy+0x2a>
 8003ed4:	4b38      	ldr	r3, [pc, #224]	; (8003fb8 <pbuf_copy+0xf8>)
 8003ed6:	f240 32bd 	movw	r2, #957	; 0x3bd
 8003eda:	4938      	ldr	r1, [pc, #224]	; (8003fbc <pbuf_copy+0xfc>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8003edc:	4838      	ldr	r0, [pc, #224]	; (8003fc0 <pbuf_copy+0x100>)
 8003ede:	f003 fe83 	bl	8007be8 <iprintf>
 8003ee2:	f06f 000f 	mvn.w	r0, #15
 8003ee6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eea:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8003eee:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8003fb8 <pbuf_copy+0xf8>
 8003ef2:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8003fd0 <pbuf_copy+0x110>
 8003ef6:	465f      	mov	r7, fp
 8003ef8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003fc0 <pbuf_copy+0x100>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8003efc:	896e      	ldrh	r6, [r5, #10]
 8003efe:	8963      	ldrh	r3, [r4, #10]
 8003f00:	1bf6      	subs	r6, r6, r7
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8003f02:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8003f04:	eba3 030b 	sub.w	r3, r3, fp
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8003f08:	6861      	ldr	r1, [r4, #4]
 8003f0a:	4438      	add	r0, r7
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8003f0c:	429e      	cmp	r6, r3
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8003f0e:	4459      	add	r1, fp
      len = p_from->len - offset_from;
 8003f10:	bfac      	ite	ge
 8003f12:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 8003f14:	b2b6      	uxthlt	r6, r6
    offset_to += len;
 8003f16:	4437      	add	r7, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8003f18:	4632      	mov	r2, r6
 8003f1a:	f003 fe52 	bl	8007bc2 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8003f1e:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 8003f20:	b2bf      	uxth	r7, r7
    offset_from += len;
 8003f22:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8003f24:	42bb      	cmp	r3, r7
    offset_from += len;
 8003f26:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8003f2a:	d206      	bcs.n	8003f3a <pbuf_copy+0x7a>
 8003f2c:	4643      	mov	r3, r8
 8003f2e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8003f32:	4651      	mov	r1, sl
 8003f34:	4648      	mov	r0, r9
 8003f36:	f003 fe57 	bl	8007be8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8003f3a:	8963      	ldrh	r3, [r4, #10]
 8003f3c:	455b      	cmp	r3, fp
 8003f3e:	d206      	bcs.n	8003f4e <pbuf_copy+0x8e>
 8003f40:	4643      	mov	r3, r8
 8003f42:	f240 32ce 	movw	r2, #974	; 0x3ce
 8003f46:	491f      	ldr	r1, [pc, #124]	; (8003fc4 <pbuf_copy+0x104>)
 8003f48:	4648      	mov	r0, r9
 8003f4a:	f003 fe4d 	bl	8007be8 <iprintf>
    if (offset_from >= p_from->len) {
 8003f4e:	8963      	ldrh	r3, [r4, #10]
 8003f50:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 8003f52:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8003f54:	bf9c      	itt	ls
 8003f56:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8003f58:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 8003f5c:	42bb      	cmp	r3, r7
 8003f5e:	d11e      	bne.n	8003f9e <pbuf_copy+0xde>
      p_to = p_to->next;
 8003f60:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8003f62:	b9dd      	cbnz	r5, 8003f9c <pbuf_copy+0xdc>
 8003f64:	b1bc      	cbz	r4, 8003f96 <pbuf_copy+0xd6>
 8003f66:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <pbuf_copy+0xf8>)
 8003f68:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8003f6c:	4916      	ldr	r1, [pc, #88]	; (8003fc8 <pbuf_copy+0x108>)
 8003f6e:	e7b5      	b.n	8003edc <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8003f70:	8962      	ldrh	r2, [r4, #10]
 8003f72:	8923      	ldrh	r3, [r4, #8]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d114      	bne.n	8003fa2 <pbuf_copy+0xe2>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	b193      	cbz	r3, 8003fa2 <pbuf_copy+0xe2>
 8003f7c:	4b0e      	ldr	r3, [pc, #56]	; (8003fb8 <pbuf_copy+0xf8>)
 8003f7e:	f240 32de 	movw	r2, #990	; 0x3de
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8003f82:	4912      	ldr	r1, [pc, #72]	; (8003fcc <pbuf_copy+0x10c>)
 8003f84:	480e      	ldr	r0, [pc, #56]	; (8003fc0 <pbuf_copy+0x100>)
 8003f86:	f003 fe2f 	bl	8007be8 <iprintf>
 8003f8a:	f06f 0005 	mvn.w	r0, #5
 8003f8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8003f92:	2c00      	cmp	r4, #0
 8003f94:	d1b2      	bne.n	8003efc <pbuf_copy+0x3c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8003f96:	4620      	mov	r0, r4
 8003f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 8003f9c:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8003f9e:	2c00      	cmp	r4, #0
 8003fa0:	d1e6      	bne.n	8003f70 <pbuf_copy+0xb0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8003fa2:	896a      	ldrh	r2, [r5, #10]
 8003fa4:	892b      	ldrh	r3, [r5, #8]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d1f3      	bne.n	8003f92 <pbuf_copy+0xd2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8003faa:	682b      	ldr	r3, [r5, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <pbuf_copy+0xd2>
 8003fb0:	4b01      	ldr	r3, [pc, #4]	; (8003fb8 <pbuf_copy+0xf8>)
 8003fb2:	f240 32e3 	movw	r2, #995	; 0x3e3
 8003fb6:	e7e4      	b.n	8003f82 <pbuf_copy+0xc2>
 8003fb8:	0800985d 	.word	0x0800985d
 8003fbc:	08009736 	.word	0x08009736
 8003fc0:	08008f43 	.word	0x08008f43
 8003fc4:	0800977d 	.word	0x0800977d
 8003fc8:	08009798 	.word	0x08009798
 8003fcc:	080097a5 	.word	0x080097a5
 8003fd0:	08009766 	.word	0x08009766

08003fd4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8003fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd8:	460f      	mov	r7, r1
 8003fda:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8003fdc:	4606      	mov	r6, r0
 8003fde:	b950      	cbnz	r0, 8003ff6 <pbuf_copy_partial+0x22>
 8003fe0:	4635      	mov	r5, r6
 8003fe2:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <pbuf_copy_partial+0x7c>)
 8003fe4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8003fe8:	491a      	ldr	r1, [pc, #104]	; (8004054 <pbuf_copy_partial+0x80>)
 8003fea:	481b      	ldr	r0, [pc, #108]	; (8004058 <pbuf_copy_partial+0x84>)
 8003fec:	f003 fdfc 	bl	8007be8 <iprintf>
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8003ff6:	b169      	cbz	r1, 8004014 <pbuf_copy_partial+0x40>
 8003ff8:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8003ffa:	f1b8 0f00 	cmp.w	r8, #0
 8003ffe:	d0f7      	beq.n	8003ff0 <pbuf_copy_partial+0x1c>
 8004000:	2e00      	cmp	r6, #0
 8004002:	d0f5      	beq.n	8003ff0 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 8004004:	b17b      	cbz	r3, 8004026 <pbuf_copy_partial+0x52>
 8004006:	8971      	ldrh	r1, [r6, #10]
 8004008:	428b      	cmp	r3, r1
 800400a:	d30c      	bcc.n	8004026 <pbuf_copy_partial+0x52>
      offset -= p->len;
 800400c:	1a5b      	subs	r3, r3, r1
 800400e:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004010:	6836      	ldr	r6, [r6, #0]
 8004012:	e7f2      	b.n	8003ffa <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8004014:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <pbuf_copy_partial+0x7c>)
 8004016:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800401a:	4910      	ldr	r1, [pc, #64]	; (800405c <pbuf_copy_partial+0x88>)
 800401c:	463d      	mov	r5, r7
 800401e:	480e      	ldr	r0, [pc, #56]	; (8004058 <pbuf_copy_partial+0x84>)
 8004020:	f003 fde2 	bl	8007be8 <iprintf>
 8004024:	e7e4      	b.n	8003ff0 <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 8004026:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8004028:	1978      	adds	r0, r7, r5
 800402a:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 800402c:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800402e:	4419      	add	r1, r3
      buf_copy_len = p->len - offset;
 8004030:	b2a4      	uxth	r4, r4
 8004032:	4544      	cmp	r4, r8
 8004034:	bf28      	it	cs
 8004036:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8004038:	4622      	mov	r2, r4
      copied_total += buf_copy_len;
 800403a:	4425      	add	r5, r4
      len -= buf_copy_len;
 800403c:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8004040:	f003 fdbf 	bl	8007bc2 <memcpy>
      copied_total += buf_copy_len;
 8004044:	b2ad      	uxth	r5, r5
      offset = 0;
 8004046:	2300      	movs	r3, #0
      len -= buf_copy_len;
 8004048:	fa1f f884 	uxth.w	r8, r4
 800404c:	e7e0      	b.n	8004010 <pbuf_copy_partial+0x3c>
 800404e:	bf00      	nop
 8004050:	0800985d 	.word	0x0800985d
 8004054:	080097cf 	.word	0x080097cf
 8004058:	08008f43 	.word	0x08008f43
 800405c:	080097ee 	.word	0x080097ee

08004060 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8004060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004064:	4688      	mov	r8, r1
 8004066:	4617      	mov	r7, r2
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8004068:	4605      	mov	r5, r0
 800406a:	b958      	cbnz	r0, 8004084 <pbuf_take+0x24>
 800406c:	4b26      	ldr	r3, [pc, #152]	; (8004108 <pbuf_take+0xa8>)
 800406e:	f240 4284 	movw	r2, #1156	; 0x484
 8004072:	4926      	ldr	r1, [pc, #152]	; (800410c <pbuf_take+0xac>)
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8004074:	4826      	ldr	r0, [pc, #152]	; (8004110 <pbuf_take+0xb0>)
 8004076:	f003 fdb7 	bl	8007be8 <iprintf>
 800407a:	f06f 000f 	mvn.w	r0, #15
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  return ERR_OK;
}
 800407e:	b003      	add	sp, #12
 8004080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8004084:	b921      	cbnz	r1, 8004090 <pbuf_take+0x30>
 8004086:	4b20      	ldr	r3, [pc, #128]	; (8004108 <pbuf_take+0xa8>)
 8004088:	f240 4285 	movw	r2, #1157	; 0x485
 800408c:	4921      	ldr	r1, [pc, #132]	; (8004114 <pbuf_take+0xb4>)
 800408e:	e7f1      	b.n	8004074 <pbuf_take+0x14>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8004090:	8903      	ldrh	r3, [r0, #8]
 8004092:	4293      	cmp	r3, r2
 8004094:	d313      	bcc.n	80040be <pbuf_take+0x5e>
 8004096:	4614      	mov	r4, r2
 8004098:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800409a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8004108 <pbuf_take+0xa8>
 800409e:	f8df a080 	ldr.w	sl, [pc, #128]	; 8004120 <pbuf_take+0xc0>
 80040a2:	f8df b06c 	ldr.w	fp, [pc, #108]	; 8004110 <pbuf_take+0xb0>
  for (p = buf; total_copy_len != 0; p = p->next) {
 80040a6:	b9a4      	cbnz	r4, 80040d2 <pbuf_take+0x72>
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80040a8:	42be      	cmp	r6, r7
 80040aa:	d006      	beq.n	80040ba <pbuf_take+0x5a>
 80040ac:	4b16      	ldr	r3, [pc, #88]	; (8004108 <pbuf_take+0xa8>)
 80040ae:	f240 4299 	movw	r2, #1177	; 0x499
 80040b2:	4919      	ldr	r1, [pc, #100]	; (8004118 <pbuf_take+0xb8>)
 80040b4:	4816      	ldr	r0, [pc, #88]	; (8004110 <pbuf_take+0xb0>)
 80040b6:	f003 fd97 	bl	8007be8 <iprintf>
  return ERR_OK;
 80040ba:	4620      	mov	r0, r4
 80040bc:	e7df      	b.n	800407e <pbuf_take+0x1e>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80040be:	4b12      	ldr	r3, [pc, #72]	; (8004108 <pbuf_take+0xa8>)
 80040c0:	f240 4286 	movw	r2, #1158	; 0x486
 80040c4:	4915      	ldr	r1, [pc, #84]	; (800411c <pbuf_take+0xbc>)
 80040c6:	4812      	ldr	r0, [pc, #72]	; (8004110 <pbuf_take+0xb0>)
 80040c8:	f003 fd8e 	bl	8007be8 <iprintf>
 80040cc:	f04f 30ff 	mov.w	r0, #4294967295
 80040d0:	e7d5      	b.n	800407e <pbuf_take+0x1e>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80040d2:	b935      	cbnz	r5, 80040e2 <pbuf_take+0x82>
 80040d4:	464b      	mov	r3, r9
 80040d6:	f240 428e 	movw	r2, #1166	; 0x48e
 80040da:	4651      	mov	r1, sl
 80040dc:	4658      	mov	r0, fp
 80040de:	f003 fd83 	bl	8007be8 <iprintf>
 80040e2:	896b      	ldrh	r3, [r5, #10]
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 80040e4:	eb08 0106 	add.w	r1, r8, r6
 80040e8:	6868      	ldr	r0, [r5, #4]
 80040ea:	42a3      	cmp	r3, r4
 80040ec:	bf28      	it	cs
 80040ee:	4623      	movcs	r3, r4
 80040f0:	461a      	mov	r2, r3
 80040f2:	9301      	str	r3, [sp, #4]
 80040f4:	f003 fd65 	bl	8007bc2 <memcpy>
    total_copy_len -= buf_copy_len;
 80040f8:	9b01      	ldr	r3, [sp, #4]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80040fa:	682d      	ldr	r5, [r5, #0]
    total_copy_len -= buf_copy_len;
 80040fc:	1ae4      	subs	r4, r4, r3
    copied_total += buf_copy_len;
 80040fe:	441e      	add	r6, r3
    total_copy_len -= buf_copy_len;
 8004100:	b2a4      	uxth	r4, r4
    copied_total += buf_copy_len;
 8004102:	b2b6      	uxth	r6, r6
 8004104:	e7cf      	b.n	80040a6 <pbuf_take+0x46>
 8004106:	bf00      	nop
 8004108:	0800985d 	.word	0x0800985d
 800410c:	08009943 	.word	0x08009943
 8004110:	08008f43 	.word	0x08008f43
 8004114:	0800995a 	.word	0x0800995a
 8004118:	080099ad 	.word	0x080099ad
 800411c:	08009975 	.word	0x08009975
 8004120:	08009995 	.word	0x08009995

08004124 <tcp_close_shutdown_fin>:
  return ERR_OK;
}

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8004124:	b510      	push	{r4, lr}
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004126:	4604      	mov	r4, r0
 8004128:	b930      	cbnz	r0, 8004138 <tcp_close_shutdown_fin+0x14>
 800412a:	4b13      	ldr	r3, [pc, #76]	; (8004178 <tcp_close_shutdown_fin+0x54>)
 800412c:	f240 124d 	movw	r2, #333	; 0x14d
 8004130:	4912      	ldr	r1, [pc, #72]	; (800417c <tcp_close_shutdown_fin+0x58>)
 8004132:	4813      	ldr	r0, [pc, #76]	; (8004180 <tcp_close_shutdown_fin+0x5c>)
 8004134:	f003 fd58 	bl	8007be8 <iprintf>

  switch (pcb->state) {
 8004138:	7d23      	ldrb	r3, [r4, #20]
 800413a:	2b04      	cmp	r3, #4
 800413c:	d003      	beq.n	8004146 <tcp_close_shutdown_fin+0x22>
 800413e:	2b07      	cmp	r3, #7
 8004140:	d00c      	beq.n	800415c <tcp_close_shutdown_fin+0x38>
 8004142:	2b03      	cmp	r3, #3
 8004144:	d108      	bne.n	8004158 <tcp_close_shutdown_fin+0x34>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8004146:	4620      	mov	r0, r4
 8004148:	f002 f998 	bl	800647c <tcp_send_fin>
    if (err == ERR_OK) {
 800414c:	b988      	cbnz	r0, 8004172 <tcp_close_shutdown_fin+0x4e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800414e:	2305      	movs	r3, #5
    break;
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8004150:	7523      	strb	r3, [r4, #20]
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8004152:	4620      	mov	r0, r4
 8004154:	f002 f9ea 	bl	800652c <tcp_output>
 8004158:	2000      	movs	r0, #0
 800415a:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 800415c:	4620      	mov	r0, r4
 800415e:	f002 f98d 	bl	800647c <tcp_send_fin>
    if (err == ERR_OK) {
 8004162:	b930      	cbnz	r0, 8004172 <tcp_close_shutdown_fin+0x4e>
      pcb->state = LAST_ACK;
 8004164:	2309      	movs	r3, #9
 8004166:	e7f3      	b.n	8004150 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8004168:	7ea3      	ldrb	r3, [r4, #26]
 800416a:	f043 0308 	orr.w	r3, r3, #8
 800416e:	76a3      	strb	r3, [r4, #26]
 8004170:	e7f2      	b.n	8004158 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 8004172:	1c43      	adds	r3, r0, #1
 8004174:	d0f8      	beq.n	8004168 <tcp_close_shutdown_fin+0x44>
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
  }
  return err;
}
 8004176:	bd10      	pop	{r4, pc}
 8004178:	08009a1a 	.word	0x08009a1a
 800417c:	08009a49 	.word	0x08009a49
 8004180:	08008f43 	.word	0x08008f43

08004184 <tcp_init>:
{
 8004184:	4770      	bx	lr
	...

08004188 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8004188:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800418a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
{
 800418c:	4604      	mov	r4, r0

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800418e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004190:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8004192:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004194:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8004196:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800419a:	4428      	add	r0, r5
 800419c:	bf94      	ite	ls
 800419e:	1a82      	subls	r2, r0, r2
 80041a0:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 80041a4:	2a00      	cmp	r2, #0
 80041a6:	db01      	blt.n	80041ac <tcp_update_rcv_ann_wnd+0x24>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80041a8:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80041aa:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80041ac:	1aea      	subs	r2, r5, r3
 80041ae:	2a00      	cmp	r2, #0
 80041b0:	dd02      	ble.n	80041b8 <tcp_update_rcv_ann_wnd+0x30>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80041b2:	2000      	movs	r0, #0
 80041b4:	8560      	strh	r0, [r4, #42]	; 0x2a
 80041b6:	bd38      	pop	{r3, r4, r5, pc}
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80041b8:	1b5d      	subs	r5, r3, r5
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80041ba:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80041be:	d306      	bcc.n	80041ce <tcp_update_rcv_ann_wnd+0x46>
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <tcp_update_rcv_ann_wnd+0x4c>)
 80041c2:	f44f 7242 	mov.w	r2, #776	; 0x308
 80041c6:	4904      	ldr	r1, [pc, #16]	; (80041d8 <tcp_update_rcv_ann_wnd+0x50>)
 80041c8:	4804      	ldr	r0, [pc, #16]	; (80041dc <tcp_update_rcv_ann_wnd+0x54>)
 80041ca:	f003 fd0d 	bl	8007be8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80041ce:	8565      	strh	r5, [r4, #42]	; 0x2a
    }
    return 0;
 80041d0:	2000      	movs	r0, #0
  }
}
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	08009a1a 	.word	0x08009a1a
 80041d8:	08009c5c 	.word	0x08009c5c
 80041dc:	08008f43 	.word	0x08008f43

080041e0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80041e0:	b538      	push	{r3, r4, r5, lr}
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80041e2:	7d03      	ldrb	r3, [r0, #20]
{
 80041e4:	4604      	mov	r4, r0
 80041e6:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d106      	bne.n	80041fa <tcp_recved+0x1a>
 80041ec:	4b17      	ldr	r3, [pc, #92]	; (800424c <tcp_recved+0x6c>)
 80041ee:	f44f 7248 	mov.w	r2, #800	; 0x320
 80041f2:	4917      	ldr	r1, [pc, #92]	; (8004250 <tcp_recved+0x70>)
 80041f4:	4817      	ldr	r0, [pc, #92]	; (8004254 <tcp_recved+0x74>)
 80041f6:	f003 fcf7 	bl	8007be8 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 80041fa:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80041fc:	4429      	add	r1, r5
 80041fe:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8004200:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 8004204:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8004206:	d911      	bls.n	800422c <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8004208:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800420c:	8523      	strh	r3, [r4, #40]	; 0x28
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800420e:	4620      	mov	r0, r4
 8004210:	f7ff ffba 	bl	8004188 <tcp_update_rcv_ann_wnd>

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8004214:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8004218:	db17      	blt.n	800424a <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 800421a:	7ea3      	ldrb	r3, [r4, #26]
    tcp_output(pcb);
 800421c:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800421e:	f043 0302 	orr.w	r3, r3, #2
 8004222:	76a3      	strb	r3, [r4, #26]
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8004224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 8004228:	f002 b980 	b.w	800652c <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 800422c:	2900      	cmp	r1, #0
 800422e:	d1ee      	bne.n	800420e <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8004230:	7d23      	ldrb	r3, [r4, #20]
 8004232:	2b07      	cmp	r3, #7
 8004234:	d0e8      	beq.n	8004208 <tcp_recved+0x28>
 8004236:	2b09      	cmp	r3, #9
 8004238:	d0e6      	beq.n	8004208 <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800423a:	4b04      	ldr	r3, [pc, #16]	; (800424c <tcp_recved+0x6c>)
 800423c:	f240 322d 	movw	r2, #813	; 0x32d
 8004240:	4905      	ldr	r1, [pc, #20]	; (8004258 <tcp_recved+0x78>)
 8004242:	4804      	ldr	r0, [pc, #16]	; (8004254 <tcp_recved+0x74>)
 8004244:	f003 fcd0 	bl	8007be8 <iprintf>
 8004248:	e7e1      	b.n	800420e <tcp_recved+0x2e>
 800424a:	bd38      	pop	{r3, r4, r5, pc}
 800424c:	08009a1a 	.word	0x08009a1a
 8004250:	08009ac3 	.word	0x08009ac3
 8004254:	08008f43 	.word	0x08008f43
 8004258:	08009ae9 	.word	0x08009ae9

0800425c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800425c:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800425e:	4604      	mov	r4, r0
 8004260:	b148      	cbz	r0, 8004276 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8004262:	6840      	ldr	r0, [r0, #4]
 8004264:	b108      	cbz	r0, 800426a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8004266:	f7ff fc19 	bl	8003a9c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800426a:	4621      	mov	r1, r4
 800426c:	2003      	movs	r0, #3
  }
}
 800426e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8004272:	f7ff bac5 	b.w	8003800 <memp_free>
 8004276:	bd10      	pop	{r4, pc}

08004278 <tcp_segs_free>:
{
 8004278:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800427a:	b900      	cbnz	r0, 800427e <tcp_segs_free+0x6>
}
 800427c:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800427e:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8004280:	f7ff ffec 	bl	800425c <tcp_seg_free>
    seg = next;
 8004284:	4620      	mov	r0, r4
 8004286:	e7f8      	b.n	800427a <tcp_segs_free+0x2>

08004288 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8004288:	b538      	push	{r3, r4, r5, lr}
 800428a:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800428c:	2003      	movs	r0, #3
 800428e:	f7ff fa9b 	bl	80037c8 <memp_malloc>
  if (cseg == NULL) {
 8004292:	4605      	mov	r5, r0
 8004294:	b160      	cbz	r0, 80042b0 <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8004296:	4620      	mov	r0, r4
 8004298:	462b      	mov	r3, r5
 800429a:	f104 0210 	add.w	r2, r4, #16
 800429e:	f850 1b04 	ldr.w	r1, [r0], #4
 80042a2:	4290      	cmp	r0, r2
 80042a4:	f843 1b04 	str.w	r1, [r3], #4
 80042a8:	d1f9      	bne.n	800429e <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 80042aa:	6868      	ldr	r0, [r5, #4]
 80042ac:	f7ff fdb0 	bl	8003e10 <pbuf_ref>
  return cseg;
}
 80042b0:	4628      	mov	r0, r5
 80042b2:	bd38      	pop	{r3, r4, r5, pc}

080042b4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80042b4:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 80042b6:	7d03      	ldrb	r3, [r0, #20]
{
 80042b8:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d919      	bls.n	80042f2 <tcp_pcb_purge+0x3e>
 80042be:	2b0a      	cmp	r3, #10
 80042c0:	d017      	beq.n	80042f2 <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80042c2:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80042c4:	b118      	cbz	r0, 80042ce <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80042c6:	f7ff fbe9 	bl	8003a9c <pbuf_free>
      pcb->refused_data = NULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80042ce:	6f20      	ldr	r0, [r4, #112]	; 0x70
    pcb->ooseq = NULL;
 80042d0:	2500      	movs	r5, #0
    tcp_segs_free(pcb->ooseq);
 80042d2:	f7ff ffd1 	bl	8004278 <tcp_segs_free>
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80042d6:	f64f 73ff 	movw	r3, #65535	; 0xffff

    tcp_segs_free(pcb->unsent);
 80042da:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->rtime = -1;
 80042dc:	8623      	strh	r3, [r4, #48]	; 0x30
    pcb->ooseq = NULL;
 80042de:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 80042e0:	f7ff ffca 	bl	8004278 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80042e4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80042e6:	f7ff ffc7 	bl	8004278 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80042ea:	66a5      	str	r5, [r4, #104]	; 0x68
 80042ec:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80042ee:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 80042f2:	bd38      	pop	{r3, r4, r5, pc}

080042f4 <tcp_slowtmr>:
{
 80042f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 80042f8:	4eb0      	ldr	r6, [pc, #704]	; (80045bc <tcp_slowtmr+0x2c8>)
{
 80042fa:	b085      	sub	sp, #20
      tcp_active_pcbs_changed = 0;
 80042fc:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 80045f0 <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 8004300:	6833      	ldr	r3, [r6, #0]
 8004302:	3301      	adds	r3, #1
 8004304:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 8004306:	4bae      	ldr	r3, [pc, #696]	; (80045c0 <tcp_slowtmr+0x2cc>)
 8004308:	781a      	ldrb	r2, [r3, #0]
 800430a:	9302      	str	r3, [sp, #8]
 800430c:	3201      	adds	r2, #1
 800430e:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 8004310:	4fac      	ldr	r7, [pc, #688]	; (80045c4 <tcp_slowtmr+0x2d0>)
  prev = NULL;
 8004312:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8004316:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 80045f4 <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 800431a:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 800431c:	b96c      	cbnz	r4, 800433a <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 800431e:	4faa      	ldr	r7, [pc, #680]	; (80045c8 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8004320:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 80045f4 <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 8004324:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8004326:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 80045f8 <tcp_slowtmr+0x304>
 800432a:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 80045d0 <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 800432e:	2d00      	cmp	r5, #0
 8004330:	f040 8185 	bne.w	800463e <tcp_slowtmr+0x34a>
}
 8004334:	b005      	add	sp, #20
 8004336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800433a:	7d23      	ldrb	r3, [r4, #20]
 800433c:	b933      	cbnz	r3, 800434c <tcp_slowtmr+0x58>
 800433e:	464b      	mov	r3, r9
 8004340:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8004344:	49a1      	ldr	r1, [pc, #644]	; (80045cc <tcp_slowtmr+0x2d8>)
 8004346:	48a2      	ldr	r0, [pc, #648]	; (80045d0 <tcp_slowtmr+0x2dc>)
 8004348:	f003 fc4e 	bl	8007be8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800434c:	7d23      	ldrb	r3, [r4, #20]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d106      	bne.n	8004360 <tcp_slowtmr+0x6c>
 8004352:	464b      	mov	r3, r9
 8004354:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8004358:	499e      	ldr	r1, [pc, #632]	; (80045d4 <tcp_slowtmr+0x2e0>)
 800435a:	489d      	ldr	r0, [pc, #628]	; (80045d0 <tcp_slowtmr+0x2dc>)
 800435c:	f003 fc44 	bl	8007be8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8004360:	7d23      	ldrb	r3, [r4, #20]
 8004362:	2b0a      	cmp	r3, #10
 8004364:	d106      	bne.n	8004374 <tcp_slowtmr+0x80>
 8004366:	464b      	mov	r3, r9
 8004368:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800436c:	499a      	ldr	r1, [pc, #616]	; (80045d8 <tcp_slowtmr+0x2e4>)
 800436e:	4898      	ldr	r0, [pc, #608]	; (80045d0 <tcp_slowtmr+0x2dc>)
 8004370:	f003 fc3a 	bl	8007be8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8004374:	9b02      	ldr	r3, [sp, #8]
 8004376:	7f62      	ldrb	r2, [r4, #29]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d104      	bne.n	8004388 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 800437e:	68e5      	ldr	r5, [r4, #12]
 8004380:	4644      	mov	r4, r8
      continue;
 8004382:	46a0      	mov	r8, r4
 8004384:	462c      	mov	r4, r5
 8004386:	e7c9      	b.n	800431c <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8004388:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800438a:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800438c:	2902      	cmp	r1, #2
 800438e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8004392:	d102      	bne.n	800439a <tcp_slowtmr+0xa6>
 8004394:	2a05      	cmp	r2, #5
 8004396:	f200 80e6 	bhi.w	8004566 <tcp_slowtmr+0x272>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800439a:	2a0b      	cmp	r2, #11
 800439c:	f200 80e3 	bhi.w	8004566 <tcp_slowtmr+0x272>
      if (pcb->persist_backoff > 0) {
 80043a0:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 80043a4:	f1bb 0f00 	cmp.w	fp, #0
 80043a8:	f000 80a6 	beq.w	80044f8 <tcp_slowtmr+0x204>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80043ac:	488b      	ldr	r0, [pc, #556]	; (80045dc <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 80043ae:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80043b2:	4483      	add	fp, r0
 80043b4:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 80043b8:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 80043ba:	bf84      	itt	hi
 80043bc:	3301      	addhi	r3, #1
 80043be:	f884 3094 	strbhi.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 80043c2:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 80043c6:	4293      	cmp	r3, r2
 80043c8:	f080 8085 	bcs.w	80044d6 <tcp_slowtmr+0x1e2>
    pcb_remove = 0;
 80043cc:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 80043d0:	7d23      	ldrb	r3, [r4, #20]
 80043d2:	2b06      	cmp	r3, #6
 80043d4:	d10b      	bne.n	80043ee <tcp_slowtmr+0xfa>
      if (pcb->flags & TF_RXCLOSED) {
 80043d6:	7ea2      	ldrb	r2, [r4, #26]
 80043d8:	06d2      	lsls	r2, r2, #27
 80043da:	d508      	bpl.n	80043ee <tcp_slowtmr+0xfa>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80043dc:	6832      	ldr	r2, [r6, #0]
 80043de:	6a21      	ldr	r1, [r4, #32]
 80043e0:	1a52      	subs	r2, r2, r1
 80043e2:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 80043e4:	bf84      	itt	hi
 80043e6:	f10b 0b01 	addhi.w	fp, fp, #1
 80043ea:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80043ee:	7a25      	ldrb	r5, [r4, #8]
 80043f0:	f015 0508 	ands.w	r5, r5, #8
 80043f4:	d019      	beq.n	800442a <tcp_slowtmr+0x136>
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d002      	beq.n	8004400 <tcp_slowtmr+0x10c>
       ((pcb->state == ESTABLISHED) ||
 80043fa:	2b07      	cmp	r3, #7
 80043fc:	f040 80c8 	bne.w	8004590 <tcp_slowtmr+0x29c>
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8004400:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8004404:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004408:	6831      	ldr	r1, [r6, #0]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800440a:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800440e:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8004410:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004414:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8004416:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800441a:	4291      	cmp	r1, r2
 800441c:	f240 80a6 	bls.w	800456c <tcp_slowtmr+0x278>
        ++pcb_remove;
 8004420:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 8004424:	2501      	movs	r5, #1
        ++pcb_remove;
 8004426:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->ooseq != NULL &&
 800442a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800442c:	b168      	cbz	r0, 800444a <tcp_slowtmr+0x156>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800442e:	6833      	ldr	r3, [r6, #0]
 8004430:	6a22      	ldr	r2, [r4, #32]
 8004432:	1a9a      	subs	r2, r3, r2
 8004434:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8004438:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800443c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8004440:	d303      	bcc.n	800444a <tcp_slowtmr+0x156>
      tcp_segs_free(pcb->ooseq);
 8004442:	f7ff ff19 	bl	8004278 <tcp_segs_free>
      pcb->ooseq = NULL;
 8004446:	2300      	movs	r3, #0
 8004448:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 800444a:	7d23      	ldrb	r3, [r4, #20]
 800444c:	2b03      	cmp	r3, #3
 800444e:	f040 80a1 	bne.w	8004594 <tcp_slowtmr+0x2a0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8004452:	6833      	ldr	r3, [r6, #0]
 8004454:	6a22      	ldr	r2, [r4, #32]
 8004456:	1a9b      	subs	r3, r3, r2
 8004458:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800445a:	d803      	bhi.n	8004464 <tcp_slowtmr+0x170>
    if (pcb_remove) {
 800445c:	f1bb 0f00 	cmp.w	fp, #0
 8004460:	f000 80cc 	beq.w	80045fc <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 8004464:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8004466:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800446a:	f7ff ff23 	bl	80042b4 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800446e:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8004470:	f1b8 0f00 	cmp.w	r8, #0
 8004474:	f000 8096 	beq.w	80045a4 <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8004478:	429c      	cmp	r4, r3
 800447a:	d106      	bne.n	800448a <tcp_slowtmr+0x196>
 800447c:	464b      	mov	r3, r9
 800447e:	f240 4289 	movw	r2, #1161	; 0x489
 8004482:	4957      	ldr	r1, [pc, #348]	; (80045e0 <tcp_slowtmr+0x2ec>)
 8004484:	4852      	ldr	r0, [pc, #328]	; (80045d0 <tcp_slowtmr+0x2dc>)
 8004486:	f003 fbaf 	bl	8007be8 <iprintf>
        prev->next = pcb->next;
 800448a:	68e3      	ldr	r3, [r4, #12]
 800448c:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 8004490:	b14d      	cbz	r5, 80044a6 <tcp_slowtmr+0x1b2>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8004492:	8b23      	ldrh	r3, [r4, #24]
 8004494:	4622      	mov	r2, r4
 8004496:	9301      	str	r3, [sp, #4]
 8004498:	8ae3      	ldrh	r3, [r4, #22]
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	1d23      	adds	r3, r4, #4
 800449e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80044a0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80044a2:	f002 f9c1 	bl	8006828 <tcp_rst>
      err_arg = pcb->callback_arg;
 80044a6:	6923      	ldr	r3, [r4, #16]
      memp_free(MEMP_TCP_PCB, pcb2);
 80044a8:	4621      	mov	r1, r4
 80044aa:	2001      	movs	r0, #1
      pcb = pcb->next;
 80044ac:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 80044ae:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 80044b0:	f7ff f9a6 	bl	8003800 <memp_free>
      tcp_active_pcbs_changed = 0;
 80044b4:	2200      	movs	r2, #0
 80044b6:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80044ba:	f1bb 0f00 	cmp.w	fp, #0
 80044be:	d004      	beq.n	80044ca <tcp_slowtmr+0x1d6>
 80044c0:	9b03      	ldr	r3, [sp, #12]
 80044c2:	f06f 010c 	mvn.w	r1, #12
 80044c6:	4618      	mov	r0, r3
 80044c8:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 80044ca:	f89a 3000 	ldrb.w	r3, [sl]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f43f af56 	beq.w	8004380 <tcp_slowtmr+0x8c>
 80044d4:	e71c      	b.n	8004310 <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80044d6:	4620      	mov	r0, r4
 80044d8:	f002 fa96 	bl	8006a08 <tcp_zero_window_probe>
 80044dc:	2800      	cmp	r0, #0
 80044de:	f47f af75 	bne.w	80043cc <tcp_slowtmr+0xd8>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80044e2:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 80044e6:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80044ea:	2b06      	cmp	r3, #6
 80044ec:	f63f af6e 	bhi.w	80043cc <tcp_slowtmr+0xd8>
              pcb->persist_backoff++;
 80044f0:	3301      	adds	r3, #1
 80044f2:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80044f6:	e769      	b.n	80043cc <tcp_slowtmr+0xd8>
        if (pcb->rtime >= 0) {
 80044f8:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80044fc:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 80044fe:	bfa4      	itt	ge
 8004500:	3301      	addge	r3, #1
 8004502:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8004504:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004506:	2b00      	cmp	r3, #0
 8004508:	f43f af60 	beq.w	80043cc <tcp_slowtmr+0xd8>
 800450c:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8004510:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8004514:	4298      	cmp	r0, r3
 8004516:	f6ff af59 	blt.w	80043cc <tcp_slowtmr+0xd8>
          if (pcb->state != SYN_SENT) {
 800451a:	2902      	cmp	r1, #2
 800451c:	d00a      	beq.n	8004534 <tcp_slowtmr+0x240>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800451e:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8004522:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8004526:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800452a:	492e      	ldr	r1, [pc, #184]	; (80045e4 <tcp_slowtmr+0x2f0>)
 800452c:	5c8a      	ldrb	r2, [r1, r2]
 800452e:	4093      	lsls	r3, r2
 8004530:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8004534:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8004536:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800453a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          tcp_rexmit_rto(pcb);
 800453c:	4620      	mov	r0, r4
          pcb->rtime = 0;
 800453e:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8004540:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          pcb->cwnd = pcb->mss;
 8004544:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 8004548:	4293      	cmp	r3, r2
 800454a:	bf28      	it	cs
 800454c:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800454e:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 8004550:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8004552:	b292      	uxth	r2, r2
          pcb->ssthresh = eff_wnd >> 1;
 8004554:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8004558:	4293      	cmp	r3, r2
            pcb->ssthresh = (pcb->mss << 1);
 800455a:	bf38      	it	cc
 800455c:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8004560:	f002 f9bc 	bl	80068dc <tcp_rexmit_rto>
 8004564:	e734      	b.n	80043d0 <tcp_slowtmr+0xdc>
      ++pcb_remove;
 8004566:	f04f 0b01 	mov.w	fp, #1
 800456a:	e731      	b.n	80043d0 <tcp_slowtmr+0xdc>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800456c:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8004570:	4a1d      	ldr	r2, [pc, #116]	; (80045e8 <tcp_slowtmr+0x2f4>)
 8004572:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 8004576:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800457a:	4299      	cmp	r1, r3
 800457c:	d908      	bls.n	8004590 <tcp_slowtmr+0x29c>
        err = tcp_keepalive(pcb);
 800457e:	4620      	mov	r0, r4
 8004580:	f002 fa18 	bl	80069b4 <tcp_keepalive>
        if (err == ERR_OK) {
 8004584:	b920      	cbnz	r0, 8004590 <tcp_slowtmr+0x29c>
          pcb->keep_cnt_sent++;
 8004586:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800458a:	3301      	adds	r3, #1
 800458c:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8004590:	2500      	movs	r5, #0
 8004592:	e74a      	b.n	800442a <tcp_slowtmr+0x136>
    if (pcb->state == LAST_ACK) {
 8004594:	2b09      	cmp	r3, #9
 8004596:	f47f af61 	bne.w	800445c <tcp_slowtmr+0x168>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800459a:	6833      	ldr	r3, [r6, #0]
 800459c:	6a22      	ldr	r2, [r4, #32]
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	2bf0      	cmp	r3, #240	; 0xf0
 80045a2:	e75a      	b.n	800445a <tcp_slowtmr+0x166>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80045a4:	429c      	cmp	r4, r3
 80045a6:	d006      	beq.n	80045b6 <tcp_slowtmr+0x2c2>
 80045a8:	464b      	mov	r3, r9
 80045aa:	f240 428d 	movw	r2, #1165	; 0x48d
 80045ae:	490f      	ldr	r1, [pc, #60]	; (80045ec <tcp_slowtmr+0x2f8>)
 80045b0:	4807      	ldr	r0, [pc, #28]	; (80045d0 <tcp_slowtmr+0x2dc>)
 80045b2:	f003 fb19 	bl	8007be8 <iprintf>
        tcp_active_pcbs = pcb->next;
 80045b6:	68e3      	ldr	r3, [r4, #12]
 80045b8:	603b      	str	r3, [r7, #0]
 80045ba:	e769      	b.n	8004490 <tcp_slowtmr+0x19c>
 80045bc:	2000374c 	.word	0x2000374c
 80045c0:	200001c2 	.word	0x200001c2
 80045c4:	20003748 	.word	0x20003748
 80045c8:	20003758 	.word	0x20003758
 80045cc:	08009b0a 	.word	0x08009b0a
 80045d0:	08008f43 	.word	0x08008f43
 80045d4:	08009b34 	.word	0x08009b34
 80045d8:	08009b5e 	.word	0x08009b5e
 80045dc:	08009abc 	.word	0x08009abc
 80045e0:	08009b8b 	.word	0x08009b8b
 80045e4:	080099f4 	.word	0x080099f4
 80045e8:	000124f8 	.word	0x000124f8
 80045ec:	08009bb6 	.word	0x08009bb6
 80045f0:	20003744 	.word	0x20003744
 80045f4:	08009a1a 	.word	0x08009a1a
 80045f8:	08009be0 	.word	0x08009be0
      ++prev->polltmr;
 80045fc:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80045fe:	7f22      	ldrb	r2, [r4, #28]
      ++prev->polltmr;
 8004600:	3301      	adds	r3, #1
      pcb = pcb->next;
 8004602:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8004604:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8004606:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8004608:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800460a:	f63f aeba 	bhi.w	8004382 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 800460e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 8004612:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 8004616:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 800461a:	b173      	cbz	r3, 800463a <tcp_slowtmr+0x346>
 800461c:	4621      	mov	r1, r4
 800461e:	6920      	ldr	r0, [r4, #16]
 8004620:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8004622:	f89a 3000 	ldrb.w	r3, [sl]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f47f ae72 	bne.w	8004310 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 800462c:	2800      	cmp	r0, #0
 800462e:	f47f aea8 	bne.w	8004382 <tcp_slowtmr+0x8e>
          tcp_output(prev);
 8004632:	4620      	mov	r0, r4
 8004634:	f001 ff7a 	bl	800652c <tcp_output>
 8004638:	e6a3      	b.n	8004382 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 800463a:	4658      	mov	r0, fp
 800463c:	e7f1      	b.n	8004622 <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800463e:	7d2b      	ldrb	r3, [r5, #20]
 8004640:	2b0a      	cmp	r3, #10
 8004642:	d006      	beq.n	8004652 <tcp_slowtmr+0x35e>
 8004644:	4643      	mov	r3, r8
 8004646:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800464a:	4651      	mov	r1, sl
 800464c:	4648      	mov	r0, r9
 800464e:	f003 facb 	bl	8007be8 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8004652:	6833      	ldr	r3, [r6, #0]
 8004654:	6a2a      	ldr	r2, [r5, #32]
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	2bf0      	cmp	r3, #240	; 0xf0
 800465a:	d816      	bhi.n	800468a <tcp_slowtmr+0x396>
      pcb = pcb->next;
 800465c:	462c      	mov	r4, r5
 800465e:	68ed      	ldr	r5, [r5, #12]
 8004660:	e665      	b.n	800432e <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	429d      	cmp	r5, r3
 8004666:	d106      	bne.n	8004676 <tcp_slowtmr+0x382>
 8004668:	4643      	mov	r3, r8
 800466a:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800466e:	4910      	ldr	r1, [pc, #64]	; (80046b0 <tcp_slowtmr+0x3bc>)
 8004670:	4648      	mov	r0, r9
 8004672:	f003 fab9 	bl	8007be8 <iprintf>
        prev->next = pcb->next;
 8004676:	68eb      	ldr	r3, [r5, #12]
 8004678:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800467a:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800467e:	4629      	mov	r1, r5
 8004680:	2001      	movs	r0, #1
 8004682:	f7ff f8bd 	bl	8003800 <memp_free>
      pcb = pcb->next;
 8004686:	465d      	mov	r5, fp
 8004688:	e651      	b.n	800432e <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 800468a:	4628      	mov	r0, r5
 800468c:	f7ff fe12 	bl	80042b4 <tcp_pcb_purge>
      if (prev != NULL) {
 8004690:	2c00      	cmp	r4, #0
 8004692:	d1e6      	bne.n	8004662 <tcp_slowtmr+0x36e>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	429d      	cmp	r5, r3
 8004698:	d006      	beq.n	80046a8 <tcp_slowtmr+0x3b4>
 800469a:	4643      	mov	r3, r8
 800469c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 80046a0:	4904      	ldr	r1, [pc, #16]	; (80046b4 <tcp_slowtmr+0x3c0>)
 80046a2:	4648      	mov	r0, r9
 80046a4:	f003 faa0 	bl	8007be8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80046a8:	68eb      	ldr	r3, [r5, #12]
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	e7e5      	b.n	800467a <tcp_slowtmr+0x386>
 80046ae:	bf00      	nop
 80046b0:	08009c0f 	.word	0x08009c0f
 80046b4:	08009c36 	.word	0x08009c36

080046b8 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 80046b8:	6803      	ldr	r3, [r0, #0]
 80046ba:	428b      	cmp	r3, r1
{
 80046bc:	b510      	push	{r4, lr}
 80046be:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 80046c0:	d137      	bne.n	8004732 <tcp_pcb_remove+0x7a>
 80046c2:	68cb      	ldr	r3, [r1, #12]
 80046c4:	6003      	str	r3, [r0, #0]
 80046c6:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 80046c8:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 80046ca:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 80046cc:	f7ff fdf2 	bl	80042b4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80046d0:	7d23      	ldrb	r3, [r4, #20]
 80046d2:	2b0a      	cmp	r3, #10
 80046d4:	d00a      	beq.n	80046ec <tcp_pcb_remove+0x34>
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d008      	beq.n	80046ec <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 80046da:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 80046dc:	07da      	lsls	r2, r3, #31
 80046de:	d505      	bpl.n	80046ec <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 80046e0:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 80046e4:	4620      	mov	r0, r4
    pcb->flags |= TF_ACK_NOW;
 80046e6:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 80046e8:	f001 ff20 	bl	800652c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80046ec:	7d23      	ldrb	r3, [r4, #20]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d01a      	beq.n	8004728 <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80046f2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80046f4:	b133      	cbz	r3, 8004704 <tcp_pcb_remove+0x4c>
 80046f6:	4b13      	ldr	r3, [pc, #76]	; (8004744 <tcp_pcb_remove+0x8c>)
 80046f8:	f240 7253 	movw	r2, #1875	; 0x753
 80046fc:	4912      	ldr	r1, [pc, #72]	; (8004748 <tcp_pcb_remove+0x90>)
 80046fe:	4813      	ldr	r0, [pc, #76]	; (800474c <tcp_pcb_remove+0x94>)
 8004700:	f003 fa72 	bl	8007be8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8004704:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004706:	b133      	cbz	r3, 8004716 <tcp_pcb_remove+0x5e>
 8004708:	4b0e      	ldr	r3, [pc, #56]	; (8004744 <tcp_pcb_remove+0x8c>)
 800470a:	f240 7254 	movw	r2, #1876	; 0x754
 800470e:	4910      	ldr	r1, [pc, #64]	; (8004750 <tcp_pcb_remove+0x98>)
 8004710:	480e      	ldr	r0, [pc, #56]	; (800474c <tcp_pcb_remove+0x94>)
 8004712:	f003 fa69 	bl	8007be8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8004716:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004718:	b133      	cbz	r3, 8004728 <tcp_pcb_remove+0x70>
 800471a:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <tcp_pcb_remove+0x8c>)
 800471c:	f240 7256 	movw	r2, #1878	; 0x756
 8004720:	490c      	ldr	r1, [pc, #48]	; (8004754 <tcp_pcb_remove+0x9c>)
 8004722:	480a      	ldr	r0, [pc, #40]	; (800474c <tcp_pcb_remove+0x94>)
 8004724:	f003 fa60 	bl	8007be8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8004728:	2300      	movs	r3, #0
 800472a:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800472c:	82e3      	strh	r3, [r4, #22]
 800472e:	bd10      	pop	{r4, pc}
 8004730:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0c7      	beq.n	80046c6 <tcp_pcb_remove+0xe>
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	4294      	cmp	r4, r2
 800473a:	d1f9      	bne.n	8004730 <tcp_pcb_remove+0x78>
 800473c:	68e2      	ldr	r2, [r4, #12]
 800473e:	60da      	str	r2, [r3, #12]
 8004740:	e7c1      	b.n	80046c6 <tcp_pcb_remove+0xe>
 8004742:	bf00      	nop
 8004744:	08009a1a 	.word	0x08009a1a
 8004748:	08009a74 	.word	0x08009a74
 800474c:	08008f43 	.word	0x08008f43
 8004750:	08009a8c 	.word	0x08009a8c
 8004754:	08009aa5 	.word	0x08009aa5

08004758 <tcp_close_shutdown>:
{
 8004758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800475a:	7d03      	ldrb	r3, [r0, #20]
 800475c:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800475e:	2900      	cmp	r1, #0
 8004760:	d049      	beq.n	80047f6 <tcp_close_shutdown+0x9e>
 8004762:	2b04      	cmp	r3, #4
 8004764:	d001      	beq.n	800476a <tcp_close_shutdown+0x12>
 8004766:	2b07      	cmp	r3, #7
 8004768:	d145      	bne.n	80047f6 <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800476a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800476c:	b91a      	cbnz	r2, 8004776 <tcp_close_shutdown+0x1e>
 800476e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004770:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 8004774:	d03f      	beq.n	80047f6 <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8004776:	7ea3      	ldrb	r3, [r4, #26]
 8004778:	06db      	lsls	r3, r3, #27
 800477a:	d406      	bmi.n	800478a <tcp_close_shutdown+0x32>
 800477c:	4b3f      	ldr	r3, [pc, #252]	; (800487c <tcp_close_shutdown+0x124>)
 800477e:	f240 120f 	movw	r2, #271	; 0x10f
 8004782:	493f      	ldr	r1, [pc, #252]	; (8004880 <tcp_close_shutdown+0x128>)
 8004784:	483f      	ldr	r0, [pc, #252]	; (8004884 <tcp_close_shutdown+0x12c>)
 8004786:	f003 fa2f 	bl	8007be8 <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800478a:	8b23      	ldrh	r3, [r4, #24]
 800478c:	4622      	mov	r2, r4
 800478e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004790:	9301      	str	r3, [sp, #4]
 8004792:	8ae3      	ldrh	r3, [r4, #22]
 8004794:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	1d23      	adds	r3, r4, #4
 800479a:	f002 f845 	bl	8006828 <tcp_rst>
      tcp_pcb_purge(pcb);
 800479e:	4620      	mov	r0, r4
 80047a0:	f7ff fd88 	bl	80042b4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80047a4:	4a38      	ldr	r2, [pc, #224]	; (8004888 <tcp_close_shutdown+0x130>)
 80047a6:	6813      	ldr	r3, [r2, #0]
 80047a8:	429c      	cmp	r4, r3
 80047aa:	d115      	bne.n	80047d8 <tcp_close_shutdown+0x80>
 80047ac:	68e3      	ldr	r3, [r4, #12]
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	2300      	movs	r3, #0
 80047b2:	2201      	movs	r2, #1
 80047b4:	60e3      	str	r3, [r4, #12]
 80047b6:	4b35      	ldr	r3, [pc, #212]	; (800488c <tcp_close_shutdown+0x134>)
 80047b8:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80047ba:	7d23      	ldrb	r3, [r4, #20]
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d113      	bne.n	80047e8 <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 80047c0:	230a      	movs	r3, #10
 80047c2:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80047c4:	4b32      	ldr	r3, [pc, #200]	; (8004890 <tcp_close_shutdown+0x138>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	601c      	str	r4, [r3, #0]
 80047ca:	60e2      	str	r2, [r4, #12]
 80047cc:	f002 f9ce 	bl	8006b6c <tcp_timer_needed>
}
 80047d0:	2000      	movs	r0, #0
 80047d2:	b003      	add	sp, #12
 80047d4:	bd30      	pop	{r4, r5, pc}
 80047d6:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0e9      	beq.n	80047b0 <tcp_close_shutdown+0x58>
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	4294      	cmp	r4, r2
 80047e0:	d1f9      	bne.n	80047d6 <tcp_close_shutdown+0x7e>
 80047e2:	68e2      	ldr	r2, [r4, #12]
 80047e4:	60da      	str	r2, [r3, #12]
 80047e6:	e7e3      	b.n	80047b0 <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 80047e8:	4b2a      	ldr	r3, [pc, #168]	; (8004894 <tcp_close_shutdown+0x13c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	429c      	cmp	r4, r3
 80047ee:	d117      	bne.n	8004820 <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 80047f0:	f001 fd04 	bl	80061fc <tcp_trigger_input_pcb_close>
 80047f4:	e7ec      	b.n	80047d0 <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d020      	beq.n	800483c <tcp_close_shutdown+0xe4>
 80047fa:	d307      	bcc.n	800480c <tcp_close_shutdown+0xb4>
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d033      	beq.n	8004868 <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 8004800:	4620      	mov	r0, r4
}
 8004802:	b003      	add	sp, #12
 8004804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 8004808:	f7ff bc8c 	b.w	8004124 <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 800480c:	8ae3      	ldrh	r3, [r4, #22]
 800480e:	b13b      	cbz	r3, 8004820 <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8004810:	4a21      	ldr	r2, [pc, #132]	; (8004898 <tcp_close_shutdown+0x140>)
 8004812:	6813      	ldr	r3, [r2, #0]
 8004814:	429c      	cmp	r4, r3
 8004816:	d109      	bne.n	800482c <tcp_close_shutdown+0xd4>
 8004818:	68e3      	ldr	r3, [r4, #12]
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	2300      	movs	r3, #0
 800481e:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 8004820:	4621      	mov	r1, r4
 8004822:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 8004824:	f7fe ffec 	bl	8003800 <memp_free>
    break;
 8004828:	e7d2      	b.n	80047d0 <tcp_close_shutdown+0x78>
 800482a:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0f5      	beq.n	800481c <tcp_close_shutdown+0xc4>
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	4294      	cmp	r4, r2
 8004834:	d1f9      	bne.n	800482a <tcp_close_shutdown+0xd2>
 8004836:	68e2      	ldr	r2, [r4, #12]
 8004838:	60da      	str	r2, [r3, #12]
 800483a:	e7ef      	b.n	800481c <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800483c:	4917      	ldr	r1, [pc, #92]	; (800489c <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 800483e:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8004840:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8004844:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004846:	b94a      	cbnz	r2, 800485c <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004848:	3301      	adds	r3, #1
 800484a:	2b04      	cmp	r3, #4
 800484c:	d1f8      	bne.n	8004840 <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800484e:	4621      	mov	r1, r4
 8004850:	4813      	ldr	r0, [pc, #76]	; (80048a0 <tcp_close_shutdown+0x148>)
 8004852:	f7ff ff31 	bl	80046b8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8004856:	4621      	mov	r1, r4
 8004858:	2002      	movs	r0, #2
 800485a:	e7e3      	b.n	8004824 <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 800485c:	6f95      	ldr	r5, [r2, #120]	; 0x78
 800485e:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 8004860:	bf08      	it	eq
 8004862:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004864:	68d2      	ldr	r2, [r2, #12]
 8004866:	e7ee      	b.n	8004846 <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8004868:	4621      	mov	r1, r4
 800486a:	4807      	ldr	r0, [pc, #28]	; (8004888 <tcp_close_shutdown+0x130>)
 800486c:	f7ff ff24 	bl	80046b8 <tcp_pcb_remove>
 8004870:	2001      	movs	r0, #1
 8004872:	4b06      	ldr	r3, [pc, #24]	; (800488c <tcp_close_shutdown+0x134>)
    memp_free(MEMP_TCP_PCB, pcb);
 8004874:	4621      	mov	r1, r4
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8004876:	7018      	strb	r0, [r3, #0]
 8004878:	e7d4      	b.n	8004824 <tcp_close_shutdown+0xcc>
 800487a:	bf00      	nop
 800487c:	08009a1a 	.word	0x08009a1a
 8004880:	08009a01 	.word	0x08009a01
 8004884:	08008f43 	.word	0x08008f43
 8004888:	20003748 	.word	0x20003748
 800488c:	20003744 	.word	0x20003744
 8004890:	20003758 	.word	0x20003758
 8004894:	2000375c 	.word	0x2000375c
 8004898:	20003754 	.word	0x20003754
 800489c:	08009a64 	.word	0x08009a64
 80048a0:	20003750 	.word	0x20003750

080048a4 <tcp_close>:
  if (pcb->state != LISTEN) {
 80048a4:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 80048a6:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 80048a8:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 80048aa:	bf1e      	ittt	ne
 80048ac:	7e83      	ldrbne	r3, [r0, #26]
 80048ae:	f043 0310 	orrne.w	r3, r3, #16
 80048b2:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 80048b4:	f7ff bf50 	b.w	8004758 <tcp_close_shutdown>

080048b8 <tcp_recv_null>:
{
 80048b8:	b510      	push	{r4, lr}
 80048ba:	4608      	mov	r0, r1
  if (p != NULL) {
 80048bc:	4614      	mov	r4, r2
 80048be:	b13a      	cbz	r2, 80048d0 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 80048c0:	8911      	ldrh	r1, [r2, #8]
 80048c2:	f7ff fc8d 	bl	80041e0 <tcp_recved>
    pbuf_free(p);
 80048c6:	4620      	mov	r0, r4
 80048c8:	f7ff f8e8 	bl	8003a9c <pbuf_free>
}
 80048cc:	2000      	movs	r0, #0
 80048ce:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1fb      	bne.n	80048cc <tcp_recv_null+0x14>
}
 80048d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 80048d8:	f7ff bfe4 	b.w	80048a4 <tcp_close>

080048dc <tcp_process_refused_data>:
{
 80048dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 80048de:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 80048e0:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80048e2:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
{
 80048e6:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 80048e8:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80048ea:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80048ec:	b1dd      	cbz	r5, 8004926 <tcp_process_refused_data+0x4a>
 80048ee:	4601      	mov	r1, r0
 80048f0:	4632      	mov	r2, r6
 80048f2:	6900      	ldr	r0, [r0, #16]
 80048f4:	47a8      	blx	r5
 80048f6:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80048f8:	b9e0      	cbnz	r0, 8004934 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80048fa:	06bb      	lsls	r3, r7, #26
 80048fc:	d511      	bpl.n	8004922 <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80048fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8004900:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8004904:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8004908:	bf1c      	itt	ne
 800490a:	3301      	addne	r3, #1
 800490c:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800490e:	b146      	cbz	r6, 8004922 <tcp_process_refused_data+0x46>
 8004910:	2300      	movs	r3, #0
 8004912:	4621      	mov	r1, r4
 8004914:	6920      	ldr	r0, [r4, #16]
 8004916:	461a      	mov	r2, r3
 8004918:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800491a:	300d      	adds	r0, #13
 800491c:	d101      	bne.n	8004922 <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 800491e:	f06f 050c 	mvn.w	r5, #12
}
 8004922:	4628      	mov	r0, r5
 8004924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8004926:	4601      	mov	r1, r0
 8004928:	462b      	mov	r3, r5
 800492a:	4632      	mov	r2, r6
 800492c:	4628      	mov	r0, r5
 800492e:	f7ff ffc3 	bl	80048b8 <tcp_recv_null>
 8004932:	e7e0      	b.n	80048f6 <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 8004934:	f110 050d 	adds.w	r5, r0, #13
 8004938:	d0f1      	beq.n	800491e <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 800493a:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800493c:	f06f 0504 	mvn.w	r5, #4
 8004940:	e7ef      	b.n	8004922 <tcp_process_refused_data+0x46>
	...

08004944 <tcp_fasttmr>:
{
 8004944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8004948:	4d1b      	ldr	r5, [pc, #108]	; (80049b8 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 800494a:	4f1c      	ldr	r7, [pc, #112]	; (80049bc <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 800494c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800494e:	4e1c      	ldr	r6, [pc, #112]	; (80049c0 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8004950:	3301      	adds	r3, #1
 8004952:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8004954:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8004956:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 800495a:	b90c      	cbnz	r4, 8004960 <tcp_fasttmr+0x1c>
}
 800495c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8004960:	782b      	ldrb	r3, [r5, #0]
 8004962:	7f62      	ldrb	r2, [r4, #29]
 8004964:	429a      	cmp	r2, r3
 8004966:	d024      	beq.n	80049b2 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8004968:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 800496a:	7ea3      	ldrb	r3, [r4, #26]
 800496c:	07d9      	lsls	r1, r3, #31
 800496e:	d509      	bpl.n	8004984 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8004970:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8004974:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8004976:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8004978:	f001 fdd8 	bl	800652c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800497c:	7ea3      	ldrb	r3, [r4, #26]
 800497e:	f023 0303 	bic.w	r3, r3, #3
 8004982:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8004984:	7ea3      	ldrb	r3, [r4, #26]
 8004986:	071a      	lsls	r2, r3, #28
 8004988:	d505      	bpl.n	8004996 <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 800498a:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800498e:	4620      	mov	r0, r4
        pcb->flags &= ~(TF_CLOSEPEND);
 8004990:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8004992:	f7ff fbc7 	bl	8004124 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8004996:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8004998:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800499c:	b13b      	cbz	r3, 80049ae <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 800499e:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 80049a0:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 80049a4:	f7ff ff9a 	bl	80048dc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80049a8:	7833      	ldrb	r3, [r6, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1d2      	bne.n	8004954 <tcp_fasttmr+0x10>
{
 80049ae:	464c      	mov	r4, r9
 80049b0:	e7d3      	b.n	800495a <tcp_fasttmr+0x16>
      pcb = pcb->next;
 80049b2:	f8d4 900c 	ldr.w	r9, [r4, #12]
 80049b6:	e7fa      	b.n	80049ae <tcp_fasttmr+0x6a>
 80049b8:	200001c2 	.word	0x200001c2
 80049bc:	20003748 	.word	0x20003748
 80049c0:	20003744 	.word	0x20003744

080049c4 <tcp_tmr>:
{
 80049c4:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80049c6:	f7ff ffbd 	bl	8004944 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80049ca:	4a06      	ldr	r2, [pc, #24]	; (80049e4 <tcp_tmr+0x20>)
 80049cc:	7813      	ldrb	r3, [r2, #0]
 80049ce:	3301      	adds	r3, #1
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	7013      	strb	r3, [r2, #0]
 80049d4:	07db      	lsls	r3, r3, #31
 80049d6:	d503      	bpl.n	80049e0 <tcp_tmr+0x1c>
}
 80049d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 80049dc:	f7ff bc8a 	b.w	80042f4 <tcp_slowtmr>
 80049e0:	bd08      	pop	{r3, pc}
 80049e2:	bf00      	nop
 80049e4:	200001c1 	.word	0x200001c1

080049e8 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80049e8:	7d03      	ldrb	r3, [r0, #20]
 80049ea:	2b01      	cmp	r3, #1
{
 80049ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80049f0:	4604      	mov	r4, r0
 80049f2:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80049f4:	d106      	bne.n	8004a04 <tcp_abandon+0x1c>
 80049f6:	4b30      	ldr	r3, [pc, #192]	; (8004ab8 <tcp_abandon+0xd0>)
 80049f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80049fc:	492f      	ldr	r1, [pc, #188]	; (8004abc <tcp_abandon+0xd4>)
 80049fe:	4830      	ldr	r0, [pc, #192]	; (8004ac0 <tcp_abandon+0xd8>)
 8004a00:	f003 f8f2 	bl	8007be8 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8004a04:	7d23      	ldrb	r3, [r4, #20]
 8004a06:	2b0a      	cmp	r3, #10
 8004a08:	d10a      	bne.n	8004a20 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	482d      	ldr	r0, [pc, #180]	; (8004ac4 <tcp_abandon+0xdc>)
 8004a0e:	f7ff fe53 	bl	80046b8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8004a12:	4621      	mov	r1, r4
 8004a14:	2001      	movs	r0, #1
}
 8004a16:	b002      	add	sp, #8
 8004a18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 8004a1c:	f7fe bef0 	b.w	8003800 <memp_free>
    seqno = pcb->snd_nxt;
 8004a20:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8004a24:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8004a28:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8004a2c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8004a30:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 8004a32:	b99b      	cbnz	r3, 8004a5c <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 8004a34:	b13d      	cbz	r5, 8004a46 <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8004a36:	4a24      	ldr	r2, [pc, #144]	; (8004ac8 <tcp_abandon+0xe0>)
 8004a38:	6813      	ldr	r3, [r2, #0]
 8004a3a:	429c      	cmp	r4, r3
 8004a3c:	d106      	bne.n	8004a4c <tcp_abandon+0x64>
 8004a3e:	68e3      	ldr	r3, [r4, #12]
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	2500      	movs	r5, #0
 8004a44:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8004a46:	462e      	mov	r6, r5
 8004a48:	e00f      	b.n	8004a6a <tcp_abandon+0x82>
 8004a4a:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0f8      	beq.n	8004a42 <tcp_abandon+0x5a>
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	4294      	cmp	r4, r2
 8004a54:	d1f9      	bne.n	8004a4a <tcp_abandon+0x62>
 8004a56:	68e2      	ldr	r2, [r4, #12]
 8004a58:	60da      	str	r2, [r3, #12]
 8004a5a:	e7f2      	b.n	8004a42 <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	481b      	ldr	r0, [pc, #108]	; (8004acc <tcp_abandon+0xe4>)
 8004a60:	f7ff fe2a 	bl	80046b8 <tcp_pcb_remove>
 8004a64:	2201      	movs	r2, #1
 8004a66:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <tcp_abandon+0xe8>)
 8004a68:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8004a6a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004a6c:	b108      	cbz	r0, 8004a72 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 8004a6e:	f7ff fc03 	bl	8004278 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8004a72:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004a74:	b108      	cbz	r0, 8004a7a <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 8004a76:	f7ff fbff 	bl	8004278 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8004a7a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004a7c:	b108      	cbz	r0, 8004a82 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 8004a7e:	f7ff fbfb 	bl	8004278 <tcp_segs_free>
    if (send_rst) {
 8004a82:	b146      	cbz	r6, 8004a96 <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8004a84:	8b23      	ldrh	r3, [r4, #24]
 8004a86:	4622      	mov	r2, r4
 8004a88:	9500      	str	r5, [sp, #0]
 8004a8a:	4651      	mov	r1, sl
 8004a8c:	9301      	str	r3, [sp, #4]
 8004a8e:	4648      	mov	r0, r9
 8004a90:	1d23      	adds	r3, r4, #4
 8004a92:	f001 fec9 	bl	8006828 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8004a96:	4621      	mov	r1, r4
 8004a98:	2001      	movs	r0, #1
 8004a9a:	f7fe feb1 	bl	8003800 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8004a9e:	b13f      	cbz	r7, 8004ab0 <tcp_abandon+0xc8>
 8004aa0:	f06f 010c 	mvn.w	r1, #12
 8004aa4:	4640      	mov	r0, r8
 8004aa6:	463b      	mov	r3, r7
}
 8004aa8:	b002      	add	sp, #8
 8004aaa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8004aae:	4718      	bx	r3
}
 8004ab0:	b002      	add	sp, #8
 8004ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab6:	bf00      	nop
 8004ab8:	08009a1a 	.word	0x08009a1a
 8004abc:	080099c3 	.word	0x080099c3
 8004ac0:	08008f43 	.word	0x08008f43
 8004ac4:	20003758 	.word	0x20003758
 8004ac8:	20003754 	.word	0x20003754
 8004acc:	20003748 	.word	0x20003748
 8004ad0:	20003744 	.word	0x20003744

08004ad4 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	f7ff bf87 	b.w	80049e8 <tcp_abandon>

08004ada <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8004ada:	b538      	push	{r3, r4, r5, lr}
 8004adc:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8004ade:	b901      	cbnz	r1, 8004ae2 <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8004ae0:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8004ae2:	680a      	ldr	r2, [r1, #0]
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	68cc      	ldr	r4, [r1, #12]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d102      	bne.n	8004af2 <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 8004aec:	4608      	mov	r0, r1
 8004aee:	f7ff fff1 	bl	8004ad4 <tcp_abort>
      pcb = pcb->next;
 8004af2:	4621      	mov	r1, r4
 8004af4:	e7f3      	b.n	8004ade <tcp_netif_ip_addr_changed_pcblist+0x4>
	...

08004af8 <tcp_kill_state>:
{
 8004af8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8004afa:	f1a0 0308 	sub.w	r3, r0, #8
{
 8004afe:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d906      	bls.n	8004b12 <tcp_kill_state+0x1a>
 8004b04:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <tcp_kill_state+0x4c>)
 8004b06:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004b0a:	490f      	ldr	r1, [pc, #60]	; (8004b48 <tcp_kill_state+0x50>)
 8004b0c:	480f      	ldr	r0, [pc, #60]	; (8004b4c <tcp_kill_state+0x54>)
 8004b0e:	f003 f86b 	bl	8007be8 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <tcp_kill_state+0x58>)
  inactivity = 0;
 8004b14:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004b16:	6819      	ldr	r1, [r3, #0]
  inactive = NULL;
 8004b18:	4610      	mov	r0, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004b1a:	4b0e      	ldr	r3, [pc, #56]	; (8004b54 <tcp_kill_state+0x5c>)
 8004b1c:	681d      	ldr	r5, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004b1e:	b921      	cbnz	r1, 8004b2a <tcp_kill_state+0x32>
  if (inactive != NULL) {
 8004b20:	b170      	cbz	r0, 8004b40 <tcp_kill_state+0x48>
}
 8004b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 8004b26:	f7ff bf5f 	b.w	80049e8 <tcp_abandon>
    if (pcb->state == state) {
 8004b2a:	7d0b      	ldrb	r3, [r1, #20]
 8004b2c:	42a3      	cmp	r3, r4
 8004b2e:	d105      	bne.n	8004b3c <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004b30:	6a0b      	ldr	r3, [r1, #32]
 8004b32:	1aeb      	subs	r3, r5, r3
 8004b34:	429a      	cmp	r2, r3
 8004b36:	bf9c      	itt	ls
 8004b38:	461a      	movls	r2, r3
 8004b3a:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004b3c:	68c9      	ldr	r1, [r1, #12]
 8004b3e:	e7ee      	b.n	8004b1e <tcp_kill_state+0x26>
 8004b40:	bd38      	pop	{r3, r4, r5, pc}
 8004b42:	bf00      	nop
 8004b44:	08009a1a 	.word	0x08009a1a
 8004b48:	08009a55 	.word	0x08009a55
 8004b4c:	08008f43 	.word	0x08008f43
 8004b50:	20003748 	.word	0x20003748
 8004b54:	2000374c 	.word	0x2000374c

08004b58 <tcp_alloc>:
{
 8004b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5a:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	f7fe fe33 	bl	80037c8 <memp_malloc>
 8004b62:	4d3b      	ldr	r5, [pc, #236]	; (8004c50 <tcp_alloc+0xf8>)
  if (pcb == NULL) {
 8004b64:	4604      	mov	r4, r0
 8004b66:	bb90      	cbnz	r0, 8004bce <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8004b68:	4b3a      	ldr	r3, [pc, #232]	; (8004c54 <tcp_alloc+0xfc>)
  inactivity = 0;
 8004b6a:	4621      	mov	r1, r4
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004b6c:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d158      	bne.n	8004c26 <tcp_alloc+0xce>
  if (inactive != NULL) {
 8004b74:	b114      	cbz	r4, 8004b7c <tcp_alloc+0x24>
    tcp_abort(inactive);
 8004b76:	4620      	mov	r0, r4
 8004b78:	f7ff ffac 	bl	8004ad4 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004b7c:	2001      	movs	r0, #1
 8004b7e:	f7fe fe23 	bl	80037c8 <memp_malloc>
    if (pcb == NULL) {
 8004b82:	4604      	mov	r4, r0
 8004b84:	bb18      	cbnz	r0, 8004bce <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 8004b86:	2009      	movs	r0, #9
 8004b88:	f7ff ffb6 	bl	8004af8 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	f7fe fe1b 	bl	80037c8 <memp_malloc>
      if (pcb == NULL) {
 8004b92:	4604      	mov	r4, r0
 8004b94:	b9d8      	cbnz	r0, 8004bce <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 8004b96:	2008      	movs	r0, #8
 8004b98:	f7ff ffae 	bl	8004af8 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	f7fe fe13 	bl	80037c8 <memp_malloc>
        if (pcb == NULL) {
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	b998      	cbnz	r0, 8004bce <tcp_alloc+0x76>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8004ba6:	f016 0f80 	tst.w	r6, #128	; 0x80
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004baa:	4b2b      	ldr	r3, [pc, #172]	; (8004c58 <tcp_alloc+0x100>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004bac:	f8d5 e000 	ldr.w	lr, [r5]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8004bb0:	bf0c      	ite	eq
 8004bb2:	4631      	moveq	r1, r6
 8004bb4:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d13c      	bne.n	8004c36 <tcp_alloc+0xde>
  if (inactive != NULL) {
 8004bbc:	b114      	cbz	r4, 8004bc4 <tcp_alloc+0x6c>
    tcp_abort(inactive);
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f7ff ff88 	bl	8004ad4 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	f7fe fdff 	bl	80037c8 <memp_malloc>
  if (pcb != NULL) {
 8004bca:	4604      	mov	r4, r0
 8004bcc:	b348      	cbz	r0, 8004c22 <tcp_alloc+0xca>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8004bce:	2298      	movs	r2, #152	; 0x98
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f003 f800 	bl	8007bd8 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8004bd8:	f44f 6206 	mov.w	r2, #2144	; 0x860
    pcb->snd_buf = TCP_SND_BUF;
 8004bdc:	f44f 6386 	mov.w	r3, #1072	; 0x430
    pcb->prio = prio;
 8004be0:	7566      	strb	r6, [r4, #21]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8004be2:	8562      	strh	r2, [r4, #42]	; 0x2a
 8004be4:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8004be6:	22ff      	movs	r2, #255	; 0xff
    pcb->snd_buf = TCP_SND_BUF;
 8004be8:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->ttl = TCP_TTL;
 8004bec:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8004bee:	f44f 7206 	mov.w	r2, #536	; 0x218
    pcb->ssthresh = TCP_SND_BUF;
 8004bf2:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->mss = INITIAL_MSS;
 8004bf6:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8004bf8:	2206      	movs	r2, #6
    pcb->recv = tcp_recv_null;
 8004bfa:	4b18      	ldr	r3, [pc, #96]	; (8004c5c <tcp_alloc+0x104>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8004bfc:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8004c00:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8004c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pcb->recv = tcp_recv_null;
 8004c06:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->rtime = -1;
 8004c0a:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8004c0c:	2201      	movs	r2, #1
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8004c0e:	4b14      	ldr	r3, [pc, #80]	; (8004c60 <tcp_alloc+0x108>)
    pcb->cwnd = 1;
 8004c10:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8004c14:	682a      	ldr	r2, [r5, #0]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8004c16:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    pcb->tmr = tcp_ticks;
 8004c1a:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8004c1c:	4a11      	ldr	r2, [pc, #68]	; (8004c64 <tcp_alloc+0x10c>)
 8004c1e:	7812      	ldrb	r2, [r2, #0]
 8004c20:	7762      	strb	r2, [r4, #29]
}
 8004c22:	4620      	mov	r0, r4
 8004c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004c26:	6a1a      	ldr	r2, [r3, #32]
 8004c28:	1a82      	subs	r2, r0, r2
 8004c2a:	428a      	cmp	r2, r1
 8004c2c:	bf24      	itt	cs
 8004c2e:	461c      	movcs	r4, r3
 8004c30:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	e79c      	b.n	8004b70 <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 8004c36:	7d5f      	ldrb	r7, [r3, #21]
 8004c38:	428f      	cmp	r7, r1
 8004c3a:	d807      	bhi.n	8004c4c <tcp_alloc+0xf4>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004c3c:	6a1a      	ldr	r2, [r3, #32]
 8004c3e:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 8004c42:	4282      	cmp	r2, r0
 8004c44:	bf22      	ittt	cs
 8004c46:	4639      	movcs	r1, r7
 8004c48:	4610      	movcs	r0, r2
 8004c4a:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	e7b3      	b.n	8004bb8 <tcp_alloc+0x60>
 8004c50:	2000374c 	.word	0x2000374c
 8004c54:	20003758 	.word	0x20003758
 8004c58:	20003748 	.word	0x20003748
 8004c5c:	080048b9 	.word	0x080048b9
 8004c60:	006ddd00 	.word	0x006ddd00
 8004c64:	200001c2 	.word	0x200001c2

08004c68 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8004c68:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <tcp_next_iss+0x10>)
 8004c6a:	4a04      	ldr	r2, [pc, #16]	; (8004c7c <tcp_next_iss+0x14>)
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	4410      	add	r0, r2
 8004c72:	6018      	str	r0, [r3, #0]
}
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000008 	.word	0x20000008
 8004c7c:	2000374c 	.word	0x2000374c

08004c80 <tcp_eff_send_mss_impl>:
{
 8004c80:	b510      	push	{r4, lr}
 8004c82:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8004c84:	4608      	mov	r0, r1
 8004c86:	f7fd fe51 	bl	800292c <ip4_route>
    if (outif == NULL) {
 8004c8a:	b130      	cbz	r0, 8004c9a <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 8004c8c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 8004c8e:	b123      	cbz	r3, 8004c9a <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8004c90:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	429c      	cmp	r4, r3
 8004c96:	bf28      	it	cs
 8004c98:	461c      	movcs	r4, r3
}
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	bd10      	pop	{r4, pc}
	...

08004ca0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	b180      	cbz	r0, 8004cca <tcp_netif_ip_addr_changed+0x2a>
 8004ca8:	6803      	ldr	r3, [r0, #0]
 8004caa:	b173      	cbz	r3, 8004cca <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8004cac:	4b0c      	ldr	r3, [pc, #48]	; (8004ce0 <tcp_netif_ip_addr_changed+0x40>)
 8004cae:	6819      	ldr	r1, [r3, #0]
 8004cb0:	f7ff ff13 	bl	8004ada <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <tcp_netif_ip_addr_changed+0x44>)
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	6819      	ldr	r1, [r3, #0]
 8004cba:	f7ff ff0e 	bl	8004ada <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8004cbe:	b125      	cbz	r5, 8004cca <tcp_netif_ip_addr_changed+0x2a>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	b113      	cbz	r3, 8004cca <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8004cc4:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <tcp_netif_ip_addr_changed+0x48>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	b903      	cbnz	r3, 8004ccc <tcp_netif_ip_addr_changed+0x2c>
 8004cca:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 8004cd0:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8004cd2:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8004cd4:	bf04      	itt	eq
 8004cd6:	6829      	ldreq	r1, [r5, #0]
 8004cd8:	6019      	streq	r1, [r3, #0]
{
 8004cda:	4613      	mov	r3, r2
 8004cdc:	e7f4      	b.n	8004cc8 <tcp_netif_ip_addr_changed+0x28>
 8004cde:	bf00      	nop
 8004ce0:	20003748 	.word	0x20003748
 8004ce4:	20003754 	.word	0x20003754
 8004ce8:	20003750 	.word	0x20003750

08004cec <tcp_oos_insert_segment>:
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8004cec:	68c3      	ldr	r3, [r0, #12]
{
 8004cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf2:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8004cf4:	8998      	ldrh	r0, [r3, #12]
{
 8004cf6:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8004cf8:	f7fd f983 	bl	8002002 <lwip_htons>
 8004cfc:	07c2      	lsls	r2, r0, #31
 8004cfe:	d415      	bmi.n	8004d2c <tcp_oos_insert_segment+0x40>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 8004d00:	4e18      	ldr	r6, [pc, #96]	; (8004d64 <tcp_oos_insert_segment+0x78>)
    while (next &&
 8004d02:	b1bc      	cbz	r4, 8004d34 <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8004d04:	68e7      	ldr	r7, [r4, #12]
 8004d06:	6830      	ldr	r0, [r6, #0]
 8004d08:	892b      	ldrh	r3, [r5, #8]
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	8922      	ldrh	r2, [r4, #8]
 8004d0e:	4403      	add	r3, r0
 8004d10:	440a      	add	r2, r1
 8004d12:	1a9a      	subs	r2, r3, r2
    while (next &&
 8004d14:	2a00      	cmp	r2, #0
 8004d16:	da10      	bge.n	8004d3a <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8004d18:	1a5b      	subs	r3, r3, r1
    if (next &&
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	dd0a      	ble.n	8004d34 <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8004d1e:	1a09      	subs	r1, r1, r0
      pbuf_realloc(cseg->p, cseg->len);
 8004d20:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8004d22:	b289      	uxth	r1, r1
 8004d24:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8004d26:	f7fe fffb 	bl	8003d20 <pbuf_realloc>
 8004d2a:	e003      	b.n	8004d34 <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 8004d2c:	4620      	mov	r0, r4
    next = NULL;
 8004d2e:	2400      	movs	r4, #0
    tcp_segs_free(next);
 8004d30:	f7ff faa2 	bl	8004278 <tcp_segs_free>
    }
  }
  cseg->next = next;
 8004d34:	602c      	str	r4, [r5, #0]
}
 8004d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8004d3a:	89b8      	ldrh	r0, [r7, #12]
 8004d3c:	f7fd f961 	bl	8002002 <lwip_htons>
 8004d40:	07c3      	lsls	r3, r0, #31
 8004d42:	d509      	bpl.n	8004d58 <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8004d44:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8004d48:	2001      	movs	r0, #1
 8004d4a:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8004d4e:	f7fd f958 	bl	8002002 <lwip_htons>
 8004d52:	4338      	orrs	r0, r7
 8004d54:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 8004d58:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f7ff fa7e 	bl	800425c <tcp_seg_free>
      next = next->next;
 8004d60:	463c      	mov	r4, r7
 8004d62:	e7ce      	b.n	8004d02 <tcp_oos_insert_segment+0x16>
 8004d64:	200001e8 	.word	0x200001e8

08004d68 <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8004d68:	7d03      	ldrb	r3, [r0, #20]
 8004d6a:	2b03      	cmp	r3, #3
{
 8004d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d70:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8004d72:	d806      	bhi.n	8004d82 <tcp_receive+0x1a>
 8004d74:	4b89      	ldr	r3, [pc, #548]	; (8004f9c <tcp_receive+0x234>)
 8004d76:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8004d7a:	4989      	ldr	r1, [pc, #548]	; (8004fa0 <tcp_receive+0x238>)
 8004d7c:	4889      	ldr	r0, [pc, #548]	; (8004fa4 <tcp_receive+0x23c>)
 8004d7e:	f002 ff33 	bl	8007be8 <iprintf>

  if (flags & TCP_ACK) {
 8004d82:	4b89      	ldr	r3, [pc, #548]	; (8004fa8 <tcp_receive+0x240>)
 8004d84:	4e89      	ldr	r6, [pc, #548]	; (8004fac <tcp_receive+0x244>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	f013 0f10 	tst.w	r3, #16
 8004d8c:	f000 8180 	beq.w	8005090 <tcp_receive+0x328>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8004d90:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004d92:	6830      	ldr	r0, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8004d94:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8004d98:	1a1d      	subs	r5, r3, r0
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8004d9a:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8004d9c:	2d00      	cmp	r5, #0
 8004d9e:	4d84      	ldr	r5, [pc, #528]	; (8004fb0 <tcp_receive+0x248>)
 8004da0:	db0d      	blt.n	8004dbe <tcp_receive+0x56>
 8004da2:	4283      	cmp	r3, r0
 8004da4:	d103      	bne.n	8004dae <tcp_receive+0x46>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8004da6:	682b      	ldr	r3, [r5, #0]
 8004da8:	1acb      	subs	r3, r1, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	db07      	blt.n	8004dbe <tcp_receive+0x56>
 8004dae:	682b      	ldr	r3, [r5, #0]
 8004db0:	4299      	cmp	r1, r3
 8004db2:	d11c      	bne.n	8004dee <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8004db4:	4b7f      	ldr	r3, [pc, #508]	; (8004fb4 <tcp_receive+0x24c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	89db      	ldrh	r3, [r3, #14]
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d917      	bls.n	8004dee <tcp_receive+0x86>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8004dbe:	4b7d      	ldr	r3, [pc, #500]	; (8004fb4 <tcp_receive+0x24c>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8004dc0:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	89df      	ldrh	r7, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 8004dc8:	6520      	str	r0, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8004dca:	45be      	cmp	lr, r7
      pcb->snd_wl2 = ackno;
 8004dcc:	6828      	ldr	r0, [r5, #0]
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8004dce:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
      pcb->snd_wl2 = ackno;
 8004dd2:	6560      	str	r0, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 8004dd4:	bf38      	it	cc
 8004dd6:	f8a4 705e 	strhcc.w	r7, [r4, #94]	; 0x5e
 8004dda:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 8004dde:	2f00      	cmp	r7, #0
 8004de0:	d13c      	bne.n	8004e5c <tcp_receive+0xf4>
        if (pcb->persist_backoff == 0) {
 8004de2:	b920      	cbnz	r0, 8004dee <tcp_receive+0x86>
          /* start persist timer */
          pcb->persist_cnt = 0;
          pcb->persist_backoff = 1;
 8004de4:	2301      	movs	r3, #1
          pcb->persist_cnt = 0;
 8004de6:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8004dea:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8004dee:	682b      	ldr	r3, [r5, #0]
 8004df0:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 8004df4:	4f70      	ldr	r7, [pc, #448]	; (8004fb8 <tcp_receive+0x250>)
 8004df6:	eba3 000e 	sub.w	r0, r3, lr
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	dc37      	bgt.n	8004e6e <tcp_receive+0x106>
      /* Clause 2 */
      if (tcplen == 0) {
 8004dfe:	486f      	ldr	r0, [pc, #444]	; (8004fbc <tcp_receive+0x254>)
 8004e00:	8800      	ldrh	r0, [r0, #0]
 8004e02:	2800      	cmp	r0, #0
 8004e04:	f040 8476 	bne.w	80056f4 <tcp_receive+0x98c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8004e08:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8004e0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e0c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004e10:	4401      	add	r1, r0
 8004e12:	428a      	cmp	r2, r1
 8004e14:	f040 846e 	bne.w	80056f4 <tcp_receive+0x98c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8004e18:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8004e1c:	2a00      	cmp	r2, #0
 8004e1e:	f2c0 8469 	blt.w	80056f4 <tcp_receive+0x98c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8004e22:	4573      	cmp	r3, lr
 8004e24:	f040 8466 	bne.w	80056f4 <tcp_receive+0x98c>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8004e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e2c:	1c53      	adds	r3, r2, #1
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 8004e32:	bf38      	it	cc
 8004e34:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8004e38:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d911      	bls.n	8004e64 <tcp_receive+0xfc>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8004e40:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8004e44:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8004e46:	4413      	add	r3, r2
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d201      	bcs.n	8004e52 <tcp_receive+0xea>
                  pcb->cwnd += pcb->mss;
 8004e4e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8004e52:	f8df a148 	ldr.w	sl, [pc, #328]	; 8004f9c <tcp_receive+0x234>
 8004e56:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8004fa4 <tcp_receive+0x23c>
 8004e5a:	e10c      	b.n	8005076 <tcp_receive+0x30e>
      } else if (pcb->persist_backoff > 0) {
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d0c6      	beq.n	8004dee <tcp_receive+0x86>
          pcb->persist_backoff = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e7c2      	b.n	8004dea <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 8004e64:	d1f5      	bne.n	8004e52 <tcp_receive+0xea>
                tcp_rexmit_fast(pcb);
 8004e66:	4620      	mov	r0, r4
 8004e68:	f001 fd7d 	bl	8006966 <tcp_rexmit_fast>
 8004e6c:	e7f1      	b.n	8004e52 <tcp_receive+0xea>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8004e6e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004e70:	1a9a      	subs	r2, r3, r2
 8004e72:	2a00      	cmp	r2, #0
 8004e74:	f300 808d 	bgt.w	8004f92 <tcp_receive+0x22a>
      if (pcb->flags & TF_INFR) {
 8004e78:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8004e7a:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      if (pcb->flags & TF_INFR) {
 8004e7e:	0751      	lsls	r1, r2, #29
      pcb->lastack = ackno;
 8004e80:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8004e82:	7d23      	ldrb	r3, [r4, #20]
      pcb->nrtx = 0;
 8004e84:	f04f 0100 	mov.w	r1, #0
        pcb->flags &= ~TF_INFR;
 8004e88:	bf48      	it	mi
 8004e8a:	f022 0204 	bicmi.w	r2, r2, #4
      pcb->nrtx = 0;
 8004e8e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
        pcb->flags &= ~TF_INFR;
 8004e92:	bf44      	itt	mi
 8004e94:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8004e96:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
      pcb->dupacks = 0;
 8004e9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
        pcb->cwnd = pcb->ssthresh;
 8004e9e:	bf48      	it	mi
 8004ea0:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 8004ea4:	2b03      	cmp	r3, #3
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8004ea6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004ea8:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 8004eac:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 8004eb0:	d90f      	bls.n	8004ed2 <tcp_receive+0x16a>
        if (pcb->cwnd < pcb->ssthresh) {
 8004eb2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8004eb6:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8004eba:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8004ebc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8004ebe:	bf9c      	itt	ls
 8004ec0:	435b      	mulls	r3, r3
 8004ec2:	fb93 f3f2 	sdivls	r3, r3, r2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8004eca:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
 8004ecc:	bf38      	it	cc
 8004ece:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8004ed2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8004f9c <tcp_receive+0x234>
 8004ed6:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8004fa4 <tcp_receive+0x23c>
      while (pcb->unacked != NULL &&
 8004eda:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004edc:	b943      	cbnz	r3, 8004ef0 <tcp_receive+0x188>
      if (pcb->unacked == NULL) {
 8004ede:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	2a00      	cmp	r2, #0
 8004ee4:	d153      	bne.n	8004f8e <tcp_receive+0x226>
        pcb->rtime = -1;
 8004ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eea:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8004eec:	76e3      	strb	r3, [r4, #27]
 8004eee:	e7b0      	b.n	8004e52 <tcp_receive+0xea>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	6858      	ldr	r0, [r3, #4]
 8004ef4:	f7fd f888 	bl	8002008 <lwip_htonl>
 8004ef8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004efa:	4683      	mov	fp, r0
 8004efc:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	8998      	ldrh	r0, [r3, #12]
 8004f04:	f7fd f87d 	bl	8002002 <lwip_htons>
 8004f08:	682b      	ldr	r3, [r5, #0]
 8004f0a:	f010 0003 	ands.w	r0, r0, #3
 8004f0e:	eba8 0803 	sub.w	r8, r8, r3
 8004f12:	bf18      	it	ne
 8004f14:	2001      	movne	r0, #1
 8004f16:	44d8      	add	r8, fp
 8004f18:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 8004f1a:	f1b8 0f00 	cmp.w	r8, #0
 8004f1e:	dcde      	bgt.n	8004ede <tcp_receive+0x176>
        next = pcb->unacked;
 8004f20:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8004f24:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 8004f28:	f8d8 3000 	ldr.w	r3, [r8]
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8004f2c:	f8d8 0004 	ldr.w	r0, [r8, #4]
        pcb->unacked = pcb->unacked->next;
 8004f30:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8004f32:	f7fe ff65 	bl	8003e00 <pbuf_clen>
 8004f36:	4583      	cmp	fp, r0
 8004f38:	d206      	bcs.n	8004f48 <tcp_receive+0x1e0>
 8004f3a:	464b      	mov	r3, r9
 8004f3c:	f240 429e 	movw	r2, #1182	; 0x49e
 8004f40:	491f      	ldr	r1, [pc, #124]	; (8004fc0 <tcp_receive+0x258>)
 8004f42:	4650      	mov	r0, sl
 8004f44:	f002 fe50 	bl	8007be8 <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8004f48:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004f4c:	f7fe ff58 	bl	8003e00 <pbuf_clen>
 8004f50:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 8004f54:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8004f56:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 8004f58:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8004f5c:	4413      	add	r3, r2
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8004f5e:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        tcp_seg_free(next);
 8004f62:	4640      	mov	r0, r8
        recv_acked += next->len;
 8004f64:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 8004f66:	f7ff f979 	bl	800425c <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8004f6a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0b3      	beq.n	8004eda <tcp_receive+0x172>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8004f72:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1b0      	bne.n	8004eda <tcp_receive+0x172>
 8004f78:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1ad      	bne.n	8004eda <tcp_receive+0x172>
 8004f7e:	464b      	mov	r3, r9
 8004f80:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8004f84:	490f      	ldr	r1, [pc, #60]	; (8004fc4 <tcp_receive+0x25c>)
 8004f86:	4650      	mov	r0, sl
 8004f88:	f002 fe2e 	bl	8007be8 <iprintf>
 8004f8c:	e7a5      	b.n	8004eda <tcp_receive+0x172>
        pcb->rtime = 0;
 8004f8e:	8623      	strh	r3, [r4, #48]	; 0x30
 8004f90:	e7ac      	b.n	8004eec <tcp_receive+0x184>
      tcp_send_empty_ack(pcb);
 8004f92:	4620      	mov	r0, r4
 8004f94:	f001 fa94 	bl	80064c0 <tcp_send_empty_ack>
 8004f98:	e75b      	b.n	8004e52 <tcp_receive+0xea>
 8004f9a:	bf00      	nop
 8004f9c:	08009e2c 	.word	0x08009e2c
 8004fa0:	08009e5e 	.word	0x08009e5e
 8004fa4:	08008f43 	.word	0x08008f43
 8004fa8:	200001c8 	.word	0x200001c8
 8004fac:	200001e8 	.word	0x200001e8
 8004fb0:	200001c4 	.word	0x200001c4
 8004fb4:	200001f0 	.word	0x200001f0
 8004fb8:	200001dc 	.word	0x200001dc
 8004fbc:	200001fe 	.word	0x200001fe
 8004fc0:	08009e77 	.word	0x08009e77
 8004fc4:	08009e9f 	.word	0x08009e9f
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8004fc8:	682a      	ldr	r2, [r5, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	9201      	str	r2, [sp, #4]
 8004fce:	6858      	ldr	r0, [r3, #4]
 8004fd0:	f7fd f81a 	bl	8002008 <lwip_htonl>
 8004fd4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004fd6:	4683      	mov	fp, r0
 8004fd8:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	8998      	ldrh	r0, [r3, #12]
 8004fe0:	f7fd f80f 	bl	8002002 <lwip_htons>
 8004fe4:	9a01      	ldr	r2, [sp, #4]
 8004fe6:	f010 0003 	ands.w	r0, r0, #3
 8004fea:	eba2 0808 	sub.w	r8, r2, r8
 8004fee:	bf18      	it	ne
 8004ff0:	2001      	movne	r0, #1
 8004ff2:	eba8 080b 	sub.w	r8, r8, fp
 8004ff6:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 8004ffa:	f1b8 0f00 	cmp.w	r8, #0
 8004ffe:	db3d      	blt.n	800507c <tcp_receive+0x314>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	2b00      	cmp	r3, #0
 8005008:	dc38      	bgt.n	800507c <tcp_receive+0x314>
      next = pcb->unsent;
 800500a:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 800500e:	f8d8 3000 	ldr.w	r3, [r8]
 8005012:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8005014:	b90b      	cbnz	r3, 800501a <tcp_receive+0x2b2>
        pcb->unsent_oversize = 0;
 8005016:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800501a:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 800501e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005022:	f7fe feed 	bl	8003e00 <pbuf_clen>
 8005026:	4583      	cmp	fp, r0
 8005028:	d206      	bcs.n	8005038 <tcp_receive+0x2d0>
 800502a:	4653      	mov	r3, sl
 800502c:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005030:	49ba      	ldr	r1, [pc, #744]	; (800531c <tcp_receive+0x5b4>)
 8005032:	4648      	mov	r0, r9
 8005034:	f002 fdd8 	bl	8007be8 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8005038:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800503c:	f7fe fee0 	bl	8003e00 <pbuf_clen>
 8005040:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 8005044:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8005046:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8005048:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800504c:	4413      	add	r3, r2
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800504e:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      tcp_seg_free(next);
 8005052:	4640      	mov	r0, r8
      recv_acked += next->len;
 8005054:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 8005056:	f7ff f901 	bl	800425c <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800505a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800505e:	b153      	cbz	r3, 8005076 <tcp_receive+0x30e>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8005060:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005062:	b943      	cbnz	r3, 8005076 <tcp_receive+0x30e>
 8005064:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005066:	b933      	cbnz	r3, 8005076 <tcp_receive+0x30e>
 8005068:	4653      	mov	r3, sl
 800506a:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800506e:	49ac      	ldr	r1, [pc, #688]	; (8005320 <tcp_receive+0x5b8>)
 8005070:	4648      	mov	r0, r9
 8005072:	f002 fdb9 	bl	8007be8 <iprintf>
    while (pcb->unsent != NULL &&
 8005076:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1a5      	bne.n	8004fc8 <tcp_receive+0x260>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800507c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8005080:	883a      	ldrh	r2, [r7, #0]
 8005082:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8005084:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 8005086:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800508a:	2a00      	cmp	r2, #0
 800508c:	f040 8117 	bne.w	80052be <tcp_receive+0x556>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8005090:	4fa4      	ldr	r7, [pc, #656]	; (8005324 <tcp_receive+0x5bc>)
 8005092:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005094:	8838      	ldrh	r0, [r7, #0]
 8005096:	2800      	cmp	r0, #0
 8005098:	f000 831f 	beq.w	80056da <tcp_receive+0x972>
 800509c:	7d23      	ldrb	r3, [r4, #20]
 800509e:	2b06      	cmp	r3, #6
 80050a0:	f200 831b 	bhi.w	80056da <tcp_receive+0x972>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80050a4:	6833      	ldr	r3, [r6, #0]
 80050a6:	1ad5      	subs	r5, r2, r3
 80050a8:	2d01      	cmp	r5, #1
 80050aa:	f100 815c 	bmi.w	8005366 <tcp_receive+0x5fe>
 80050ae:	f1c3 0101 	rsb	r1, r3, #1
 80050b2:	1a09      	subs	r1, r1, r0
 80050b4:	4411      	add	r1, r2
 80050b6:	2900      	cmp	r1, #0
 80050b8:	f300 8155 	bgt.w	8005366 <tcp_receive+0x5fe>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80050bc:	4b9a      	ldr	r3, [pc, #616]	; (8005328 <tcp_receive+0x5c0>)
      off = pcb->rcv_nxt - seqno;
 80050be:	46aa      	mov	sl, r5
      struct pbuf *p = inseg.p;
 80050c0:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80050c4:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80050c6:	f1b9 0f00 	cmp.w	r9, #0
 80050ca:	d106      	bne.n	80050da <tcp_receive+0x372>
 80050cc:	4b97      	ldr	r3, [pc, #604]	; (800532c <tcp_receive+0x5c4>)
 80050ce:	f240 523c 	movw	r2, #1340	; 0x53c
 80050d2:	4997      	ldr	r1, [pc, #604]	; (8005330 <tcp_receive+0x5c8>)
 80050d4:	4897      	ldr	r0, [pc, #604]	; (8005334 <tcp_receive+0x5cc>)
 80050d6:	f002 fd87 	bl	8007be8 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80050da:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 80050de:	429d      	cmp	r5, r3
 80050e0:	dd06      	ble.n	80050f0 <tcp_receive+0x388>
 80050e2:	4b92      	ldr	r3, [pc, #584]	; (800532c <tcp_receive+0x5c4>)
 80050e4:	f240 523d 	movw	r2, #1341	; 0x53d
 80050e8:	4993      	ldr	r1, [pc, #588]	; (8005338 <tcp_receive+0x5d0>)
 80050ea:	4892      	ldr	r0, [pc, #584]	; (8005334 <tcp_receive+0x5cc>)
 80050ec:	f002 fd7c 	bl	8007be8 <iprintf>
      if (inseg.p->len < off) {
 80050f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80050f4:	8943      	ldrh	r3, [r0, #10]
 80050f6:	429d      	cmp	r5, r3
 80050f8:	f340 812a 	ble.w	8005350 <tcp_receive+0x5e8>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80050fc:	8903      	ldrh	r3, [r0, #8]
 80050fe:	429d      	cmp	r5, r3
 8005100:	dd06      	ble.n	8005110 <tcp_receive+0x3a8>
 8005102:	4b8a      	ldr	r3, [pc, #552]	; (800532c <tcp_receive+0x5c4>)
 8005104:	f240 523f 	movw	r2, #1343	; 0x53f
 8005108:	498c      	ldr	r1, [pc, #560]	; (800533c <tcp_receive+0x5d4>)
 800510a:	488a      	ldr	r0, [pc, #552]	; (8005334 <tcp_receive+0x5cc>)
 800510c:	f002 fd6c 	bl	8007be8 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8005110:	f8d8 3004 	ldr.w	r3, [r8, #4]
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 8005114:	2200      	movs	r2, #0
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8005116:	8919      	ldrh	r1, [r3, #8]
 8005118:	1b4d      	subs	r5, r1, r5
 800511a:	b2ad      	uxth	r5, r5
        while (p->len < off) {
 800511c:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8005120:	459a      	cmp	sl, r3
 8005122:	f300 80f1 	bgt.w	8005308 <tcp_receive+0x5a0>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8005126:	f1ca 0100 	rsb	r1, sl, #0
 800512a:	4648      	mov	r0, r9
 800512c:	b209      	sxth	r1, r1
 800512e:	f7fe fcaf 	bl	8003a90 <pbuf_header>
 8005132:	b130      	cbz	r0, 8005142 <tcp_receive+0x3da>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8005134:	4b7d      	ldr	r3, [pc, #500]	; (800532c <tcp_receive+0x5c4>)
 8005136:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800513a:	4981      	ldr	r1, [pc, #516]	; (8005340 <tcp_receive+0x5d8>)
 800513c:	487d      	ldr	r0, [pc, #500]	; (8005334 <tcp_receive+0x5cc>)
 800513e:	f002 fd53 	bl	8007be8 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8005142:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8005146:	6833      	ldr	r3, [r6, #0]
 8005148:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800514a:	440b      	add	r3, r1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800514c:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800514e:	1a9b      	subs	r3, r3, r2
 8005150:	f8a8 3008 	strh.w	r3, [r8, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8005154:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005158:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800515a:	6831      	ldr	r1, [r6, #0]
 800515c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800515e:	1a8b      	subs	r3, r1, r2
 8005160:	2b00      	cmp	r3, #0
 8005162:	f2c0 82b4 	blt.w	80056ce <tcp_receive+0x966>
 8005166:	1c4b      	adds	r3, r1, #1
 8005168:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	1a1b      	subs	r3, r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	f300 82ad 	bgt.w	80056ce <tcp_receive+0x966>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8005174:	4291      	cmp	r1, r2
 8005176:	f040 81ca 	bne.w	800550e <tcp_receive+0x7a6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800517a:	4d6b      	ldr	r5, [pc, #428]	; (8005328 <tcp_receive+0x5c0>)
 800517c:	68eb      	ldr	r3, [r5, #12]
 800517e:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8005182:	8998      	ldrh	r0, [r3, #12]
 8005184:	f7fc ff3d 	bl	8002002 <lwip_htons>
 8005188:	f010 0003 	ands.w	r0, r0, #3

        if (tcplen > pcb->rcv_wnd) {
 800518c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800518e:	bf18      	it	ne
 8005190:	2001      	movne	r0, #1
 8005192:	4440      	add	r0, r8
 8005194:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8005196:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8005198:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 800519a:	d241      	bcs.n	8005220 <tcp_receive+0x4b8>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800519c:	68eb      	ldr	r3, [r5, #12]
 800519e:	8998      	ldrh	r0, [r3, #12]
 80051a0:	f7fc ff2f 	bl	8002002 <lwip_htons>
 80051a4:	07c2      	lsls	r2, r0, #31
 80051a6:	d510      	bpl.n	80051ca <tcp_receive+0x462>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80051a8:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80051ac:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 80051b0:	4640      	mov	r0, r8
 80051b2:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 80051b6:	f7fc ff24 	bl	8002002 <lwip_htons>
 80051ba:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80051be:	f7fc ff20 	bl	8002002 <lwip_htons>
 80051c2:	ea40 0808 	orr.w	r8, r0, r8
 80051c6:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80051ca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80051cc:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80051ce:	68eb      	ldr	r3, [r5, #12]
 80051d0:	8998      	ldrh	r0, [r3, #12]
 80051d2:	f7fc ff16 	bl	8002002 <lwip_htons>
 80051d6:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
          }
          pbuf_realloc(inseg.p, inseg.len);
 80051d8:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 80051da:	bf42      	ittt	mi
 80051dc:	892b      	ldrhmi	r3, [r5, #8]
 80051de:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80051e2:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 80051e4:	8929      	ldrh	r1, [r5, #8]
 80051e6:	f7fe fd9b 	bl	8003d20 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80051ea:	68eb      	ldr	r3, [r5, #12]
 80051ec:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80051f0:	8998      	ldrh	r0, [r3, #12]
 80051f2:	f7fc ff06 	bl	8002002 <lwip_htons>
 80051f6:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80051fa:	6833      	ldr	r3, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 80051fc:	bf18      	it	ne
 80051fe:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8005200:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8005202:	4440      	add	r0, r8
 8005204:	b280      	uxth	r0, r0
 8005206:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8005208:	4418      	add	r0, r3
 800520a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800520c:	4413      	add	r3, r2
 800520e:	4298      	cmp	r0, r3
 8005210:	d006      	beq.n	8005220 <tcp_receive+0x4b8>
 8005212:	4b46      	ldr	r3, [pc, #280]	; (800532c <tcp_receive+0x5c4>)
 8005214:	f240 527f 	movw	r2, #1407	; 0x57f
 8005218:	494a      	ldr	r1, [pc, #296]	; (8005344 <tcp_receive+0x5dc>)
 800521a:	4846      	ldr	r0, [pc, #280]	; (8005334 <tcp_receive+0x5cc>)
 800521c:	f002 fce4 	bl	8007be8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8005220:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 80ae 	beq.w	8005384 <tcp_receive+0x61c>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8005228:	68eb      	ldr	r3, [r5, #12]
 800522a:	8998      	ldrh	r0, [r3, #12]
 800522c:	f7fc fee9 	bl	8002002 <lwip_htons>
 8005230:	07c0      	lsls	r0, r0, #31
 8005232:	f100 80a4 	bmi.w	800537e <tcp_receive+0x616>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 8005236:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800523a:	f1b8 0f00 	cmp.w	r8, #0
 800523e:	d03b      	beq.n	80052b8 <tcp_receive+0x550>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8005240:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 8005244:	6830      	ldr	r0, [r6, #0]
 8005246:	883b      	ldrh	r3, [r7, #0]
 8005248:	f8de 2004 	ldr.w	r2, [lr, #4]
 800524c:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8005250:	4403      	add	r3, r0
 8005252:	4411      	add	r1, r2
 8005254:	1a59      	subs	r1, r3, r1
            while (next &&
 8005256:	2900      	cmp	r1, #0
 8005258:	f280 80d1 	bge.w	80053fe <tcp_receive+0x696>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 800525c:	1a9b      	subs	r3, r3, r2
            if (next &&
 800525e:	2b00      	cmp	r3, #0
 8005260:	dd2a      	ble.n	80052b8 <tcp_receive+0x550>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8005262:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8005264:	1a12      	subs	r2, r2, r0
 8005266:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8005268:	8998      	ldrh	r0, [r3, #12]
 800526a:	f7fc feca 	bl	8002002 <lwip_htons>
 800526e:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
              }
              pbuf_realloc(inseg.p, inseg.len);
 8005270:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 8005272:	bf42      	ittt	mi
 8005274:	892b      	ldrhmi	r3, [r5, #8]
 8005276:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800527a:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800527c:	8929      	ldrh	r1, [r5, #8]
 800527e:	f7fe fd4f 	bl	8003d20 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8005282:	68eb      	ldr	r3, [r5, #12]
 8005284:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8005288:	8998      	ldrh	r0, [r3, #12]
 800528a:	f7fc feba 	bl	8002002 <lwip_htons>
 800528e:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8005292:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 8005294:	bf18      	it	ne
 8005296:	2001      	movne	r0, #1
 8005298:	4448      	add	r0, r9
 800529a:	b280      	uxth	r0, r0
 800529c:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800529e:	4418      	add	r0, r3
 80052a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	4298      	cmp	r0, r3
 80052a8:	d006      	beq.n	80052b8 <tcp_receive+0x550>
 80052aa:	4b20      	ldr	r3, [pc, #128]	; (800532c <tcp_receive+0x5c4>)
 80052ac:	f240 52af 	movw	r2, #1455	; 0x5af
 80052b0:	4925      	ldr	r1, [pc, #148]	; (8005348 <tcp_receive+0x5e0>)
 80052b2:	4820      	ldr	r0, [pc, #128]	; (8005334 <tcp_receive+0x5cc>)
 80052b4:	f002 fc98 	bl	8007be8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80052b8:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 80052bc:	e062      	b.n	8005384 <tcp_receive+0x61c>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80052be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052c0:	6829      	ldr	r1, [r5, #0]
 80052c2:	1a5b      	subs	r3, r3, r1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f6bf aee3 	bge.w	8005090 <tcp_receive+0x328>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80052ca:	4b20      	ldr	r3, [pc, #128]	; (800534c <tcp_receive+0x5e4>)
      m = m - (pcb->sa >> 3);
 80052cc:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80052d0:	6819      	ldr	r1, [r3, #0]
 80052d2:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sv >> 2);
 80052d4:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      m = m - (pcb->sa >> 3);
 80052d8:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
      pcb->sv += m;
 80052dc:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
      m = m - (pcb->sa >> 3);
 80052e0:	b289      	uxth	r1, r1
 80052e2:	b20b      	sxth	r3, r1
      pcb->sa += m;
 80052e4:	4408      	add	r0, r1
      if (m < 0) {
 80052e6:	2b00      	cmp	r3, #0
      pcb->sa += m;
 80052e8:	b200      	sxth	r0, r0
        m = -m;
 80052ea:	bfb8      	it	lt
 80052ec:	4249      	neglt	r1, r1
      pcb->sa += m;
 80052ee:	87a0      	strh	r0, [r4, #60]	; 0x3c
        m = -m;
 80052f0:	bfb8      	it	lt
 80052f2:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 80052f4:	4413      	add	r3, r2
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80052fa:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 80052fe:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	6363      	str	r3, [r4, #52]	; 0x34
 8005306:	e6c3      	b.n	8005090 <tcp_receive+0x328>
          p->tot_len = new_tot_len;
 8005308:	f8a9 5008 	strh.w	r5, [r9, #8]
          off -= p->len;
 800530c:	ebaa 0a03 	sub.w	sl, sl, r3
          p->len = 0;
 8005310:	f8a9 200a 	strh.w	r2, [r9, #10]
          p = p->next;
 8005314:	f8d9 9000 	ldr.w	r9, [r9]
 8005318:	e700      	b.n	800511c <tcp_receive+0x3b4>
 800531a:	bf00      	nop
 800531c:	08009e77 	.word	0x08009e77
 8005320:	08009e9f 	.word	0x08009e9f
 8005324:	200001fe 	.word	0x200001fe
 8005328:	200001cc 	.word	0x200001cc
 800532c:	08009e2c 	.word	0x08009e2c
 8005330:	08009ebf 	.word	0x08009ebf
 8005334:	08008f43 	.word	0x08008f43
 8005338:	08009ecf 	.word	0x08009ecf
 800533c:	08009ede 	.word	0x08009ede
 8005340:	08009eee 	.word	0x08009eee
 8005344:	08009f01 	.word	0x08009f01
 8005348:	08009f38 	.word	0x08009f38
 800534c:	2000374c 	.word	0x2000374c
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8005350:	4269      	negs	r1, r5
 8005352:	b209      	sxth	r1, r1
 8005354:	f7fe fb9c 	bl	8003a90 <pbuf_header>
 8005358:	2800      	cmp	r0, #0
 800535a:	f43f aef2 	beq.w	8005142 <tcp_receive+0x3da>
          LWIP_ASSERT("pbuf_header failed", 0);
 800535e:	4b9d      	ldr	r3, [pc, #628]	; (80055d4 <tcp_receive+0x86c>)
 8005360:	f240 5251 	movw	r2, #1361	; 0x551
 8005364:	e6e9      	b.n	800513a <tcp_receive+0x3d2>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800536a:	bfbe      	ittt	lt
 800536c:	7ea3      	ldrblt	r3, [r4, #26]
 800536e:	f043 0302 	orrlt.w	r3, r3, #2
 8005372:	76a3      	strblt	r3, [r4, #26]
 8005374:	e6f1      	b.n	800515a <tcp_receive+0x3f2>
              pcb->ooseq = pcb->ooseq->next;
 8005376:	6803      	ldr	r3, [r0, #0]
 8005378:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800537a:	f7fe ff6f 	bl	800425c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800537e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005380:	2800      	cmp	r0, #0
 8005382:	d1f8      	bne.n	8005376 <tcp_receive+0x60e>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8005384:	883a      	ldrh	r2, [r7, #0]
 8005386:	6833      	ldr	r3, [r6, #0]
 8005388:	4413      	add	r3, r2
 800538a:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800538c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800538e:	4293      	cmp	r3, r2
 8005390:	d206      	bcs.n	80053a0 <tcp_receive+0x638>
 8005392:	4b90      	ldr	r3, [pc, #576]	; (80055d4 <tcp_receive+0x86c>)
 8005394:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8005398:	498f      	ldr	r1, [pc, #572]	; (80055d8 <tcp_receive+0x870>)
 800539a:	4890      	ldr	r0, [pc, #576]	; (80055dc <tcp_receive+0x874>)
 800539c:	f002 fc24 	bl	8007be8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80053a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80053a2:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 80053a4:	883a      	ldrh	r2, [r7, #0]
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 80053aa:	f7fe feed 	bl	8004188 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80053ae:	686b      	ldr	r3, [r5, #4]
 80053b0:	891a      	ldrh	r2, [r3, #8]
 80053b2:	b11a      	cbz	r2, 80053bc <tcp_receive+0x654>
          recv_data = inseg.p;
 80053b4:	4a8a      	ldr	r2, [pc, #552]	; (80055e0 <tcp_receive+0x878>)
 80053b6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80053b8:	2300      	movs	r3, #0
 80053ba:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80053bc:	68eb      	ldr	r3, [r5, #12]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80053be:	4f85      	ldr	r7, [pc, #532]	; (80055d4 <tcp_receive+0x86c>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80053c0:	8998      	ldrh	r0, [r3, #12]
 80053c2:	f7fc fe1e 	bl	8002002 <lwip_htons>
 80053c6:	07c5      	lsls	r5, r0, #31
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80053c8:	f8df 8220 	ldr.w	r8, [pc, #544]	; 80055ec <tcp_receive+0x884>
          recv_flags |= TF_GOT_FIN;
 80053cc:	bf48      	it	mi
 80053ce:	4a85      	ldrmi	r2, [pc, #532]	; (80055e4 <tcp_receive+0x87c>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80053d0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80055dc <tcp_receive+0x874>
          recv_flags |= TF_GOT_FIN;
 80053d4:	bf42      	ittt	mi
 80053d6:	7813      	ldrbmi	r3, [r2, #0]
 80053d8:	f043 0320 	orrmi.w	r3, r3, #32
 80053dc:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 80053de:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80053e0:	b125      	cbz	r5, 80053ec <tcp_receive+0x684>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80053e2:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 80053e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80053e6:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 80053e8:	428b      	cmp	r3, r1
 80053ea:	d033      	beq.n	8005454 <tcp_receive+0x6ec>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80053ec:	7ea3      	ldrb	r3, [r4, #26]
 80053ee:	07d9      	lsls	r1, r3, #31
 80053f0:	f140 8087 	bpl.w	8005502 <tcp_receive+0x79a>
 80053f4:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 80053f8:	f043 0302 	orr.w	r3, r3, #2
 80053fc:	e083      	b.n	8005506 <tcp_receive+0x79e>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80053fe:	f8be 000c 	ldrh.w	r0, [lr, #12]
 8005402:	f7fc fdfe 	bl	8002002 <lwip_htons>
 8005406:	07c1      	lsls	r1, r0, #31
 8005408:	d51d      	bpl.n	8005446 <tcp_receive+0x6de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800540a:	68eb      	ldr	r3, [r5, #12]
 800540c:	8998      	ldrh	r0, [r3, #12]
 800540e:	f7fc fdf8 	bl	8002002 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8005412:	0782      	lsls	r2, r0, #30
 8005414:	d417      	bmi.n	8005446 <tcp_receive+0x6de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8005416:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800541a:	2001      	movs	r0, #1
 800541c:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 8005420:	f7fc fdef 	bl	8002002 <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 8005424:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8005426:	ea49 0000 	orr.w	r0, r9, r0
                tcplen = TCP_TCPLEN(&inseg);
 800542a:	f8b5 9008 	ldrh.w	r9, [r5, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800542e:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8005432:	8998      	ldrh	r0, [r3, #12]
 8005434:	f7fc fde5 	bl	8002002 <lwip_htons>
 8005438:	f010 0003 	ands.w	r0, r0, #3
 800543c:	bf18      	it	ne
 800543e:	2001      	movne	r0, #1
 8005440:	4481      	add	r9, r0
 8005442:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 8005446:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 800544a:	4640      	mov	r0, r8
 800544c:	f7fe ff06 	bl	800425c <tcp_seg_free>
              next = next->next;
 8005450:	46c8      	mov	r8, r9
 8005452:	e6f2      	b.n	800523a <tcp_receive+0x4d2>
          seqno = pcb->ooseq->tcphdr->seqno;
 8005454:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8005456:	8990      	ldrh	r0, [r2, #12]
 8005458:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800545c:	f7fc fdd1 	bl	8002002 <lwip_htons>
 8005460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005462:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8005466:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800546a:	bf18      	it	ne
 800546c:	2001      	movne	r0, #1
 800546e:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8005470:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8005472:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8005474:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8005478:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800547a:	8998      	ldrh	r0, [r3, #12]
 800547c:	f7fc fdc1 	bl	8002002 <lwip_htons>
 8005480:	f010 0003 	ands.w	r0, r0, #3
 8005484:	bf18      	it	ne
 8005486:	2001      	movne	r0, #1
 8005488:	4458      	add	r0, fp
 800548a:	4582      	cmp	sl, r0
 800548c:	d206      	bcs.n	800549c <tcp_receive+0x734>
 800548e:	463b      	mov	r3, r7
 8005490:	f240 52de 	movw	r2, #1502	; 0x5de
 8005494:	4641      	mov	r1, r8
 8005496:	4648      	mov	r0, r9
 8005498:	f002 fba6 	bl	8007be8 <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800549c:	68eb      	ldr	r3, [r5, #12]
 800549e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 80054a2:	8998      	ldrh	r0, [r3, #12]
 80054a4:	f7fc fdad 	bl	8002002 <lwip_htons>
 80054a8:	f010 0003 	ands.w	r0, r0, #3
 80054ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80054ae:	bf18      	it	ne
 80054b0:	2001      	movne	r0, #1
 80054b2:	4450      	add	r0, sl
 80054b4:	1a18      	subs	r0, r3, r0
 80054b6:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 80054b8:	4620      	mov	r0, r4
 80054ba:	f7fe fe65 	bl	8004188 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 80054be:	6869      	ldr	r1, [r5, #4]
 80054c0:	890b      	ldrh	r3, [r1, #8]
 80054c2:	b133      	cbz	r3, 80054d2 <tcp_receive+0x76a>
            if (recv_data) {
 80054c4:	4b46      	ldr	r3, [pc, #280]	; (80055e0 <tcp_receive+0x878>)
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	b1c8      	cbz	r0, 80054fe <tcp_receive+0x796>
              pbuf_cat(recv_data, cseg->p);
 80054ca:	f7fe fcb5 	bl	8003e38 <pbuf_cat>
            cseg->p = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80054d2:	68eb      	ldr	r3, [r5, #12]
 80054d4:	8998      	ldrh	r0, [r3, #12]
 80054d6:	f7fc fd94 	bl	8002002 <lwip_htons>
 80054da:	07c0      	lsls	r0, r0, #31
 80054dc:	d509      	bpl.n	80054f2 <tcp_receive+0x78a>
            recv_flags |= TF_GOT_FIN;
 80054de:	4a41      	ldr	r2, [pc, #260]	; (80055e4 <tcp_receive+0x87c>)
 80054e0:	7813      	ldrb	r3, [r2, #0]
 80054e2:	f043 0320 	orr.w	r3, r3, #32
 80054e6:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80054e8:	7d23      	ldrb	r3, [r4, #20]
 80054ea:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 80054ec:	bf04      	itt	eq
 80054ee:	2307      	moveq	r3, #7
 80054f0:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 80054f2:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 80054f4:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 80054f6:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 80054f8:	f7fe feb0 	bl	800425c <tcp_seg_free>
 80054fc:	e76f      	b.n	80053de <tcp_receive+0x676>
              recv_data = cseg->p;
 80054fe:	6019      	str	r1, [r3, #0]
 8005500:	e7e5      	b.n	80054ce <tcp_receive+0x766>
        tcp_ack(pcb);
 8005502:	f043 0301 	orr.w	r3, r3, #1
 8005506:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 8005508:	b003      	add	sp, #12
 800550a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 800550e:	4620      	mov	r0, r4
 8005510:	f000 ffd6 	bl	80064c0 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8005514:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8005516:	b925      	cbnz	r5, 8005522 <tcp_receive+0x7ba>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8005518:	4833      	ldr	r0, [pc, #204]	; (80055e8 <tcp_receive+0x880>)
 800551a:	f7fe feb5 	bl	8004288 <tcp_seg_copy>
 800551e:	6720      	str	r0, [r4, #112]	; 0x70
 8005520:	e7f2      	b.n	8005508 <tcp_receive+0x7a0>
            if (seqno == next->tcphdr->seqno) {
 8005522:	6833      	ldr	r3, [r6, #0]
 8005524:	f04f 0800 	mov.w	r8, #0
 8005528:	f103 3eff 	add.w	lr, r3, #4294967295
 800552c:	f103 0c01 	add.w	ip, r3, #1
 8005530:	68e8      	ldr	r0, [r5, #12]
 8005532:	6842      	ldr	r2, [r0, #4]
 8005534:	429a      	cmp	r2, r3
 8005536:	d117      	bne.n	8005568 <tcp_receive+0x800>
              if (inseg.len > next->len) {
 8005538:	482b      	ldr	r0, [pc, #172]	; (80055e8 <tcp_receive+0x880>)
 800553a:	892b      	ldrh	r3, [r5, #8]
 800553c:	8902      	ldrh	r2, [r0, #8]
 800553e:	429a      	cmp	r2, r3
 8005540:	d9e2      	bls.n	8005508 <tcp_receive+0x7a0>
                cseg = tcp_seg_copy(&inseg);
 8005542:	f7fe fea1 	bl	8004288 <tcp_seg_copy>
                if (cseg != NULL) {
 8005546:	2800      	cmp	r0, #0
 8005548:	d0de      	beq.n	8005508 <tcp_receive+0x7a0>
                  if (prev != NULL) {
 800554a:	f1b8 0f00 	cmp.w	r8, #0
 800554e:	d009      	beq.n	8005564 <tcp_receive+0x7fc>
                    prev->next = cseg;
 8005550:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8005554:	4629      	mov	r1, r5
}
 8005556:	b003      	add	sp, #12
 8005558:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 800555c:	f7ff bbc6 	b.w	8004cec <tcp_oos_insert_segment>
 8005560:	460d      	mov	r5, r1
 8005562:	e7e5      	b.n	8005530 <tcp_receive+0x7c8>
                    pcb->ooseq = cseg;
 8005564:	6720      	str	r0, [r4, #112]	; 0x70
 8005566:	e7f5      	b.n	8005554 <tcp_receive+0x7ec>
              if (prev == NULL) {
 8005568:	f1b8 0f00 	cmp.w	r8, #0
 800556c:	d109      	bne.n	8005582 <tcp_receive+0x81a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800556e:	1a99      	subs	r1, r3, r2
 8005570:	2900      	cmp	r1, #0
 8005572:	da3d      	bge.n	80055f0 <tcp_receive+0x888>
                  cseg = tcp_seg_copy(&inseg);
 8005574:	481c      	ldr	r0, [pc, #112]	; (80055e8 <tcp_receive+0x880>)
 8005576:	f7fe fe87 	bl	8004288 <tcp_seg_copy>
                  if (cseg != NULL) {
 800557a:	2800      	cmp	r0, #0
 800557c:	d0c4      	beq.n	8005508 <tcp_receive+0x7a0>
                    pcb->ooseq = cseg;
 800557e:	6720      	str	r0, [r4, #112]	; 0x70
 8005580:	e7e8      	b.n	8005554 <tcp_receive+0x7ec>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8005582:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8005586:	6849      	ldr	r1, [r1, #4]
 8005588:	ebae 0101 	sub.w	r1, lr, r1
 800558c:	2900      	cmp	r1, #0
 800558e:	db2f      	blt.n	80055f0 <tcp_receive+0x888>
 8005590:	ebac 0102 	sub.w	r1, ip, r2
 8005594:	2900      	cmp	r1, #0
 8005596:	dc2b      	bgt.n	80055f0 <tcp_receive+0x888>
                  cseg = tcp_seg_copy(&inseg);
 8005598:	4813      	ldr	r0, [pc, #76]	; (80055e8 <tcp_receive+0x880>)
 800559a:	f7fe fe75 	bl	8004288 <tcp_seg_copy>
                  if (cseg != NULL) {
 800559e:	4604      	mov	r4, r0
 80055a0:	2800      	cmp	r0, #0
 80055a2:	d0b1      	beq.n	8005508 <tcp_receive+0x7a0>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80055a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80055a8:	6831      	ldr	r1, [r6, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80055b0:	4413      	add	r3, r2
 80055b2:	1a5b      	subs	r3, r3, r1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	dd07      	ble.n	80055c8 <tcp_receive+0x860>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80055b8:	1a89      	subs	r1, r1, r2
                      pbuf_realloc(prev->p, prev->len);
 80055ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80055be:	b289      	uxth	r1, r1
 80055c0:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 80055c4:	f7fe fbac 	bl	8003d20 <pbuf_realloc>
                    prev->next = cseg;
 80055c8:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 80055cc:	4629      	mov	r1, r5
 80055ce:	4620      	mov	r0, r4
 80055d0:	e7c1      	b.n	8005556 <tcp_receive+0x7ee>
 80055d2:	bf00      	nop
 80055d4:	08009e2c 	.word	0x08009e2c
 80055d8:	08009f73 	.word	0x08009f73
 80055dc:	08008f43 	.word	0x08008f43
 80055e0:	200001e0 	.word	0x200001e0
 80055e4:	200001e4 	.word	0x200001e4
 80055e8:	200001cc 	.word	0x200001cc
 80055ec:	08009f92 	.word	0x08009f92
              if (next->next == NULL &&
 80055f0:	6829      	ldr	r1, [r5, #0]
 80055f2:	46a8      	mov	r8, r5
 80055f4:	2900      	cmp	r1, #0
 80055f6:	d1b3      	bne.n	8005560 <tcp_receive+0x7f8>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80055f8:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	dd84      	ble.n	8005508 <tcp_receive+0x7a0>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80055fe:	8980      	ldrh	r0, [r0, #12]
 8005600:	f7fc fcff 	bl	8002002 <lwip_htons>
 8005604:	07c2      	lsls	r2, r0, #31
 8005606:	f53f af7f 	bmi.w	8005508 <tcp_receive+0x7a0>
                next->next = tcp_seg_copy(&inseg);
 800560a:	483d      	ldr	r0, [pc, #244]	; (8005700 <tcp_receive+0x998>)
 800560c:	f7fe fe3c 	bl	8004288 <tcp_seg_copy>
 8005610:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8005612:	2800      	cmp	r0, #0
 8005614:	f43f af78 	beq.w	8005508 <tcp_receive+0x7a0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8005618:	68eb      	ldr	r3, [r5, #12]
 800561a:	6831      	ldr	r1, [r6, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	892b      	ldrh	r3, [r5, #8]
 8005620:	4413      	add	r3, r2
 8005622:	1a5b      	subs	r3, r3, r1
 8005624:	2b00      	cmp	r3, #0
 8005626:	dd05      	ble.n	8005634 <tcp_receive+0x8cc>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8005628:	1a89      	subs	r1, r1, r2
                    pbuf_realloc(next->p, next->len);
 800562a:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800562c:	b289      	uxth	r1, r1
 800562e:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8005630:	f7fe fb76 	bl	8003d20 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8005634:	6832      	ldr	r2, [r6, #0]
 8005636:	883b      	ldrh	r3, [r7, #0]
 8005638:	4413      	add	r3, r2
 800563a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800563c:	1a9b      	subs	r3, r3, r2
 800563e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	2b00      	cmp	r3, #0
 8005644:	f77f af60 	ble.w	8005508 <tcp_receive+0x7a0>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8005648:	682b      	ldr	r3, [r5, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	8998      	ldrh	r0, [r3, #12]
 800564e:	f7fc fcd8 	bl	8002002 <lwip_htons>
 8005652:	07c3      	lsls	r3, r0, #31
 8005654:	d511      	bpl.n	800567a <tcp_receive+0x912>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8005656:	682b      	ldr	r3, [r5, #0]
 8005658:	f8d3 900c 	ldr.w	r9, [r3, #12]
 800565c:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8005660:	4640      	mov	r0, r8
 8005662:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8005666:	f7fc fccc 	bl	8002002 <lwip_htons>
 800566a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800566e:	f7fc fcc8 	bl	8002002 <lwip_htons>
 8005672:	ea40 0808 	orr.w	r8, r0, r8
 8005676:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800567a:	6832      	ldr	r2, [r6, #0]
 800567c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800567e:	682b      	ldr	r3, [r5, #0]
 8005680:	1a89      	subs	r1, r1, r2
 8005682:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 8005684:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8005686:	4411      	add	r1, r2
 8005688:	b289      	uxth	r1, r1
 800568a:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800568c:	f7fe fb48 	bl	8003d20 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	891d      	ldrh	r5, [r3, #8]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	8998      	ldrh	r0, [r3, #12]
 8005698:	f7fc fcb3 	bl	8002002 <lwip_htons>
 800569c:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80056a0:	6833      	ldr	r3, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 80056a2:	bf18      	it	ne
 80056a4:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80056a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 80056a8:	4428      	add	r0, r5
 80056aa:	b280      	uxth	r0, r0
 80056ac:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80056ae:	4418      	add	r0, r3
 80056b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80056b2:	4413      	add	r3, r2
 80056b4:	4298      	cmp	r0, r3
 80056b6:	f43f af27 	beq.w	8005508 <tcp_receive+0x7a0>
 80056ba:	4b12      	ldr	r3, [pc, #72]	; (8005704 <tcp_receive+0x99c>)
 80056bc:	f240 627b 	movw	r2, #1659	; 0x67b
 80056c0:	4911      	ldr	r1, [pc, #68]	; (8005708 <tcp_receive+0x9a0>)
 80056c2:	4812      	ldr	r0, [pc, #72]	; (800570c <tcp_receive+0x9a4>)
}
 80056c4:	b003      	add	sp, #12
 80056c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80056ca:	f002 ba8d 	b.w	8007be8 <iprintf>
      tcp_send_empty_ack(pcb);
 80056ce:	4620      	mov	r0, r4
}
 80056d0:	b003      	add	sp, #12
 80056d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 80056d6:	f000 bef3 	b.w	80064c0 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80056da:	6833      	ldr	r3, [r6, #0]
 80056dc:	1a99      	subs	r1, r3, r2
 80056de:	2900      	cmp	r1, #0
 80056e0:	db06      	blt.n	80056f0 <tcp_receive+0x988>
 80056e2:	3301      	adds	r3, #1
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f77f af0c 	ble.w	8005508 <tcp_receive+0x7a0>
      tcp_ack_now(pcb);
 80056f0:	7ea3      	ldrb	r3, [r4, #26]
 80056f2:	e681      	b.n	80053f8 <tcp_receive+0x690>
        pcb->dupacks = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056fa:	f7ff bbaa 	b.w	8004e52 <tcp_receive+0xea>
 80056fe:	bf00      	nop
 8005700:	200001cc 	.word	0x200001cc
 8005704:	08009e2c 	.word	0x08009e2c
 8005708:	08009f01 	.word	0x08009f01
 800570c:	08008f43 	.word	0x08008f43

08005710 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8005710:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <tcp_getoptbyte+0x30>)
 8005712:	4a0c      	ldr	r2, [pc, #48]	; (8005744 <tcp_getoptbyte+0x34>)
 8005714:	6819      	ldr	r1, [r3, #0]
{
 8005716:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8005718:	b121      	cbz	r1, 8005724 <tcp_getoptbyte+0x14>
 800571a:	480b      	ldr	r0, [pc, #44]	; (8005748 <tcp_getoptbyte+0x38>)
 800571c:	8813      	ldrh	r3, [r2, #0]
 800571e:	8800      	ldrh	r0, [r0, #0]
 8005720:	4283      	cmp	r3, r0
 8005722:	d207      	bcs.n	8005734 <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8005724:	4b09      	ldr	r3, [pc, #36]	; (800574c <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 8005726:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8005728:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 800572a:	1c48      	adds	r0, r1, #1
 800572c:	440b      	add	r3, r1
 800572e:	8010      	strh	r0, [r2, #0]
 8005730:	7d18      	ldrb	r0, [r3, #20]
 8005732:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8005734:	1c5c      	adds	r4, r3, #1
 8005736:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 8005738:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800573a:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 800573c:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800573e:	bd10      	pop	{r4, pc}
 8005740:	200001f8 	.word	0x200001f8
 8005744:	200001ec 	.word	0x200001ec
 8005748:	200001f4 	.word	0x200001f4
 800574c:	200001f0 	.word	0x200001f0

08005750 <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8005750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8005752:	4d19      	ldr	r5, [pc, #100]	; (80057b8 <tcp_parseopt.isra.1.part.2+0x68>)
 8005754:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 8005756:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8005758:	4e18      	ldr	r6, [pc, #96]	; (80057bc <tcp_parseopt.isra.1.part.2+0x6c>)
 800575a:	802b      	strh	r3, [r5, #0]
 800575c:	8834      	ldrh	r4, [r6, #0]
 800575e:	882b      	ldrh	r3, [r5, #0]
 8005760:	42a3      	cmp	r3, r4
 8005762:	d300      	bcc.n	8005766 <tcp_parseopt.isra.1.part.2+0x16>
 8005764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 8005766:	f7ff ffd3 	bl	8005710 <tcp_getoptbyte>
      switch (opt) {
 800576a:	2801      	cmp	r0, #1
 800576c:	d0f6      	beq.n	800575c <tcp_parseopt.isra.1.part.2+0xc>
 800576e:	d3f9      	bcc.n	8005764 <tcp_parseopt.isra.1.part.2+0x14>
 8005770:	2802      	cmp	r0, #2
 8005772:	d117      	bne.n	80057a4 <tcp_parseopt.isra.1.part.2+0x54>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8005774:	f7ff ffcc 	bl	8005710 <tcp_getoptbyte>
 8005778:	2804      	cmp	r0, #4
 800577a:	d1f3      	bne.n	8005764 <tcp_parseopt.isra.1.part.2+0x14>
 800577c:	882b      	ldrh	r3, [r5, #0]
 800577e:	3301      	adds	r3, #1
 8005780:	42a3      	cmp	r3, r4
 8005782:	daef      	bge.n	8005764 <tcp_parseopt.isra.1.part.2+0x14>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8005784:	f7ff ffc4 	bl	8005710 <tcp_getoptbyte>
 8005788:	0200      	lsls	r0, r0, #8
 800578a:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 800578c:	f7ff ffc0 	bl	8005710 <tcp_getoptbyte>
 8005790:	4320      	orrs	r0, r4
 8005792:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8005794:	1e43      	subs	r3, r0, #1
 8005796:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800579a:	bf28      	it	cs
 800579c:	f44f 7006 	movcs.w	r0, #536	; 0x218
 80057a0:	8038      	strh	r0, [r7, #0]
 80057a2:	e7db      	b.n	800575c <tcp_parseopt.isra.1.part.2+0xc>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80057a4:	f7ff ffb4 	bl	8005710 <tcp_getoptbyte>
        if (data < 2) {
 80057a8:	2801      	cmp	r0, #1
 80057aa:	d9db      	bls.n	8005764 <tcp_parseopt.isra.1.part.2+0x14>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80057ac:	882b      	ldrh	r3, [r5, #0]
 80057ae:	3b02      	subs	r3, #2
 80057b0:	4418      	add	r0, r3
 80057b2:	8028      	strh	r0, [r5, #0]
 80057b4:	e7d2      	b.n	800575c <tcp_parseopt.isra.1.part.2+0xc>
 80057b6:	bf00      	nop
 80057b8:	200001ec 	.word	0x200001ec
 80057bc:	200001fc 	.word	0x200001fc

080057c0 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 80057c0:	4b0d      	ldr	r3, [pc, #52]	; (80057f8 <tcp_input_delayed_close+0x38>)
{
 80057c2:	b510      	push	{r4, lr}
 80057c4:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 80057c6:	7818      	ldrb	r0, [r3, #0]
 80057c8:	f010 0010 	ands.w	r0, r0, #16
 80057cc:	d012      	beq.n	80057f4 <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 80057ce:	7ea3      	ldrb	r3, [r4, #26]
 80057d0:	06db      	lsls	r3, r3, #27
 80057d2:	d406      	bmi.n	80057e2 <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80057d4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80057d8:	b11b      	cbz	r3, 80057e2 <tcp_input_delayed_close+0x22>
 80057da:	f06f 010e 	mvn.w	r1, #14
 80057de:	6920      	ldr	r0, [r4, #16]
 80057e0:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80057e2:	4621      	mov	r1, r4
 80057e4:	4805      	ldr	r0, [pc, #20]	; (80057fc <tcp_input_delayed_close+0x3c>)
 80057e6:	f7fe ff67 	bl	80046b8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80057ea:	2001      	movs	r0, #1
 80057ec:	4621      	mov	r1, r4
 80057ee:	f7fe f807 	bl	8003800 <memp_free>
 80057f2:	2001      	movs	r0, #1
}
 80057f4:	bd10      	pop	{r4, pc}
 80057f6:	bf00      	nop
 80057f8:	200001e4 	.word	0x200001e4
 80057fc:	20003748 	.word	0x20003748

08005800 <tcp_input>:
{
 8005800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 8005804:	6843      	ldr	r3, [r0, #4]
{
 8005806:	b089      	sub	sp, #36	; 0x24
  tcphdr = (struct tcp_hdr *)p->payload;
 8005808:	4e9e      	ldr	r6, [pc, #632]	; (8005a84 <tcp_input+0x284>)
{
 800580a:	4605      	mov	r5, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 800580c:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 800580e:	8943      	ldrh	r3, [r0, #10]
 8005810:	2b13      	cmp	r3, #19
 8005812:	f240 81b2 	bls.w	8005b7a <tcp_input+0x37a>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005816:	4f9c      	ldr	r7, [pc, #624]	; (8005a88 <tcp_input+0x288>)
 8005818:	6839      	ldr	r1, [r7, #0]
 800581a:	46b8      	mov	r8, r7
 800581c:	6978      	ldr	r0, [r7, #20]
 800581e:	f7fd f9fc 	bl	8002c1a <ip4_addr_isbroadcast_u32>
 8005822:	4604      	mov	r4, r0
 8005824:	2800      	cmp	r0, #0
 8005826:	f040 81a8 	bne.w	8005b7a <tcp_input+0x37a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005830:	2be0      	cmp	r3, #224	; 0xe0
 8005832:	f000 81a2 	beq.w	8005b7a <tcp_input+0x37a>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8005836:	6833      	ldr	r3, [r6, #0]
 8005838:	8998      	ldrh	r0, [r3, #12]
 800583a:	f7fc fbe2 	bl	8002002 <lwip_htons>
 800583e:	0a81      	lsrs	r1, r0, #10
 8005840:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8005844:	2913      	cmp	r1, #19
 8005846:	f240 8198 	bls.w	8005b7a <tcp_input+0x37a>
 800584a:	b289      	uxth	r1, r1
 800584c:	892b      	ldrh	r3, [r5, #8]
 800584e:	428b      	cmp	r3, r1
 8005850:	f0c0 8193 	bcc.w	8005b7a <tcp_input+0x37a>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8005854:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 8005858:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800585a:	4a8c      	ldr	r2, [pc, #560]	; (8005a8c <tcp_input+0x28c>)
 800585c:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800585e:	4f8c      	ldr	r7, [pc, #560]	; (8005a90 <tcp_input+0x290>)
  if (p->len >= hdrlen_bytes) {
 8005860:	4288      	cmp	r0, r1
 8005862:	9206      	str	r2, [sp, #24]
  tcphdr_opt2 = NULL;
 8005864:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8005866:	8013      	strh	r3, [r2, #0]
 8005868:	4c8a      	ldr	r4, [pc, #552]	; (8005a94 <tcp_input+0x294>)
  if (p->len >= hdrlen_bytes) {
 800586a:	d344      	bcc.n	80058f6 <tcp_input+0xf6>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800586c:	4249      	negs	r1, r1
 800586e:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8005870:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8005872:	f7fe f90d 	bl	8003a90 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8005876:	6834      	ldr	r4, [r6, #0]
  prev = NULL;
 8005878:	f04f 0a00 	mov.w	sl, #0
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800587c:	f8df b268 	ldr.w	fp, [pc, #616]	; 8005ae8 <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8005880:	8820      	ldrh	r0, [r4, #0]
 8005882:	f7fc fbbe 	bl	8002002 <lwip_htons>
 8005886:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8005888:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800588a:	4f83      	ldr	r7, [pc, #524]	; (8005a98 <tcp_input+0x298>)
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800588c:	8860      	ldrh	r0, [r4, #2]
 800588e:	f7fc fbb8 	bl	8002002 <lwip_htons>
 8005892:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8005894:	6834      	ldr	r4, [r6, #0]
 8005896:	6860      	ldr	r0, [r4, #4]
 8005898:	f7fc fbb6 	bl	8002008 <lwip_htonl>
 800589c:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800589e:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80058a0:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80058a4:	68a0      	ldr	r0, [r4, #8]
 80058a6:	f7fc fbaf 	bl	8002008 <lwip_htonl>
 80058aa:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80058ac:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80058ae:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80058b0:	89e0      	ldrh	r0, [r4, #14]
 80058b2:	f7fc fba6 	bl	8002002 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 80058b6:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80058b8:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 80058ba:	8998      	ldrh	r0, [r3, #12]
 80058bc:	f7fc fba1 	bl	8002002 <lwip_htons>
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80058c0:	8929      	ldrh	r1, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 80058c2:	b2c0      	uxtb	r0, r0
 80058c4:	4a75      	ldr	r2, [pc, #468]	; (8005a9c <tcp_input+0x29c>)
 80058c6:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80058ca:	f010 0003 	ands.w	r0, r0, #3
 80058ce:	9203      	str	r2, [sp, #12]
 80058d0:	bf18      	it	ne
 80058d2:	2001      	movne	r0, #1
  flags = TCPH_FLAGS(tcphdr);
 80058d4:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80058d6:	4b72      	ldr	r3, [pc, #456]	; (8005aa0 <tcp_input+0x2a0>)
 80058d8:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80058da:	4972      	ldr	r1, [pc, #456]	; (8005aa4 <tcp_input+0x2a4>)
 80058dc:	9304      	str	r3, [sp, #16]
 80058de:	680c      	ldr	r4, [r1, #0]
 80058e0:	4689      	mov	r9, r1
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80058e2:	8018      	strh	r0, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80058e4:	2c00      	cmp	r4, #0
 80058e6:	d140      	bne.n	800596a <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80058e8:	4b6f      	ldr	r3, [pc, #444]	; (8005aa8 <tcp_input+0x2a8>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80058ea:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8005aac <tcp_input+0x2ac>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80058ee:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80058f0:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8005aec <tcp_input+0x2ec>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80058f4:	e148      	b.n	8005b88 <tcp_input+0x388>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80058f6:	682b      	ldr	r3, [r5, #0]
 80058f8:	b92b      	cbnz	r3, 8005906 <tcp_input+0x106>
 80058fa:	4b6c      	ldr	r3, [pc, #432]	; (8005aac <tcp_input+0x2ac>)
 80058fc:	22b2      	movs	r2, #178	; 0xb2
 80058fe:	496c      	ldr	r1, [pc, #432]	; (8005ab0 <tcp_input+0x2b0>)
 8005900:	486c      	ldr	r0, [pc, #432]	; (8005ab4 <tcp_input+0x2b4>)
 8005902:	f002 f971 	bl	8007be8 <iprintf>
    pbuf_header(p, -TCP_HLEN);
 8005906:	f06f 0113 	mvn.w	r1, #19
 800590a:	4628      	mov	r0, r5
 800590c:	f7fe f8c0 	bl	8003a90 <pbuf_header>
    tcphdr_opt1len = p->len;
 8005910:	8969      	ldrh	r1, [r5, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8005912:	9b06      	ldr	r3, [sp, #24]
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8005914:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 8005916:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8005918:	881c      	ldrh	r4, [r3, #0]
 800591a:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800591c:	4249      	negs	r1, r1
 800591e:	b209      	sxth	r1, r1
 8005920:	f7fe f8b6 	bl	8003a90 <pbuf_header>
    if (opt2len > p->next->len) {
 8005924:	6828      	ldr	r0, [r5, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8005926:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 8005928:	8943      	ldrh	r3, [r0, #10]
 800592a:	42a3      	cmp	r3, r4
 800592c:	f0c0 8125 	bcc.w	8005b7a <tcp_input+0x37a>
    pbuf_header(p->next, -(s16_t)opt2len);
 8005930:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8005932:	6843      	ldr	r3, [r0, #4]
    pbuf_header(p->next, -(s16_t)opt2len);
 8005934:	b209      	sxth	r1, r1
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8005936:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8005938:	f7fe f8aa 	bl	8003a90 <pbuf_header>
    p->tot_len -= opt2len;
 800593c:	892b      	ldrh	r3, [r5, #8]
 800593e:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8005940:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 8005942:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8005944:	b12b      	cbz	r3, 8005952 <tcp_input+0x152>
 8005946:	4b59      	ldr	r3, [pc, #356]	; (8005aac <tcp_input+0x2ac>)
 8005948:	22cf      	movs	r2, #207	; 0xcf
 800594a:	495b      	ldr	r1, [pc, #364]	; (8005ab8 <tcp_input+0x2b8>)
 800594c:	4859      	ldr	r0, [pc, #356]	; (8005ab4 <tcp_input+0x2b4>)
 800594e:	f002 f94b 	bl	8007be8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8005952:	682b      	ldr	r3, [r5, #0]
 8005954:	892a      	ldrh	r2, [r5, #8]
 8005956:	891b      	ldrh	r3, [r3, #8]
 8005958:	429a      	cmp	r2, r3
 800595a:	d08c      	beq.n	8005876 <tcp_input+0x76>
 800595c:	4b53      	ldr	r3, [pc, #332]	; (8005aac <tcp_input+0x2ac>)
 800595e:	22d0      	movs	r2, #208	; 0xd0
 8005960:	4956      	ldr	r1, [pc, #344]	; (8005abc <tcp_input+0x2bc>)
 8005962:	4854      	ldr	r0, [pc, #336]	; (8005ab4 <tcp_input+0x2b4>)
 8005964:	f002 f940 	bl	8007be8 <iprintf>
 8005968:	e785      	b.n	8005876 <tcp_input+0x76>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800596a:	7d23      	ldrb	r3, [r4, #20]
 800596c:	b92b      	cbnz	r3, 800597a <tcp_input+0x17a>
 800596e:	4b4f      	ldr	r3, [pc, #316]	; (8005aac <tcp_input+0x2ac>)
 8005970:	22e2      	movs	r2, #226	; 0xe2
 8005972:	4953      	ldr	r1, [pc, #332]	; (8005ac0 <tcp_input+0x2c0>)
 8005974:	484f      	ldr	r0, [pc, #316]	; (8005ab4 <tcp_input+0x2b4>)
 8005976:	f002 f937 	bl	8007be8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800597a:	7d23      	ldrb	r3, [r4, #20]
 800597c:	2b0a      	cmp	r3, #10
 800597e:	d105      	bne.n	800598c <tcp_input+0x18c>
 8005980:	4b4a      	ldr	r3, [pc, #296]	; (8005aac <tcp_input+0x2ac>)
 8005982:	22e3      	movs	r2, #227	; 0xe3
 8005984:	494f      	ldr	r1, [pc, #316]	; (8005ac4 <tcp_input+0x2c4>)
 8005986:	484b      	ldr	r0, [pc, #300]	; (8005ab4 <tcp_input+0x2b4>)
 8005988:	f002 f92e 	bl	8007be8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800598c:	7d23      	ldrb	r3, [r4, #20]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d105      	bne.n	800599e <tcp_input+0x19e>
 8005992:	4b46      	ldr	r3, [pc, #280]	; (8005aac <tcp_input+0x2ac>)
 8005994:	22e4      	movs	r2, #228	; 0xe4
 8005996:	494c      	ldr	r1, [pc, #304]	; (8005ac8 <tcp_input+0x2c8>)
 8005998:	4846      	ldr	r0, [pc, #280]	; (8005ab4 <tcp_input+0x2b4>)
 800599a:	f002 f925 	bl	8007be8 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800599e:	6832      	ldr	r2, [r6, #0]
 80059a0:	8b21      	ldrh	r1, [r4, #24]
 80059a2:	8813      	ldrh	r3, [r2, #0]
 80059a4:	4299      	cmp	r1, r3
 80059a6:	68e3      	ldr	r3, [r4, #12]
 80059a8:	d169      	bne.n	8005a7e <tcp_input+0x27e>
 80059aa:	8ae1      	ldrh	r1, [r4, #22]
 80059ac:	8852      	ldrh	r2, [r2, #2]
 80059ae:	4291      	cmp	r1, r2
 80059b0:	d165      	bne.n	8005a7e <tcp_input+0x27e>
        pcb->local_port == tcphdr->dest &&
 80059b2:	6861      	ldr	r1, [r4, #4]
 80059b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80059b8:	4291      	cmp	r1, r2
 80059ba:	d160      	bne.n	8005a7e <tcp_input+0x27e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80059bc:	6821      	ldr	r1, [r4, #0]
 80059be:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80059c2:	4291      	cmp	r1, r2
 80059c4:	d15b      	bne.n	8005a7e <tcp_input+0x27e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80059c6:	429c      	cmp	r4, r3
 80059c8:	f040 8406 	bne.w	80061d8 <tcp_input+0x9d8>
 80059cc:	4b37      	ldr	r3, [pc, #220]	; (8005aac <tcp_input+0x2ac>)
 80059ce:	22ec      	movs	r2, #236	; 0xec
 80059d0:	493e      	ldr	r1, [pc, #248]	; (8005acc <tcp_input+0x2cc>)
 80059d2:	4838      	ldr	r0, [pc, #224]	; (8005ab4 <tcp_input+0x2b4>)
 80059d4:	f002 f908 	bl	8007be8 <iprintf>
      if (prev != NULL) {
 80059d8:	f1ba 0f00 	cmp.w	sl, #0
 80059dc:	d007      	beq.n	80059ee <tcp_input+0x1ee>
        prev->next = pcb->next;
 80059de:	68e3      	ldr	r3, [r4, #12]
 80059e0:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 80059e4:	f8d9 3000 	ldr.w	r3, [r9]
        tcp_active_pcbs = pcb;
 80059e8:	f8c9 4000 	str.w	r4, [r9]
        pcb->next = tcp_active_pcbs;
 80059ec:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80059ee:	68e3      	ldr	r3, [r4, #12]
 80059f0:	429c      	cmp	r4, r3
 80059f2:	d105      	bne.n	8005a00 <tcp_input+0x200>
 80059f4:	4b2d      	ldr	r3, [pc, #180]	; (8005aac <tcp_input+0x2ac>)
 80059f6:	22f4      	movs	r2, #244	; 0xf4
 80059f8:	4935      	ldr	r1, [pc, #212]	; (8005ad0 <tcp_input+0x2d0>)
 80059fa:	482e      	ldr	r0, [pc, #184]	; (8005ab4 <tcp_input+0x2b4>)
 80059fc:	f002 f8f4 	bl	8007be8 <iprintf>
    inseg.next = NULL;
 8005a00:	4b34      	ldr	r3, [pc, #208]	; (8005ad4 <tcp_input+0x2d4>)
 8005a02:	2200      	movs	r2, #0
    inseg.len = p->tot_len;
 8005a04:	8929      	ldrh	r1, [r5, #8]
    inseg.next = NULL;
 8005a06:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8005a08:	8119      	strh	r1, [r3, #8]
    inseg.tcphdr = tcphdr;
 8005a0a:	6831      	ldr	r1, [r6, #0]
    recv_flags = 0;
 8005a0c:	4832      	ldr	r0, [pc, #200]	; (8005ad8 <tcp_input+0x2d8>)
    inseg.tcphdr = tcphdr;
 8005a0e:	60d9      	str	r1, [r3, #12]
    inseg.p = p;
 8005a10:	605d      	str	r5, [r3, #4]
 8005a12:	4680      	mov	r8, r0
    recv_data = NULL;
 8005a14:	4b31      	ldr	r3, [pc, #196]	; (8005adc <tcp_input+0x2dc>)
    recv_acked = 0;
 8005a16:	4932      	ldr	r1, [pc, #200]	; (8005ae0 <tcp_input+0x2e0>)
    recv_data = NULL;
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	469a      	mov	sl, r3
    recv_flags = 0;
 8005a1c:	7002      	strb	r2, [r0, #0]
    recv_acked = 0;
 8005a1e:	800a      	strh	r2, [r1, #0]
    if (flags & TCP_PSH) {
 8005a20:	9a03      	ldr	r2, [sp, #12]
 8005a22:	9105      	str	r1, [sp, #20]
 8005a24:	7812      	ldrb	r2, [r2, #0]
 8005a26:	f012 0f08 	tst.w	r2, #8
 8005a2a:	d003      	beq.n	8005a34 <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 8005a2c:	7b6b      	ldrb	r3, [r5, #13]
 8005a2e:	f043 0301 	orr.w	r3, r3, #1
 8005a32:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8005a34:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005a36:	4d2b      	ldr	r5, [pc, #172]	; (8005ae4 <tcp_input+0x2e4>)
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8137 	beq.w	8005cac <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f7fe ff4c 	bl	80048dc <tcp_process_refused_data>
 8005a44:	300d      	adds	r0, #13
 8005a46:	d008      	beq.n	8005a5a <tcp_input+0x25a>
 8005a48:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 812e 	beq.w	8005cac <tcp_input+0x4ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8005a50:	9b04      	ldr	r3, [sp, #16]
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 8129 	beq.w	8005cac <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 8005a5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a5c:	b913      	cbnz	r3, 8005a64 <tcp_input+0x264>
          tcp_send_empty_ack(pcb);
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f000 fd2e 	bl	80064c0 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 8005a64:	2400      	movs	r4, #0
 8005a66:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL)
 8005a68:	4d1a      	ldr	r5, [pc, #104]	; (8005ad4 <tcp_input+0x2d4>)
    recv_data = NULL;
 8005a6a:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 8005a6e:	6868      	ldr	r0, [r5, #4]
 8005a70:	b110      	cbz	r0, 8005a78 <tcp_input+0x278>
      pbuf_free(inseg.p);
 8005a72:	f7fe f813 	bl	8003a9c <pbuf_free>
      inseg.p = NULL;
 8005a76:	606c      	str	r4, [r5, #4]
}
 8005a78:	b009      	add	sp, #36	; 0x24
 8005a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005a7e:	46a2      	mov	sl, r4
 8005a80:	461c      	mov	r4, r3
 8005a82:	e72f      	b.n	80058e4 <tcp_input+0xe4>
 8005a84:	200001f0 	.word	0x200001f0
 8005a88:	20000220 	.word	0x20000220
 8005a8c:	200001fc 	.word	0x200001fc
 8005a90:	200001f8 	.word	0x200001f8
 8005a94:	200001f4 	.word	0x200001f4
 8005a98:	200001c4 	.word	0x200001c4
 8005a9c:	200001c8 	.word	0x200001c8
 8005aa0:	200001fe 	.word	0x200001fe
 8005aa4:	20003748 	.word	0x20003748
 8005aa8:	20003758 	.word	0x20003758
 8005aac:	08009e2c 	.word	0x08009e2c
 8005ab0:	08009c76 	.word	0x08009c76
 8005ab4:	08008f43 	.word	0x08008f43
 8005ab8:	08009c86 	.word	0x08009c86
 8005abc:	08009c92 	.word	0x08009c92
 8005ac0:	08009cb1 	.word	0x08009cb1
 8005ac4:	08009cd8 	.word	0x08009cd8
 8005ac8:	08009d02 	.word	0x08009d02
 8005acc:	08009d29 	.word	0x08009d29
 8005ad0:	08009d54 	.word	0x08009d54
 8005ad4:	200001cc 	.word	0x200001cc
 8005ad8:	200001e4 	.word	0x200001e4
 8005adc:	200001e0 	.word	0x200001e0
 8005ae0:	200001dc 	.word	0x200001dc
 8005ae4:	2000375c 	.word	0x2000375c
 8005ae8:	200001e8 	.word	0x200001e8
 8005aec:	08009d7e 	.word	0x08009d7e
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005af0:	7d23      	ldrb	r3, [r4, #20]
 8005af2:	2b0a      	cmp	r3, #10
 8005af4:	d005      	beq.n	8005b02 <tcp_input+0x302>
 8005af6:	4653      	mov	r3, sl
 8005af8:	22fe      	movs	r2, #254	; 0xfe
 8005afa:	4649      	mov	r1, r9
 8005afc:	489d      	ldr	r0, [pc, #628]	; (8005d74 <tcp_input+0x574>)
 8005afe:	f002 f873 	bl	8007be8 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8005b02:	6833      	ldr	r3, [r6, #0]
 8005b04:	8b22      	ldrh	r2, [r4, #24]
 8005b06:	8818      	ldrh	r0, [r3, #0]
 8005b08:	4290      	cmp	r0, r2
 8005b0a:	d13c      	bne.n	8005b86 <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8005b0c:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 8005b0e:	885a      	ldrh	r2, [r3, #2]
 8005b10:	428a      	cmp	r2, r1
 8005b12:	d138      	bne.n	8005b86 <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8005b14:	6861      	ldr	r1, [r4, #4]
 8005b16:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005b1a:	4299      	cmp	r1, r3
 8005b1c:	d133      	bne.n	8005b86 <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8005b1e:	6821      	ldr	r1, [r4, #0]
 8005b20:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005b24:	4299      	cmp	r1, r3
 8005b26:	d12e      	bne.n	8005b86 <tcp_input+0x386>
  if (flags & TCP_RST) {
 8005b28:	9b03      	ldr	r3, [sp, #12]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	0759      	lsls	r1, r3, #29
 8005b2e:	d424      	bmi.n	8005b7a <tcp_input+0x37a>
  if (flags & TCP_SYN) {
 8005b30:	079e      	lsls	r6, r3, #30
 8005b32:	d513      	bpl.n	8005b5c <tcp_input+0x35c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8005b34:	f8db 1000 	ldr.w	r1, [fp]
 8005b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b3a:	1acb      	subs	r3, r1, r3
 8005b3c:	d413      	bmi.n	8005b66 <tcp_input+0x366>
 8005b3e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8005b40:	1b9b      	subs	r3, r3, r6
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	dc0f      	bgt.n	8005b66 <tcp_input+0x366>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8005b46:	9b04      	ldr	r3, [sp, #16]
 8005b48:	881c      	ldrh	r4, [r3, #0]
 8005b4a:	9001      	str	r0, [sp, #4]
 8005b4c:	9200      	str	r2, [sp, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8005b4e:	4b8a      	ldr	r3, [pc, #552]	; (8005d78 <tcp_input+0x578>)
 8005b50:	4421      	add	r1, r4
 8005b52:	1d1a      	adds	r2, r3, #4
 8005b54:	6838      	ldr	r0, [r7, #0]
 8005b56:	f000 fe67 	bl	8006828 <tcp_rst>
 8005b5a:	e00e      	b.n	8005b7a <tcp_input+0x37a>
  } else if (flags & TCP_FIN) {
 8005b5c:	07d8      	lsls	r0, r3, #31
    pcb->tmr = tcp_ticks;
 8005b5e:	bf42      	ittt	mi
 8005b60:	4b86      	ldrmi	r3, [pc, #536]	; (8005d7c <tcp_input+0x57c>)
 8005b62:	681b      	ldrmi	r3, [r3, #0]
 8005b64:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 8005b66:	9b04      	ldr	r3, [sp, #16]
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b133      	cbz	r3, 8005b7a <tcp_input+0x37a>
    pcb->flags |= TF_ACK_NOW;
 8005b6c:	7ea3      	ldrb	r3, [r4, #26]
 8005b6e:	f043 0302 	orr.w	r3, r3, #2
 8005b72:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8005b74:	4620      	mov	r0, r4
 8005b76:	f000 fcd9 	bl	800652c <tcp_output>
  pbuf_free(p);
 8005b7a:	4628      	mov	r0, r5
}
 8005b7c:	b009      	add	sp, #36	; 0x24
 8005b7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8005b82:	f7fd bf8b 	b.w	8003a9c <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005b86:	68e4      	ldr	r4, [r4, #12]
 8005b88:	2c00      	cmp	r4, #0
 8005b8a:	d1b1      	bne.n	8005af0 <tcp_input+0x2f0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005b8c:	4b7c      	ldr	r3, [pc, #496]	; (8005d80 <tcp_input+0x580>)
      if (lpcb->local_port == tcphdr->dest) {
 8005b8e:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005b90:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8005b92:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005b96:	4689      	mov	r9, r1
 8005b98:	f1b9 0f00 	cmp.w	r9, #0
 8005b9c:	d111      	bne.n	8005bc2 <tcp_input+0x3c2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8005b9e:	8990      	ldrh	r0, [r2, #12]
 8005ba0:	f7fc fa2f 	bl	8002002 <lwip_htons>
 8005ba4:	0743      	lsls	r3, r0, #29
 8005ba6:	d4e8      	bmi.n	8005b7a <tcp_input+0x37a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005ba8:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8005baa:	9a04      	ldr	r2, [sp, #16]
 8005bac:	f8db 1000 	ldr.w	r1, [fp]
 8005bb0:	8810      	ldrh	r0, [r2, #0]
 8005bb2:	881a      	ldrh	r2, [r3, #0]
 8005bb4:	4401      	add	r1, r0
 8005bb6:	9201      	str	r2, [sp, #4]
 8005bb8:	885b      	ldrh	r3, [r3, #2]
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	4b6e      	ldr	r3, [pc, #440]	; (8005d78 <tcp_input+0x578>)
 8005bbe:	1d1a      	adds	r2, r3, #4
 8005bc0:	e7c8      	b.n	8005b54 <tcp_input+0x354>
      if (lpcb->local_port == tcphdr->dest) {
 8005bc2:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 8005bc6:	8853      	ldrh	r3, [r2, #2]
 8005bc8:	4283      	cmp	r3, r0
 8005bca:	d107      	bne.n	8005bdc <tcp_input+0x3dc>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8005bcc:	f8d9 3000 	ldr.w	r3, [r9]
 8005bd0:	4573      	cmp	r3, lr
 8005bd2:	f000 82dd 	beq.w	8006190 <tcp_input+0x990>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 82da 	beq.w	8006190 <tcp_input+0x990>
 8005bdc:	464c      	mov	r4, r9
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005bde:	f8d9 900c 	ldr.w	r9, [r9, #12]
 8005be2:	e7d9      	b.n	8005b98 <tcp_input+0x398>
  } else if (flags & TCP_SYN) {
 8005be4:	0798      	lsls	r0, r3, #30
 8005be6:	d5c8      	bpl.n	8005b7a <tcp_input+0x37a>
    npcb = tcp_alloc(pcb->prio);
 8005be8:	f899 0015 	ldrb.w	r0, [r9, #21]
 8005bec:	f7fe ffb4 	bl	8004b58 <tcp_alloc>
    if (npcb == NULL) {
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	b950      	cbnz	r0, 8005c0a <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8005bf4:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d0be      	beq.n	8005b7a <tcp_input+0x37a>
 8005bfc:	4601      	mov	r1, r0
 8005bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005c02:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8005c06:	4798      	blx	r3
 8005c08:	e7b7      	b.n	8005b7a <tcp_input+0x37a>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8005c0a:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 8005c0e:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8005c10:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8005c12:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005c16:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8005c18:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 8005c1c:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8005c1e:	7813      	ldrb	r3, [r2, #0]
 8005c20:	7852      	ldrb	r2, [r2, #1]
 8005c22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c26:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8005c2c:	f8db 3000 	ldr.w	r3, [fp]
 8005c30:	3301      	adds	r3, #1
 8005c32:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8005c34:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8005c36:	f7ff f817 	bl	8004c68 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8005c3a:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 8005c3e:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8005c40:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 8005c42:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 8005c44:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8005c46:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8005c48:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_lbb = iss;
 8005c4c:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 8005c4e:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8005c50:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8005c54:	f899 3008 	ldrb.w	r3, [r9, #8]
 8005c58:	f003 030c 	and.w	r3, r3, #12
 8005c5c:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8005c5e:	4b49      	ldr	r3, [pc, #292]	; (8005d84 <tcp_input+0x584>)
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	601c      	str	r4, [r3, #0]
 8005c64:	60e2      	str	r2, [r4, #12]
 8005c66:	f000 ff81 	bl	8006b6c <tcp_timer_needed>
 8005c6a:	4b47      	ldr	r3, [pc, #284]	; (8005d88 <tcp_input+0x588>)
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 8005c70:	9b06      	ldr	r3, [sp, #24]
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	b11b      	cbz	r3, 8005c7e <tcp_input+0x47e>
 8005c76:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8005c7a:	f7ff fd69 	bl	8005750 <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = tcphdr->wnd;
 8005c7e:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8005c80:	1d21      	adds	r1, r4, #4
 8005c82:	8e60      	ldrh	r0, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8005c84:	89db      	ldrh	r3, [r3, #14]
 8005c86:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8005c8a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8005c8e:	f7fe fff7 	bl	8004c80 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8005c92:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8005c94:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8005c96:	4620      	mov	r0, r4
 8005c98:	f000 fb5a 	bl	8006350 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	f43f af69 	beq.w	8005b74 <tcp_input+0x374>
      tcp_abandon(npcb, 0);
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f7fe fe9f 	bl	80049e8 <tcp_abandon>
 8005caa:	e766      	b.n	8005b7a <tcp_input+0x37a>
  if (flags & TCP_RST) {
 8005cac:	9b03      	ldr	r3, [sp, #12]
    tcp_input_pcb = pcb;
 8005cae:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	0759      	lsls	r1, r3, #29
 8005cb4:	d535      	bpl.n	8005d22 <tcp_input+0x522>
    if (pcb->state == SYN_SENT) {
 8005cb6:	7d21      	ldrb	r1, [r4, #20]
 8005cb8:	2902      	cmp	r1, #2
 8005cba:	d122      	bne.n	8005d02 <tcp_input+0x502>
      if (ackno == pcb->snd_nxt) {
 8005cbc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d109      	bne.n	8005cd8 <tcp_input+0x4d8>
      recv_flags |= TF_RESET;
 8005cc4:	f898 3000 	ldrb.w	r3, [r8]
 8005cc8:	f043 0308 	orr.w	r3, r3, #8
 8005ccc:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 8005cd0:	7ea3      	ldrb	r3, [r4, #26]
 8005cd2:	f023 0301 	bic.w	r3, r3, #1
 8005cd6:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8005cd8:	f898 3000 	ldrb.w	r3, [r8]
 8005cdc:	0719      	lsls	r1, r3, #28
 8005cde:	f140 81ed 	bpl.w	80060bc <tcp_input+0x8bc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8005ce2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005ce6:	b11b      	cbz	r3, 8005cf0 <tcp_input+0x4f0>
 8005ce8:	f06f 010d 	mvn.w	r1, #13
 8005cec:	6920      	ldr	r0, [r4, #16]
 8005cee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	4824      	ldr	r0, [pc, #144]	; (8005d84 <tcp_input+0x584>)
 8005cf4:	f7fe fce0 	bl	80046b8 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	2001      	movs	r0, #1
 8005cfc:	f7fd fd80 	bl	8003800 <memp_free>
 8005d00:	e6b0      	b.n	8005a64 <tcp_input+0x264>
      if (seqno == pcb->rcv_nxt) {
 8005d02:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005d04:	f8db 3000 	ldr.w	r3, [fp]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	f000 825a 	beq.w	80061c2 <tcp_input+0x9c2>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8005d0e:	1a9b      	subs	r3, r3, r2
 8005d10:	d4e2      	bmi.n	8005cd8 <tcp_input+0x4d8>
 8005d12:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005d14:	1a9b      	subs	r3, r3, r2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	dcde      	bgt.n	8005cd8 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8005d1a:	7ea3      	ldrb	r3, [r4, #26]
 8005d1c:	f043 0302 	orr.w	r3, r3, #2
 8005d20:	e7d9      	b.n	8005cd6 <tcp_input+0x4d6>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8005d22:	f013 0102 	ands.w	r1, r3, #2
 8005d26:	d003      	beq.n	8005d30 <tcp_input+0x530>
 8005d28:	7d22      	ldrb	r2, [r4, #20]
 8005d2a:	3a02      	subs	r2, #2
 8005d2c:	2a01      	cmp	r2, #1
 8005d2e:	d8f4      	bhi.n	8005d1a <tcp_input+0x51a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8005d30:	7ea2      	ldrb	r2, [r4, #26]
 8005d32:	06d2      	lsls	r2, r2, #27
    pcb->tmr = tcp_ticks;
 8005d34:	bf5e      	ittt	pl
 8005d36:	4a11      	ldrpl	r2, [pc, #68]	; (8005d7c <tcp_input+0x57c>)
 8005d38:	6812      	ldrpl	r2, [r2, #0]
 8005d3a:	6222      	strpl	r2, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 8005d42:	9a06      	ldr	r2, [sp, #24]
 8005d44:	8812      	ldrh	r2, [r2, #0]
 8005d46:	b13a      	cbz	r2, 8005d58 <tcp_input+0x558>
 8005d48:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8005d4c:	9107      	str	r1, [sp, #28]
 8005d4e:	9306      	str	r3, [sp, #24]
 8005d50:	f7ff fcfe 	bl	8005750 <tcp_parseopt.isra.1.part.2>
 8005d54:	9907      	ldr	r1, [sp, #28]
 8005d56:	9b06      	ldr	r3, [sp, #24]
  switch (pcb->state) {
 8005d58:	7d22      	ldrb	r2, [r4, #20]
 8005d5a:	3a02      	subs	r2, #2
 8005d5c:	2a07      	cmp	r2, #7
 8005d5e:	d8bb      	bhi.n	8005cd8 <tcp_input+0x4d8>
 8005d60:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005d64:	00940014 	.word	0x00940014
 8005d68:	010000fc 	.word	0x010000fc
 8005d6c:	00fc014a 	.word	0x00fc014a
 8005d70:	01830164 	.word	0x01830164
 8005d74:	08008f43 	.word	0x08008f43
 8005d78:	20000230 	.word	0x20000230
 8005d7c:	2000374c 	.word	0x2000374c
 8005d80:	20003750 	.word	0x20003750
 8005d84:	20003748 	.word	0x20003748
 8005d88:	20003744 	.word	0x20003744
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8005d8c:	f003 0212 	and.w	r2, r3, #18
 8005d90:	2a12      	cmp	r2, #18
 8005d92:	d15e      	bne.n	8005e52 <tcp_input+0x652>
        && (ackno == pcb->lastack + 1)) {
 8005d94:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005d96:	6839      	ldr	r1, [r7, #0]
 8005d98:	3201      	adds	r2, #1
 8005d9a:	428a      	cmp	r2, r1
 8005d9c:	d159      	bne.n	8005e52 <tcp_input+0x652>
      pcb->rcv_nxt = seqno + 1;
 8005d9e:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 8005da2:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 8005da4:	1c59      	adds	r1, r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 8005da6:	6832      	ldr	r2, [r6, #0]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8005da8:	3b01      	subs	r3, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8005daa:	8e60      	ldrh	r0, [r4, #50]	; 0x32
      pcb->rcv_nxt = seqno + 1;
 8005dac:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8005dae:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wnd = tcphdr->wnd;
 8005db0:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8005db2:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8005db4:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 8005db6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8005dba:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8005dbe:	18e1      	adds	r1, r4, r3
      pcb->state = ESTABLISHED;
 8005dc0:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8005dc2:	f7fe ff5d 	bl	8004c80 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8005dc6:	f241 121c 	movw	r2, #4380	; 0x111c
 8005dca:	0043      	lsls	r3, r0, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8005dcc:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8005dce:	0080      	lsls	r0, r0, #2
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	bf38      	it	cc
 8005dd4:	4613      	movcc	r3, r2
 8005dd6:	4283      	cmp	r3, r0
 8005dd8:	bf28      	it	cs
 8005dda:	4603      	movcs	r3, r0
 8005ddc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8005de0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005de4:	b933      	cbnz	r3, 8005df4 <tcp_input+0x5f4>
 8005de6:	4bad      	ldr	r3, [pc, #692]	; (800609c <tcp_input+0x89c>)
 8005de8:	f240 321a 	movw	r2, #794	; 0x31a
 8005dec:	49ac      	ldr	r1, [pc, #688]	; (80060a0 <tcp_input+0x8a0>)
 8005dee:	48ad      	ldr	r0, [pc, #692]	; (80060a4 <tcp_input+0x8a4>)
 8005df0:	f001 fefa 	bl	8007be8 <iprintf>
      --pcb->snd_queuelen;
 8005df4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 8005df8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 8005e00:	b9fe      	cbnz	r6, 8005e42 <tcp_input+0x642>
        rseg = pcb->unsent;
 8005e02:	6ea6      	ldr	r6, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8005e04:	b936      	cbnz	r6, 8005e14 <tcp_input+0x614>
 8005e06:	4ba5      	ldr	r3, [pc, #660]	; (800609c <tcp_input+0x89c>)
 8005e08:	f240 3222 	movw	r2, #802	; 0x322
 8005e0c:	49a6      	ldr	r1, [pc, #664]	; (80060a8 <tcp_input+0x8a8>)
 8005e0e:	48a5      	ldr	r0, [pc, #660]	; (80060a4 <tcp_input+0x8a4>)
 8005e10:	f001 feea 	bl	8007be8 <iprintf>
        pcb->unsent = rseg->next;
 8005e14:	6833      	ldr	r3, [r6, #0]
 8005e16:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f7fe fa1f 	bl	800425c <tcp_seg_free>
      if (pcb->unacked == NULL) {
 8005e1e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005e20:	b993      	cbnz	r3, 8005e48 <tcp_input+0x648>
        pcb->rtime = -1;
 8005e22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e26:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8005e28:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f43f af74 	beq.w	8005d1a <tcp_input+0x51a>
 8005e32:	2200      	movs	r2, #0
 8005e34:	4621      	mov	r1, r4
 8005e36:	6920      	ldr	r0, [r4, #16]
 8005e38:	4798      	blx	r3
      if (err == ERR_ABRT) {
 8005e3a:	300d      	adds	r0, #13
 8005e3c:	f47f af6d 	bne.w	8005d1a <tcp_input+0x51a>
 8005e40:	e610      	b.n	8005a64 <tcp_input+0x264>
        pcb->unacked = rseg->next;
 8005e42:	6833      	ldr	r3, [r6, #0]
 8005e44:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005e46:	e7e7      	b.n	8005e18 <tcp_input+0x618>
        pcb->rtime = 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8005e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e50:	e7ea      	b.n	8005e28 <tcp_input+0x628>
    else if (flags & TCP_ACK) {
 8005e52:	06db      	lsls	r3, r3, #27
 8005e54:	f57f af40 	bpl.w	8005cd8 <tcp_input+0x4d8>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005e58:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8005e5a:	9a04      	ldr	r2, [sp, #16]
 8005e5c:	f8db 1000 	ldr.w	r1, [fp]
 8005e60:	8810      	ldrh	r0, [r2, #0]
 8005e62:	881a      	ldrh	r2, [r3, #0]
 8005e64:	4401      	add	r1, r0
 8005e66:	9201      	str	r2, [sp, #4]
 8005e68:	885b      	ldrh	r3, [r3, #2]
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	4b8f      	ldr	r3, [pc, #572]	; (80060ac <tcp_input+0x8ac>)
 8005e6e:	6838      	ldr	r0, [r7, #0]
 8005e70:	1d1a      	adds	r2, r3, #4
 8005e72:	f000 fcd9 	bl	8006828 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8005e76:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005e7a:	2b05      	cmp	r3, #5
 8005e7c:	f63f af2c 	bhi.w	8005cd8 <tcp_input+0x4d8>
        pcb->rtime = 0;
 8005e80:	2300      	movs	r3, #0
        tcp_rexmit_rto(pcb);
 8005e82:	4620      	mov	r0, r4
        pcb->rtime = 0;
 8005e84:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8005e86:	f000 fd29 	bl	80068dc <tcp_rexmit_rto>
 8005e8a:	e725      	b.n	8005cd8 <tcp_input+0x4d8>
    if (flags & TCP_ACK) {
 8005e8c:	06d8      	lsls	r0, r3, #27
 8005e8e:	d557      	bpl.n	8005f40 <tcp_input+0x740>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8005e90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005e92:	6838      	ldr	r0, [r7, #0]
 8005e94:	43db      	mvns	r3, r3
 8005e96:	42c3      	cmn	r3, r0
 8005e98:	d443      	bmi.n	8005f22 <tcp_input+0x722>
 8005e9a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005e9c:	1ac3      	subs	r3, r0, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	dc3f      	bgt.n	8005f22 <tcp_input+0x722>
        pcb->state = ESTABLISHED;
 8005ea2:	2304      	movs	r3, #4
 8005ea4:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8005ea6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005ea8:	b143      	cbz	r3, 8005ebc <tcp_input+0x6bc>
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	b933      	cbnz	r3, 8005ebc <tcp_input+0x6bc>
 8005eae:	4b7b      	ldr	r3, [pc, #492]	; (800609c <tcp_input+0x89c>)
 8005eb0:	f240 3251 	movw	r2, #849	; 0x351
 8005eb4:	497e      	ldr	r1, [pc, #504]	; (80060b0 <tcp_input+0x8b0>)
 8005eb6:	487b      	ldr	r0, [pc, #492]	; (80060a4 <tcp_input+0x8a4>)
 8005eb8:	f001 fe96 	bl	8007be8 <iprintf>
        if (pcb->listener == NULL) {
 8005ebc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005ebe:	b91b      	cbnz	r3, 8005ec8 <tcp_input+0x6c8>
            tcp_abort(pcb);
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f7fe fe07 	bl	8004ad4 <tcp_abort>
            goto aborted;
 8005ec6:	e5cd      	b.n	8005a64 <tcp_input+0x264>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0f8      	beq.n	8005ec0 <tcp_input+0x6c0>
 8005ece:	2200      	movs	r2, #0
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	6920      	ldr	r0, [r4, #16]
 8005ed4:	4798      	blx	r3
        if (err != ERR_OK) {
 8005ed6:	b110      	cbz	r0, 8005ede <tcp_input+0x6de>
          if (err != ERR_ABRT) {
 8005ed8:	300d      	adds	r0, #13
 8005eda:	d1f1      	bne.n	8005ec0 <tcp_input+0x6c0>
 8005edc:	e5c2      	b.n	8005a64 <tcp_input+0x264>
        tcp_receive(pcb);
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f7fe ff42 	bl	8004d68 <tcp_receive>
        if (recv_acked != 0) {
 8005ee4:	9b05      	ldr	r3, [sp, #20]
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	b113      	cbz	r3, 8005ef0 <tcp_input+0x6f0>
          recv_acked--;
 8005eea:	3b01      	subs	r3, #1
 8005eec:	9a05      	ldr	r2, [sp, #20]
 8005eee:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8005ef0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8005ef2:	f241 111c 	movw	r1, #4380	; 0x111c
 8005ef6:	0053      	lsls	r3, r2, #1
 8005ef8:	0092      	lsls	r2, r2, #2
 8005efa:	428b      	cmp	r3, r1
 8005efc:	bf38      	it	cc
 8005efe:	460b      	movcc	r3, r1
 8005f00:	4293      	cmp	r3, r2
 8005f02:	bf28      	it	cs
 8005f04:	4613      	movcs	r3, r2
 8005f06:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8005f0a:	f898 3000 	ldrb.w	r3, [r8]
 8005f0e:	069a      	lsls	r2, r3, #26
 8005f10:	f57f aee2 	bpl.w	8005cd8 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8005f14:	7ea3      	ldrb	r3, [r4, #26]
 8005f16:	f043 0302 	orr.w	r3, r3, #2
 8005f1a:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 8005f1c:	2307      	movs	r3, #7
        pcb->state = CLOSING;
 8005f1e:	7523      	strb	r3, [r4, #20]
 8005f20:	e6da      	b.n	8005cd8 <tcp_input+0x4d8>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8005f22:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8005f24:	9a04      	ldr	r2, [sp, #16]
 8005f26:	f8db 1000 	ldr.w	r1, [fp]
 8005f2a:	8816      	ldrh	r6, [r2, #0]
 8005f2c:	881a      	ldrh	r2, [r3, #0]
 8005f2e:	4431      	add	r1, r6
 8005f30:	9201      	str	r2, [sp, #4]
 8005f32:	885b      	ldrh	r3, [r3, #2]
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	4b5d      	ldr	r3, [pc, #372]	; (80060ac <tcp_input+0x8ac>)
 8005f38:	1d1a      	adds	r2, r3, #4
 8005f3a:	f000 fc75 	bl	8006828 <tcp_rst>
 8005f3e:	e6cb      	b.n	8005cd8 <tcp_input+0x4d8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8005f40:	2900      	cmp	r1, #0
 8005f42:	f43f aec9 	beq.w	8005cd8 <tcp_input+0x4d8>
 8005f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f48:	f8db 2000 	ldr.w	r2, [fp]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	f47f aec2 	bne.w	8005cd8 <tcp_input+0x4d8>
      tcp_rexmit(pcb);
 8005f54:	4620      	mov	r0, r4
 8005f56:	f000 fcdd 	bl	8006914 <tcp_rexmit>
 8005f5a:	e6bd      	b.n	8005cd8 <tcp_input+0x4d8>
    tcp_receive(pcb);
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f7fe ff03 	bl	8004d68 <tcp_receive>
 8005f62:	e7d2      	b.n	8005f0a <tcp_input+0x70a>
    tcp_receive(pcb);
 8005f64:	4620      	mov	r0, r4
 8005f66:	f7fe feff 	bl	8004d68 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8005f6a:	f898 3000 	ldrb.w	r3, [r8]
 8005f6e:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 8005f76:	d031      	beq.n	8005fdc <tcp_input+0x7dc>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8005f78:	f013 0f10 	tst.w	r3, #16
 8005f7c:	7ea3      	ldrb	r3, [r4, #26]
 8005f7e:	d028      	beq.n	8005fd2 <tcp_input+0x7d2>
 8005f80:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	4291      	cmp	r1, r2
 8005f86:	d124      	bne.n	8005fd2 <tcp_input+0x7d2>
 8005f88:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8005f8a:	bb12      	cbnz	r2, 8005fd2 <tcp_input+0x7d2>
        tcp_ack_now(pcb);
 8005f8c:	f043 0302 	orr.w	r3, r3, #2
        tcp_pcb_purge(pcb);
 8005f90:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8005f92:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8005f94:	f7fe f98e 	bl	80042b4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8005f98:	f8d9 3000 	ldr.w	r3, [r9]
 8005f9c:	429c      	cmp	r4, r3
 8005f9e:	d10a      	bne.n	8005fb6 <tcp_input+0x7b6>
      TCP_RMV_ACTIVE(pcb);
 8005fa0:	68e3      	ldr	r3, [r4, #12]
 8005fa2:	f8c9 3000 	str.w	r3, [r9]
 8005fa6:	e008      	b.n	8005fba <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	4294      	cmp	r4, r2
 8005fac:	d102      	bne.n	8005fb4 <tcp_input+0x7b4>
      TCP_RMV_ACTIVE(pcb);
 8005fae:	68e2      	ldr	r2, [r4, #12]
 8005fb0:	60da      	str	r2, [r3, #12]
 8005fb2:	e002      	b.n	8005fba <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f6      	bne.n	8005fa8 <tcp_input+0x7a8>
      TCP_RMV_ACTIVE(pcb);
 8005fba:	2201      	movs	r2, #1
 8005fbc:	4b3d      	ldr	r3, [pc, #244]	; (80060b4 <tcp_input+0x8b4>)
 8005fbe:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8005fc0:	230a      	movs	r3, #10
 8005fc2:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8005fc4:	4b3c      	ldr	r3, [pc, #240]	; (80060b8 <tcp_input+0x8b8>)
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	601c      	str	r4, [r3, #0]
 8005fca:	60e2      	str	r2, [r4, #12]
 8005fcc:	f000 fdce 	bl	8006b6c <tcp_timer_needed>
 8005fd0:	e682      	b.n	8005cd8 <tcp_input+0x4d8>
        tcp_ack_now(pcb);
 8005fd2:	f043 0302 	orr.w	r3, r3, #2
 8005fd6:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8005fd8:	2308      	movs	r3, #8
 8005fda:	e7a0      	b.n	8005f1e <tcp_input+0x71e>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8005fdc:	06db      	lsls	r3, r3, #27
 8005fde:	f57f ae7b 	bpl.w	8005cd8 <tcp_input+0x4d8>
 8005fe2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	f47f ae76 	bne.w	8005cd8 <tcp_input+0x4d8>
 8005fec:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f47f ae72 	bne.w	8005cd8 <tcp_input+0x4d8>
      pcb->state = FIN_WAIT_2;
 8005ff4:	2306      	movs	r3, #6
 8005ff6:	e792      	b.n	8005f1e <tcp_input+0x71e>
    tcp_receive(pcb);
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f7fe feb5 	bl	8004d68 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8005ffe:	f898 3000 	ldrb.w	r3, [r8]
 8006002:	069f      	lsls	r7, r3, #26
 8006004:	f57f ae68 	bpl.w	8005cd8 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8006008:	7ea3      	ldrb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 800600a:	4620      	mov	r0, r4
      tcp_ack_now(pcb);
 800600c:	f043 0302 	orr.w	r3, r3, #2
 8006010:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8006012:	f7fe f94f 	bl	80042b4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006016:	f8d9 3000 	ldr.w	r3, [r9]
 800601a:	429c      	cmp	r4, r3
 800601c:	d0c0      	beq.n	8005fa0 <tcp_input+0x7a0>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0cb      	beq.n	8005fba <tcp_input+0x7ba>
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	4294      	cmp	r4, r2
 8006026:	d0c2      	beq.n	8005fae <tcp_input+0x7ae>
 8006028:	4613      	mov	r3, r2
 800602a:	e7f8      	b.n	800601e <tcp_input+0x81e>
    tcp_receive(pcb);
 800602c:	4620      	mov	r0, r4
 800602e:	f7fe fe9b 	bl	8004d68 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8006032:	9b03      	ldr	r3, [sp, #12]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	06de      	lsls	r6, r3, #27
 8006038:	f57f ae4e 	bpl.w	8005cd8 <tcp_input+0x4d8>
 800603c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	f47f ae49 	bne.w	8005cd8 <tcp_input+0x4d8>
 8006046:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006048:	2b00      	cmp	r3, #0
 800604a:	f47f ae45 	bne.w	8005cd8 <tcp_input+0x4d8>
      tcp_pcb_purge(pcb);
 800604e:	4620      	mov	r0, r4
 8006050:	f7fe f930 	bl	80042b4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006054:	f8d9 3000 	ldr.w	r3, [r9]
 8006058:	429c      	cmp	r4, r3
 800605a:	d0a1      	beq.n	8005fa0 <tcp_input+0x7a0>
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0ac      	beq.n	8005fba <tcp_input+0x7ba>
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	4294      	cmp	r4, r2
 8006064:	d0a3      	beq.n	8005fae <tcp_input+0x7ae>
 8006066:	4613      	mov	r3, r2
 8006068:	e7f8      	b.n	800605c <tcp_input+0x85c>
    tcp_receive(pcb);
 800606a:	4620      	mov	r0, r4
 800606c:	f7fe fe7c 	bl	8004d68 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8006070:	9b03      	ldr	r3, [sp, #12]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	06d8      	lsls	r0, r3, #27
 8006076:	f57f ae2f 	bpl.w	8005cd8 <tcp_input+0x4d8>
 800607a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	f47f ae2a 	bne.w	8005cd8 <tcp_input+0x4d8>
 8006084:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006086:	2b00      	cmp	r3, #0
 8006088:	f47f ae26 	bne.w	8005cd8 <tcp_input+0x4d8>
      recv_flags |= TF_CLOSED;
 800608c:	f898 3000 	ldrb.w	r3, [r8]
 8006090:	f043 0310 	orr.w	r3, r3, #16
 8006094:	f888 3000 	strb.w	r3, [r8]
 8006098:	e61e      	b.n	8005cd8 <tcp_input+0x4d8>
 800609a:	bf00      	nop
 800609c:	08009e2c 	.word	0x08009e2c
 80060a0:	08009dcb 	.word	0x08009dcb
 80060a4:	08008f43 	.word	0x08008f43
 80060a8:	08009de1 	.word	0x08009de1
 80060ac:	20000230 	.word	0x20000230
 80060b0:	08009df4 	.word	0x08009df4
 80060b4:	20003744 	.word	0x20003744
 80060b8:	20003758 	.word	0x20003758
        if (recv_acked > 0) {
 80060bc:	9b05      	ldr	r3, [sp, #20]
 80060be:	881a      	ldrh	r2, [r3, #0]
 80060c0:	b122      	cbz	r2, 80060cc <tcp_input+0x8cc>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80060c2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80060c4:	b9eb      	cbnz	r3, 8006102 <tcp_input+0x902>
          recv_acked = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	9a05      	ldr	r2, [sp, #20]
 80060ca:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 80060cc:	4620      	mov	r0, r4
 80060ce:	f7ff fb77 	bl	80057c0 <tcp_input_delayed_close>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	f47f acc6 	bne.w	8005a64 <tcp_input+0x264>
        if (recv_data != NULL) {
 80060d8:	f8da 3000 	ldr.w	r3, [sl]
 80060dc:	b33b      	cbz	r3, 800612e <tcp_input+0x92e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80060de:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80060e0:	b133      	cbz	r3, 80060f0 <tcp_input+0x8f0>
 80060e2:	4b40      	ldr	r3, [pc, #256]	; (80061e4 <tcp_input+0x9e4>)
 80060e4:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80060e8:	493f      	ldr	r1, [pc, #252]	; (80061e8 <tcp_input+0x9e8>)
 80060ea:	4840      	ldr	r0, [pc, #256]	; (80061ec <tcp_input+0x9ec>)
 80060ec:	f001 fd7c 	bl	8007be8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80060f0:	7ea3      	ldrb	r3, [r4, #26]
 80060f2:	f013 0310 	ands.w	r3, r3, #16
 80060f6:	d00a      	beq.n	800610e <tcp_input+0x90e>
            pbuf_free(recv_data);
 80060f8:	f8da 0000 	ldr.w	r0, [sl]
 80060fc:	f7fd fcce 	bl	8003a9c <pbuf_free>
 8006100:	e6de      	b.n	8005ec0 <tcp_input+0x6c0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8006102:	4621      	mov	r1, r4
 8006104:	6920      	ldr	r0, [r4, #16]
 8006106:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8006108:	300d      	adds	r0, #13
 800610a:	d1dc      	bne.n	80060c6 <tcp_input+0x8c6>
 800610c:	e4aa      	b.n	8005a64 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800610e:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8006112:	b31e      	cbz	r6, 800615c <tcp_input+0x95c>
 8006114:	f8da 2000 	ldr.w	r2, [sl]
 8006118:	4621      	mov	r1, r4
 800611a:	6920      	ldr	r0, [r4, #16]
 800611c:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800611e:	f110 0f0d 	cmn.w	r0, #13
 8006122:	f43f ac9f 	beq.w	8005a64 <tcp_input+0x264>
          if (err != ERR_OK) {
 8006126:	b110      	cbz	r0, 800612e <tcp_input+0x92e>
            pcb->refused_data = recv_data;
 8006128:	f8da 3000 	ldr.w	r3, [sl]
 800612c:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800612e:	f898 3000 	ldrb.w	r3, [r8]
 8006132:	069a      	lsls	r2, r3, #26
 8006134:	d505      	bpl.n	8006142 <tcp_input+0x942>
          if (pcb->refused_data != NULL) {
 8006136:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006138:	b1c3      	cbz	r3, 800616c <tcp_input+0x96c>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800613a:	7b5a      	ldrb	r2, [r3, #13]
 800613c:	f042 0220 	orr.w	r2, r2, #32
 8006140:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8006142:	2200      	movs	r2, #0
 8006144:	4b2a      	ldr	r3, [pc, #168]	; (80061f0 <tcp_input+0x9f0>)
        if (tcp_input_delayed_close(pcb)) {
 8006146:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8006148:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800614a:	f7ff fb39 	bl	80057c0 <tcp_input_delayed_close>
 800614e:	2800      	cmp	r0, #0
 8006150:	f47f ac88 	bne.w	8005a64 <tcp_input+0x264>
        tcp_output(pcb);
 8006154:	4620      	mov	r0, r4
 8006156:	f000 f9e9 	bl	800652c <tcp_output>
 800615a:	e483      	b.n	8005a64 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800615c:	4633      	mov	r3, r6
 800615e:	f8da 2000 	ldr.w	r2, [sl]
 8006162:	4621      	mov	r1, r4
 8006164:	4630      	mov	r0, r6
 8006166:	f7fe fba7 	bl	80048b8 <tcp_recv_null>
 800616a:	e7d8      	b.n	800611e <tcp_input+0x91e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800616c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800616e:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006172:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 8006176:	bf1c      	itt	ne
 8006178:	3301      	addne	r3, #1
 800617a:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800617c:	2e00      	cmp	r6, #0
 800617e:	d0e0      	beq.n	8006142 <tcp_input+0x942>
 8006180:	2300      	movs	r3, #0
 8006182:	4621      	mov	r1, r4
 8006184:	6920      	ldr	r0, [r4, #16]
 8006186:	461a      	mov	r2, r3
 8006188:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800618a:	300d      	adds	r0, #13
 800618c:	d1d9      	bne.n	8006142 <tcp_input+0x942>
 800618e:	e469      	b.n	8005a64 <tcp_input+0x264>
      if (prev != NULL) {
 8006190:	b13c      	cbz	r4, 80061a2 <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006192:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8006196:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006198:	4b16      	ldr	r3, [pc, #88]	; (80061f4 <tcp_input+0x9f4>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800619a:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800619e:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 80061a2:	9b03      	ldr	r3, [sp, #12]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	0759      	lsls	r1, r3, #29
 80061a8:	f53f ace7 	bmi.w	8005b7a <tcp_input+0x37a>
  if (flags & TCP_ACK) {
 80061ac:	06dc      	lsls	r4, r3, #27
 80061ae:	f57f ad19 	bpl.w	8005be4 <tcp_input+0x3e4>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80061b2:	9b04      	ldr	r3, [sp, #16]
 80061b4:	f8db 1000 	ldr.w	r1, [fp]
 80061b8:	881c      	ldrh	r4, [r3, #0]
 80061ba:	8813      	ldrh	r3, [r2, #0]
 80061bc:	e88d 0009 	stmia.w	sp, {r0, r3}
 80061c0:	e4c5      	b.n	8005b4e <tcp_input+0x34e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80061c2:	2900      	cmp	r1, #0
 80061c4:	f47f ad7e 	bne.w	8005cc4 <tcp_input+0x4c4>
 80061c8:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <tcp_input+0x9e4>)
 80061ca:	f240 22e7 	movw	r2, #743	; 0x2e7
 80061ce:	490a      	ldr	r1, [pc, #40]	; (80061f8 <tcp_input+0x9f8>)
 80061d0:	4806      	ldr	r0, [pc, #24]	; (80061ec <tcp_input+0x9ec>)
 80061d2:	f001 fd09 	bl	8007be8 <iprintf>
 80061d6:	e575      	b.n	8005cc4 <tcp_input+0x4c4>
      if (prev != NULL) {
 80061d8:	f1ba 0f00 	cmp.w	sl, #0
 80061dc:	f47f abff 	bne.w	80059de <tcp_input+0x1de>
 80061e0:	e40e      	b.n	8005a00 <tcp_input+0x200>
 80061e2:	bf00      	nop
 80061e4:	08009e2c 	.word	0x08009e2c
 80061e8:	08009e12 	.word	0x08009e12
 80061ec:	08008f43 	.word	0x08008f43
 80061f0:	2000375c 	.word	0x2000375c
 80061f4:	20003750 	.word	0x20003750
 80061f8:	08009dab 	.word	0x08009dab

080061fc <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 80061fc:	4a02      	ldr	r2, [pc, #8]	; (8006208 <tcp_trigger_input_pcb_close+0xc>)
 80061fe:	7813      	ldrb	r3, [r2, #0]
 8006200:	f043 0310 	orr.w	r3, r3, #16
 8006204:	7013      	strb	r3, [r2, #0]
 8006206:	4770      	bx	lr
 8006208:	200001e4 	.word	0x200001e4

0800620c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800620c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006210:	f89d a020 	ldrb.w	sl, [sp, #32]
 8006214:	4680      	mov	r8, r0
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8006216:	2003      	movs	r0, #3
{
 8006218:	460f      	mov	r7, r1
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800621a:	f01a 0f01 	tst.w	sl, #1
{
 800621e:	4616      	mov	r6, r2
 8006220:	4699      	mov	r9, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8006222:	bf14      	ite	ne
 8006224:	2504      	movne	r5, #4
 8006226:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8006228:	f7fd face 	bl	80037c8 <memp_malloc>
 800622c:	4604      	mov	r4, r0
 800622e:	b928      	cbnz	r0, 800623c <tcp_create_segment+0x30>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8006230:	4638      	mov	r0, r7
 8006232:	f7fd fc33 	bl	8003a9c <pbuf_free>
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  return seg;
}
 8006236:	4620      	mov	r0, r4
 8006238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 800623c:	2300      	movs	r3, #0
  seg->flags = optflags;
 800623e:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8006242:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 8006246:	e880 0088 	stmia.w	r0, {r3, r7}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800624a:	893b      	ldrh	r3, [r7, #8]
 800624c:	4553      	cmp	r3, sl
 800624e:	d205      	bcs.n	800625c <tcp_create_segment+0x50>
 8006250:	4b1e      	ldr	r3, [pc, #120]	; (80062cc <tcp_create_segment+0xc0>)
 8006252:	22ba      	movs	r2, #186	; 0xba
 8006254:	491e      	ldr	r1, [pc, #120]	; (80062d0 <tcp_create_segment+0xc4>)
 8006256:	481f      	ldr	r0, [pc, #124]	; (80062d4 <tcp_create_segment+0xc8>)
 8006258:	f001 fcc6 	bl	8007be8 <iprintf>
  seg->len = p->tot_len - optlen;
 800625c:	893b      	ldrh	r3, [r7, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 800625e:	4638      	mov	r0, r7
 8006260:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 8006262:	eba3 030a 	sub.w	r3, r3, sl
 8006266:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8006268:	f7fd fc12 	bl	8003a90 <pbuf_header>
 800626c:	4607      	mov	r7, r0
 800626e:	b120      	cbz	r0, 800627a <tcp_create_segment+0x6e>
    tcp_seg_free(seg);
 8006270:	4620      	mov	r0, r4
    return NULL;
 8006272:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 8006274:	f7fd fff2 	bl	800425c <tcp_seg_free>
    return NULL;
 8006278:	e7dd      	b.n	8006236 <tcp_create_segment+0x2a>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800627a:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800627c:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800627e:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8006282:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8006286:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8006288:	f8c4 a00c 	str.w	sl, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800628c:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8006290:	f7fb feb7 	bl	8002002 <lwip_htons>
 8006294:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8006298:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800629c:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 80062a0:	f7fb feaf 	bl	8002002 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80062a4:	f8d4 800c 	ldr.w	r8, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80062a8:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80062ac:	4648      	mov	r0, r9
 80062ae:	f7fb feab 	bl	8002008 <lwip_htonl>
 80062b2:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80062b6:	b2a8      	uxth	r0, r5
 80062b8:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80062bc:	f7fb fea1 	bl	8002002 <lwip_htons>
  seg->tcphdr->urgp = 0;
 80062c0:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80062c2:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 80062c6:	749f      	strb	r7, [r3, #18]
 80062c8:	74df      	strb	r7, [r3, #19]
  return seg;
 80062ca:	e7b4      	b.n	8006236 <tcp_create_segment+0x2a>
 80062cc:	0800a12f 	.word	0x0800a12f
 80062d0:	08009fb7 	.word	0x08009fb7
 80062d4:	08008f43 	.word	0x08008f43

080062d8 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80062d8:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 80062da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80062dc:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 80062de:	4605      	mov	r5, r0
 80062e0:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80062e2:	2001      	movs	r0, #1
 80062e4:	2200      	movs	r2, #0
 80062e6:	f7fd fc3b 	bl	8003b60 <pbuf_alloc>
  if (p != NULL) {
 80062ea:	4606      	mov	r6, r0
 80062ec:	b340      	cbz	r0, 8006340 <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80062ee:	8943      	ldrh	r3, [r0, #10]
 80062f0:	2b13      	cmp	r3, #19
 80062f2:	dc05      	bgt.n	8006300 <tcp_output_alloc_header.constprop.0+0x28>
 80062f4:	4b13      	ldr	r3, [pc, #76]	; (8006344 <tcp_output_alloc_header.constprop.0+0x6c>)
 80062f6:	2273      	movs	r2, #115	; 0x73
 80062f8:	4913      	ldr	r1, [pc, #76]	; (8006348 <tcp_output_alloc_header.constprop.0+0x70>)
 80062fa:	4814      	ldr	r0, [pc, #80]	; (800634c <tcp_output_alloc_header.constprop.0+0x74>)
 80062fc:	f001 fc74 	bl	8007be8 <iprintf>
    tcphdr = (struct tcp_hdr *)p->payload;
 8006300:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8006302:	8ae8      	ldrh	r0, [r5, #22]
 8006304:	f7fb fe7d 	bl	8002002 <lwip_htons>
 8006308:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800630a:	8b28      	ldrh	r0, [r5, #24]
 800630c:	f7fb fe79 	bl	8002002 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8006310:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8006312:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8006314:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006316:	f7fb fe77 	bl	8002008 <lwip_htonl>
 800631a:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800631c:	f245 0010 	movw	r0, #20496	; 0x5010
 8006320:	f7fb fe6f 	bl	8002002 <lwip_htons>
 8006324:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8006326:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8006328:	f7fb fe6b 	bl	8002002 <lwip_htons>
    tcphdr->chksum = 0;
 800632c:	2300      	movs	r3, #0
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800632e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    tcphdr->chksum = 0;
 8006330:	7423      	strb	r3, [r4, #16]
 8006332:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8006334:	74a3      	strb	r3, [r4, #18]
 8006336:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8006338:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800633a:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800633c:	4413      	add	r3, r2
 800633e:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 8006340:	4630      	mov	r0, r6
 8006342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006344:	0800a12f 	.word	0x0800a12f
 8006348:	0800a101 	.word	0x0800a101
 800634c:	08008f43 	.word	0x08008f43

08006350 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8006350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8006354:	f011 0803 	ands.w	r8, r1, #3
{
 8006358:	4604      	mov	r4, r0
 800635a:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800635c:	d106      	bne.n	800636c <tcp_enqueue_flags+0x1c>
 800635e:	4b40      	ldr	r3, [pc, #256]	; (8006460 <tcp_enqueue_flags+0x110>)
 8006360:	f240 321b 	movw	r2, #795	; 0x31b
 8006364:	493f      	ldr	r1, [pc, #252]	; (8006464 <tcp_enqueue_flags+0x114>)
 8006366:	4840      	ldr	r0, [pc, #256]	; (8006468 <tcp_enqueue_flags+0x118>)
 8006368:	f001 fc3e 	bl	8007be8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800636c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006370:	2b08      	cmp	r3, #8
 8006372:	d90a      	bls.n	800638a <tcp_enqueue_flags+0x3a>
 8006374:	07f1      	lsls	r1, r6, #31
 8006376:	d408      	bmi.n	800638a <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 8006378:	7ea3      	ldrb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800637a:	f04f 30ff 	mov.w	r0, #4294967295
    pcb->flags |= TF_NAGLEMEMERR;
 800637e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006382:	76a3      	strb	r3, [r4, #26]
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 8006384:	b003      	add	sp, #12
 8006386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800638a:	f006 0302 	and.w	r3, r6, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800638e:	2200      	movs	r2, #0
  if (flags & TCP_SYN) {
 8006390:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8006392:	4610      	mov	r0, r2
 8006394:	bf15      	itete	ne
 8006396:	2704      	movne	r7, #4
 8006398:	2700      	moveq	r7, #0
  u8_t optflags = 0;
 800639a:	f04f 0901 	movne.w	r9, #1
 800639e:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80063a2:	4639      	mov	r1, r7
 80063a4:	f7fd fbdc 	bl	8003b60 <pbuf_alloc>
 80063a8:	4605      	mov	r5, r0
 80063aa:	2800      	cmp	r0, #0
 80063ac:	d0e4      	beq.n	8006378 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80063ae:	8943      	ldrh	r3, [r0, #10]
 80063b0:	42bb      	cmp	r3, r7
 80063b2:	d206      	bcs.n	80063c2 <tcp_enqueue_flags+0x72>
 80063b4:	4b2a      	ldr	r3, [pc, #168]	; (8006460 <tcp_enqueue_flags+0x110>)
 80063b6:	f240 3241 	movw	r2, #833	; 0x341
 80063ba:	492c      	ldr	r1, [pc, #176]	; (800646c <tcp_enqueue_flags+0x11c>)
 80063bc:	482a      	ldr	r0, [pc, #168]	; (8006468 <tcp_enqueue_flags+0x118>)
 80063be:	f001 fc13 	bl	8007be8 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80063c2:	f8cd 9000 	str.w	r9, [sp]
 80063c6:	4629      	mov	r1, r5
 80063c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063ca:	4632      	mov	r2, r6
 80063cc:	4620      	mov	r0, r4
 80063ce:	f7ff ff1d 	bl	800620c <tcp_create_segment>
 80063d2:	4605      	mov	r5, r0
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d0cf      	beq.n	8006378 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80063d8:	68c3      	ldr	r3, [r0, #12]
 80063da:	079a      	lsls	r2, r3, #30
 80063dc:	d006      	beq.n	80063ec <tcp_enqueue_flags+0x9c>
 80063de:	4b20      	ldr	r3, [pc, #128]	; (8006460 <tcp_enqueue_flags+0x110>)
 80063e0:	f240 3249 	movw	r2, #841	; 0x349
 80063e4:	4922      	ldr	r1, [pc, #136]	; (8006470 <tcp_enqueue_flags+0x120>)
 80063e6:	4820      	ldr	r0, [pc, #128]	; (8006468 <tcp_enqueue_flags+0x118>)
 80063e8:	f001 fbfe 	bl	8007be8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80063ec:	892b      	ldrh	r3, [r5, #8]
 80063ee:	b133      	cbz	r3, 80063fe <tcp_enqueue_flags+0xae>
 80063f0:	4b1b      	ldr	r3, [pc, #108]	; (8006460 <tcp_enqueue_flags+0x110>)
 80063f2:	f240 324a 	movw	r2, #842	; 0x34a
 80063f6:	491f      	ldr	r1, [pc, #124]	; (8006474 <tcp_enqueue_flags+0x124>)
 80063f8:	481b      	ldr	r0, [pc, #108]	; (8006468 <tcp_enqueue_flags+0x118>)
 80063fa:	f001 fbf5 	bl	8007be8 <iprintf>
  if (pcb->unsent == NULL) {
 80063fe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006400:	bb4b      	cbnz	r3, 8006456 <tcp_enqueue_flags+0x106>
    pcb->unsent = seg;
 8006402:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 8006404:	2300      	movs	r3, #0
 8006406:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800640a:	f1b8 0f00 	cmp.w	r8, #0
 800640e:	d002      	beq.n	8006416 <tcp_enqueue_flags+0xc6>
    pcb->snd_lbb++;
 8006410:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006412:	3301      	adds	r3, #1
 8006414:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8006416:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 8006418:	bf42      	ittt	mi
 800641a:	7ea3      	ldrbmi	r3, [r4, #26]
 800641c:	f043 0320 	orrmi.w	r3, r3, #32
 8006420:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8006422:	6868      	ldr	r0, [r5, #4]
 8006424:	f7fd fcec 	bl	8003e00 <pbuf_clen>
 8006428:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800642c:	4418      	add	r0, r3
 800642e:	b280      	uxth	r0, r0
 8006430:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8006434:	2800      	cmp	r0, #0
 8006436:	d0a5      	beq.n	8006384 <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8006438:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800643a:	b948      	cbnz	r0, 8006450 <tcp_enqueue_flags+0x100>
 800643c:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 800643e:	2c00      	cmp	r4, #0
 8006440:	d1a0      	bne.n	8006384 <tcp_enqueue_flags+0x34>
 8006442:	4b07      	ldr	r3, [pc, #28]	; (8006460 <tcp_enqueue_flags+0x110>)
 8006444:	f240 326d 	movw	r2, #877	; 0x36d
 8006448:	490b      	ldr	r1, [pc, #44]	; (8006478 <tcp_enqueue_flags+0x128>)
 800644a:	4807      	ldr	r0, [pc, #28]	; (8006468 <tcp_enqueue_flags+0x118>)
 800644c:	f001 fbcc 	bl	8007be8 <iprintf>
  return ERR_OK;
 8006450:	2000      	movs	r0, #0
 8006452:	e797      	b.n	8006384 <tcp_enqueue_flags+0x34>
 8006454:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	2a00      	cmp	r2, #0
 800645a:	d1fb      	bne.n	8006454 <tcp_enqueue_flags+0x104>
    useg->next = seg;
 800645c:	601d      	str	r5, [r3, #0]
 800645e:	e7d1      	b.n	8006404 <tcp_enqueue_flags+0xb4>
 8006460:	0800a12f 	.word	0x0800a12f
 8006464:	08009fcc 	.word	0x08009fcc
 8006468:	08008f43 	.word	0x08008f43
 800646c:	0800a021 	.word	0x0800a021
 8006470:	0800a05a 	.word	0x0800a05a
 8006474:	0800a072 	.word	0x0800a072
 8006478:	0800a09c 	.word	0x0800a09c

0800647c <tcp_send_fin>:
{
 800647c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 800647e:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 8006480:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8006482:	b934      	cbnz	r4, 8006492 <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8006484:	4628      	mov	r0, r5
 8006486:	2101      	movs	r1, #1
}
 8006488:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800648c:	f7ff bf60 	b.w	8006350 <tcp_enqueue_flags>
 8006490:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1fb      	bne.n	8006490 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8006498:	68e3      	ldr	r3, [r4, #12]
 800649a:	8998      	ldrh	r0, [r3, #12]
 800649c:	f7fb fdb1 	bl	8002002 <lwip_htons>
 80064a0:	f010 0707 	ands.w	r7, r0, #7
 80064a4:	d1ee      	bne.n	8006484 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80064a6:	68e6      	ldr	r6, [r4, #12]
 80064a8:	2001      	movs	r0, #1
 80064aa:	89b4      	ldrh	r4, [r6, #12]
 80064ac:	f7fb fda9 	bl	8002002 <lwip_htons>
 80064b0:	4320      	orrs	r0, r4
 80064b2:	81b0      	strh	r0, [r6, #12]
}
 80064b4:	4638      	mov	r0, r7
      pcb->flags |= TF_FIN;
 80064b6:	7eab      	ldrb	r3, [r5, #26]
 80064b8:	f043 0320 	orr.w	r3, r3, #32
 80064bc:	76ab      	strb	r3, [r5, #26]
}
 80064be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080064c0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80064c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80064c2:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80064c4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80064c6:	f7fb fd9f 	bl	8002008 <lwip_htonl>
 80064ca:	2100      	movs	r1, #0
 80064cc:	4602      	mov	r2, r0
 80064ce:	4620      	mov	r0, r4
 80064d0:	f7ff ff02 	bl	80062d8 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80064d4:	4606      	mov	r6, r0
 80064d6:	b940      	cbnz	r0, 80064ea <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80064d8:	7ea3      	ldrb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80064da:	f06f 0501 	mvn.w	r5, #1
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80064de:	f043 0303 	orr.w	r3, r3, #3
 80064e2:	76a3      	strb	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 80064e4:	4628      	mov	r0, r5
 80064e6:	b004      	add	sp, #16
 80064e8:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80064ea:	1d25      	adds	r5, r4, #4
 80064ec:	4628      	mov	r0, r5
 80064ee:	f7fc fa1d 	bl	800292c <ip4_route>
  if (netif == NULL) {
 80064f2:	b1a0      	cbz	r0, 800651e <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80064f4:	2206      	movs	r2, #6
 80064f6:	9002      	str	r0, [sp, #8]
 80064f8:	7aa3      	ldrb	r3, [r4, #10]
 80064fa:	4621      	mov	r1, r4
 80064fc:	9201      	str	r2, [sp, #4]
 80064fe:	4630      	mov	r0, r6
 8006500:	7a62      	ldrb	r2, [r4, #9]
 8006502:	9200      	str	r2, [sp, #0]
 8006504:	462a      	mov	r2, r5
 8006506:	f7fc fb77 	bl	8002bf8 <ip4_output_if>
 800650a:	4605      	mov	r5, r0
  pbuf_free(p);
 800650c:	4630      	mov	r0, r6
 800650e:	f7fd fac5 	bl	8003a9c <pbuf_free>
 8006512:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 8006514:	b135      	cbz	r5, 8006524 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8006516:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800651a:	76a3      	strb	r3, [r4, #26]
 800651c:	e7e2      	b.n	80064e4 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 800651e:	f06f 0503 	mvn.w	r5, #3
 8006522:	e7f3      	b.n	800650c <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8006524:	f023 0303 	bic.w	r3, r3, #3
 8006528:	e7f7      	b.n	800651a <tcp_send_empty_ack+0x5a>
	...

0800652c <tcp_output>:
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800652c:	7d03      	ldrb	r3, [r0, #20]
 800652e:	2b01      	cmp	r3, #1
{
 8006530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006534:	4604      	mov	r4, r0
 8006536:	b087      	sub	sp, #28
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8006538:	d106      	bne.n	8006548 <tcp_output+0x1c>
 800653a:	4ba5      	ldr	r3, [pc, #660]	; (80067d0 <tcp_output+0x2a4>)
 800653c:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8006540:	49a4      	ldr	r1, [pc, #656]	; (80067d4 <tcp_output+0x2a8>)
 8006542:	48a5      	ldr	r0, [pc, #660]	; (80067d8 <tcp_output+0x2ac>)
 8006544:	f001 fb50 	bl	8007be8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8006548:	4ba4      	ldr	r3, [pc, #656]	; (80067dc <tcp_output+0x2b0>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	429c      	cmp	r4, r3
 800654e:	d052      	beq.n	80065f6 <tcp_output+0xca>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8006550:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8006554:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 8006558:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800655a:	429f      	cmp	r7, r3
 800655c:	bf28      	it	cs
 800655e:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8006560:	7ea3      	ldrb	r3, [r4, #26]
 8006562:	0799      	lsls	r1, r3, #30
 8006564:	d510      	bpl.n	8006588 <tcp_output+0x5c>
 8006566:	b92d      	cbnz	r5, 8006574 <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 8006568:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 800656a:	b007      	add	sp, #28
 800656c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 8006570:	f7ff bfa6 	b.w	80064c0 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8006574:	68eb      	ldr	r3, [r5, #12]
 8006576:	6858      	ldr	r0, [r3, #4]
 8006578:	f7fb fd46 	bl	8002008 <lwip_htonl>
 800657c:	892b      	ldrh	r3, [r5, #8]
 800657e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006580:	1a9b      	subs	r3, r3, r2
 8006582:	4418      	add	r0, r3
     (seg == NULL ||
 8006584:	4287      	cmp	r7, r0
 8006586:	d3ef      	bcc.n	8006568 <tcp_output+0x3c>
  useg = pcb->unacked;
 8006588:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 800658a:	2e00      	cmp	r6, #0
 800658c:	d136      	bne.n	80065fc <tcp_output+0xd0>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800658e:	f104 0804 	add.w	r8, r4, #4
 8006592:	4640      	mov	r0, r8
 8006594:	f7fc f9ca 	bl	800292c <ip4_route>
  if (netif == NULL) {
 8006598:	4681      	mov	r9, r0
 800659a:	2800      	cmp	r0, #0
 800659c:	f000 813c 	beq.w	8006818 <tcp_output+0x2ec>
  if (ip_addr_isany(&pcb->local_ip)) {
 80065a0:	b10c      	cbz	r4, 80065a6 <tcp_output+0x7a>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	b913      	cbnz	r3, 80065ac <tcp_output+0x80>
    ip_addr_copy(pcb->local_ip, *local_ip);
 80065a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80065aa:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 80065ac:	b1d5      	cbz	r5, 80065e4 <tcp_output+0xb8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80065ae:	68eb      	ldr	r3, [r5, #12]
 80065b0:	6858      	ldr	r0, [r3, #4]
 80065b2:	f7fb fd29 	bl	8002008 <lwip_htonl>
 80065b6:	892b      	ldrh	r3, [r5, #8]
 80065b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80065ba:	1a9b      	subs	r3, r3, r2
 80065bc:	4418      	add	r0, r3
  if (seg != NULL &&
 80065be:	4287      	cmp	r7, r0
 80065c0:	d26f      	bcs.n	80066a2 <tcp_output+0x176>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80065c2:	2f00      	cmp	r7, #0
 80065c4:	d06d      	beq.n	80066a2 <tcp_output+0x176>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 80065c6:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 80065ca:	429f      	cmp	r7, r3
 80065cc:	d169      	bne.n	80066a2 <tcp_output+0x176>
 80065ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d166      	bne.n	80066a2 <tcp_output+0x176>
    if (pcb->persist_backoff == 0) {
 80065d4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 80065d8:	b923      	cbnz	r3, 80065e4 <tcp_output+0xb8>
      pcb->persist_cnt = 0;
 80065da:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
      pcb->persist_backoff = 1;
 80065de:	2301      	movs	r3, #1
 80065e0:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (pcb->unsent == NULL) {
 80065e4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80065e6:	b913      	cbnz	r3, 80065ee <tcp_output+0xc2>
    pcb->unsent_oversize = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 80065ee:	7ea3      	ldrb	r3, [r4, #26]
 80065f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f4:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 80065f6:	2000      	movs	r0, #0
 80065f8:	e0e6      	b.n	80067c8 <tcp_output+0x29c>
 80065fa:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 80065fc:	6833      	ldr	r3, [r6, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1fb      	bne.n	80065fa <tcp_output+0xce>
 8006602:	e7c4      	b.n	800658e <tcp_output+0x62>
    pcb->unsent = seg->next;
 8006604:	682b      	ldr	r3, [r5, #0]
 8006606:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8006608:	7d23      	ldrb	r3, [r4, #20]
 800660a:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800660c:	bf1e      	ittt	ne
 800660e:	7ea3      	ldrbne	r3, [r4, #26]
 8006610:	f023 0303 	bicne.w	r3, r3, #3
 8006614:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8006616:	68eb      	ldr	r3, [r5, #12]
 8006618:	6858      	ldr	r0, [r3, #4]
 800661a:	f7fb fcf5 	bl	8002008 <lwip_htonl>
 800661e:	68e9      	ldr	r1, [r5, #12]
 8006620:	4683      	mov	fp, r0
 8006622:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8006626:	8988      	ldrh	r0, [r1, #12]
 8006628:	f7fb fceb 	bl	8002002 <lwip_htons>
 800662c:	f010 0003 	ands.w	r0, r0, #3
 8006630:	eb0b 030a 	add.w	r3, fp, sl
    if (TCP_TCPLEN(seg) > 0) {
 8006634:	68ea      	ldr	r2, [r5, #12]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8006636:	bf18      	it	ne
 8006638:	2001      	movne	r0, #1
    if (TCP_TCPLEN(seg) > 0) {
 800663a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800663e:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8006640:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006642:	1a1b      	subs	r3, r3, r0
 8006644:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 8006646:	bfb8      	it	lt
 8006648:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 800664a:	8990      	ldrh	r0, [r2, #12]
 800664c:	f7fb fcd9 	bl	8002002 <lwip_htons>
 8006650:	f010 0003 	ands.w	r0, r0, #3
 8006654:	bf18      	it	ne
 8006656:	2001      	movne	r0, #1
 8006658:	eb10 0f0a 	cmn.w	r0, sl
 800665c:	f000 80d8 	beq.w	8006810 <tcp_output+0x2e4>
      seg->next = NULL;
 8006660:	2300      	movs	r3, #0
 8006662:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8006664:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006666:	b913      	cbnz	r3, 800666e <tcp_output+0x142>
        pcb->unacked = seg;
 8006668:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 800666a:	462e      	mov	r6, r5
 800666c:	e016      	b.n	800669c <tcp_output+0x170>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800666e:	68eb      	ldr	r3, [r5, #12]
 8006670:	6858      	ldr	r0, [r3, #4]
 8006672:	f7fb fcc9 	bl	8002008 <lwip_htonl>
 8006676:	68f2      	ldr	r2, [r6, #12]
 8006678:	4682      	mov	sl, r0
 800667a:	6850      	ldr	r0, [r2, #4]
 800667c:	f7fb fcc4 	bl	8002008 <lwip_htonl>
 8006680:	ebaa 0000 	sub.w	r0, sl, r0
 8006684:	2800      	cmp	r0, #0
 8006686:	f280 80c1 	bge.w	800680c <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800668a:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	2a00      	cmp	r2, #0
 8006692:	f040 80a9 	bne.w	80067e8 <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800669a:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800669c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 800669e:	2d00      	cmp	r5, #0
 80066a0:	d0a2      	beq.n	80065e8 <tcp_output+0xbc>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80066a2:	68eb      	ldr	r3, [r5, #12]
 80066a4:	6858      	ldr	r0, [r3, #4]
 80066a6:	f7fb fcaf 	bl	8002008 <lwip_htonl>
 80066aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80066ac:	1ac0      	subs	r0, r0, r3
 80066ae:	892b      	ldrh	r3, [r5, #8]
 80066b0:	4418      	add	r0, r3
  while (seg != NULL &&
 80066b2:	4287      	cmp	r7, r0
 80066b4:	d396      	bcc.n	80065e4 <tcp_output+0xb8>
    LWIP_ASSERT("RST not expected here!",
 80066b6:	68eb      	ldr	r3, [r5, #12]
 80066b8:	8998      	ldrh	r0, [r3, #12]
 80066ba:	f7fb fca2 	bl	8002002 <lwip_htons>
 80066be:	0742      	lsls	r2, r0, #29
 80066c0:	d506      	bpl.n	80066d0 <tcp_output+0x1a4>
 80066c2:	4b43      	ldr	r3, [pc, #268]	; (80067d0 <tcp_output+0x2a4>)
 80066c4:	f240 4246 	movw	r2, #1094	; 0x446
 80066c8:	4945      	ldr	r1, [pc, #276]	; (80067e0 <tcp_output+0x2b4>)
 80066ca:	4843      	ldr	r0, [pc, #268]	; (80067d8 <tcp_output+0x2ac>)
 80066cc:	f001 fa8c 	bl	8007be8 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80066d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80066d2:	b19b      	cbz	r3, 80066fc <tcp_output+0x1d0>
 80066d4:	7ea2      	ldrb	r2, [r4, #26]
 80066d6:	f012 0f44 	tst.w	r2, #68	; 0x44
 80066da:	d10f      	bne.n	80066fc <tcp_output+0x1d0>
 80066dc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80066de:	b12b      	cbz	r3, 80066ec <tcp_output+0x1c0>
 80066e0:	6819      	ldr	r1, [r3, #0]
 80066e2:	b959      	cbnz	r1, 80066fc <tcp_output+0x1d0>
 80066e4:	8919      	ldrh	r1, [r3, #8]
 80066e6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80066e8:	4299      	cmp	r1, r3
 80066ea:	d207      	bcs.n	80066fc <tcp_output+0x1d0>
 80066ec:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80066f0:	b123      	cbz	r3, 80066fc <tcp_output+0x1d0>
 80066f2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80066f6:	2b08      	cmp	r3, #8
 80066f8:	f240 8091 	bls.w	800681e <tcp_output+0x2f2>
    if (pcb->state != SYN_SENT) {
 80066fc:	7d23      	ldrb	r3, [r4, #20]
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d00a      	beq.n	8006718 <tcp_output+0x1ec>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8006702:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8006706:	2010      	movs	r0, #16
 8006708:	f8ba b00c 	ldrh.w	fp, [sl, #12]
 800670c:	f7fb fc79 	bl	8002002 <lwip_htons>
 8006710:	ea4b 0000 	orr.w	r0, fp, r0
 8006714:	f8aa 000c 	strh.w	r0, [sl, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8006718:	686b      	ldr	r3, [r5, #4]
 800671a:	89db      	ldrh	r3, [r3, #14]
 800671c:	2b01      	cmp	r3, #1
 800671e:	f47f af71 	bne.w	8006604 <tcp_output+0xd8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8006722:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8006726:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006728:	f7fb fc6e 	bl	8002008 <lwip_htonl>
 800672c:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8006730:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8006732:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8006736:	f7fb fc64 	bl	8002002 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800673a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800673c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800673e:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8006742:	4413      	add	r3, r2
 8006744:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8006746:	7aab      	ldrb	r3, [r5, #10]
 8006748:	07db      	lsls	r3, r3, #31
 800674a:	d50c      	bpl.n	8006766 <tcp_output+0x23a>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800674c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8006750:	4641      	mov	r1, r8
 8006752:	f44f 7006 	mov.w	r0, #536	; 0x218
 8006756:	f7fe fa93 	bl	8004c80 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800675a:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800675e:	f7fb fc53 	bl	8002008 <lwip_htonl>
 8006762:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8006766:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800676a:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800676c:	bfbc      	itt	lt
 800676e:	2300      	movlt	r3, #0
 8006770:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8006772:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006774:	b93b      	cbnz	r3, 8006786 <tcp_output+0x25a>
    pcb->rttest = tcp_ticks;
 8006776:	4b1b      	ldr	r3, [pc, #108]	; (80067e4 <tcp_output+0x2b8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800677c:	68eb      	ldr	r3, [r5, #12]
 800677e:	6858      	ldr	r0, [r3, #4]
 8006780:	f7fb fc42 	bl	8002008 <lwip_htonl>
 8006784:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8006786:	6868      	ldr	r0, [r5, #4]
 8006788:	68ea      	ldr	r2, [r5, #12]
 800678a:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800678c:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800678e:	1ad3      	subs	r3, r2, r3
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 8006790:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8006792:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8006794:	1ac9      	subs	r1, r1, r3
 8006796:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 8006798:	8901      	ldrh	r1, [r0, #8]
 800679a:	1acb      	subs	r3, r1, r3
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800679c:	4621      	mov	r1, r4
  seg->p->tot_len -= len;
 800679e:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	7413      	strb	r3, [r2, #16]
 80067a4:	7453      	strb	r3, [r2, #17]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80067a6:	2206      	movs	r2, #6
 80067a8:	7aa3      	ldrb	r3, [r4, #10]
 80067aa:	9201      	str	r2, [sp, #4]
 80067ac:	7a62      	ldrb	r2, [r4, #9]
 80067ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80067b2:	9200      	str	r2, [sp, #0]
 80067b4:	4642      	mov	r2, r8
 80067b6:	f7fc fa1f 	bl	8002bf8 <ip4_output_if>
    if (err != ERR_OK) {
 80067ba:	2800      	cmp	r0, #0
 80067bc:	f43f af22 	beq.w	8006604 <tcp_output+0xd8>
      pcb->flags |= TF_NAGLEMEMERR;
 80067c0:	7ea3      	ldrb	r3, [r4, #26]
 80067c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067c6:	76a3      	strb	r3, [r4, #26]
}
 80067c8:	b007      	add	sp, #28
 80067ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ce:	bf00      	nop
 80067d0:	0800a12f 	.word	0x0800a12f
 80067d4:	0800a0c4 	.word	0x0800a0c4
 80067d8:	08008f43 	.word	0x08008f43
 80067dc:	2000375c 	.word	0x2000375c
 80067e0:	0800a0ea 	.word	0x0800a0ea
 80067e4:	2000374c 	.word	0x2000374c
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80067e8:	68d2      	ldr	r2, [r2, #12]
 80067ea:	9305      	str	r3, [sp, #20]
 80067ec:	6850      	ldr	r0, [r2, #4]
 80067ee:	f7fb fc0b 	bl	8002008 <lwip_htonl>
 80067f2:	68e9      	ldr	r1, [r5, #12]
 80067f4:	4682      	mov	sl, r0
 80067f6:	6848      	ldr	r0, [r1, #4]
 80067f8:	f7fb fc06 	bl	8002008 <lwip_htonl>
 80067fc:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 8006800:	9b05      	ldr	r3, [sp, #20]
 8006802:	2800      	cmp	r0, #0
 8006804:	f6bf af47 	bge.w	8006696 <tcp_output+0x16a>
              cur_seg = &((*cur_seg)->next );
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	e740      	b.n	800668e <tcp_output+0x162>
          useg->next = seg;
 800680c:	6035      	str	r5, [r6, #0]
 800680e:	e72c      	b.n	800666a <tcp_output+0x13e>
      tcp_seg_free(seg);
 8006810:	4628      	mov	r0, r5
 8006812:	f7fd fd23 	bl	800425c <tcp_seg_free>
 8006816:	e741      	b.n	800669c <tcp_output+0x170>
    return ERR_RTE;
 8006818:	f06f 0003 	mvn.w	r0, #3
 800681c:	e7d4      	b.n	80067c8 <tcp_output+0x29c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800681e:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8006822:	f47f af6b 	bne.w	80066fc <tcp_output+0x1d0>
 8006826:	e6dd      	b.n	80065e4 <tcp_output+0xb8>

08006828 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8006828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682c:	b085      	sub	sp, #20
 800682e:	4681      	mov	r9, r0
 8006830:	460e      	mov	r6, r1
 8006832:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8006834:	2114      	movs	r1, #20
 8006836:	2200      	movs	r2, #0
 8006838:	2001      	movs	r0, #1
{
 800683a:	461f      	mov	r7, r3
 800683c:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 8006840:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8006844:	f7fd f98c 	bl	8003b60 <pbuf_alloc>
  if (p == NULL) {
 8006848:	4605      	mov	r5, r0
 800684a:	2800      	cmp	r0, #0
 800684c:	d03c      	beq.n	80068c8 <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800684e:	8943      	ldrh	r3, [r0, #10]
 8006850:	2b13      	cmp	r3, #19
 8006852:	d806      	bhi.n	8006862 <tcp_rst+0x3a>
 8006854:	4b1e      	ldr	r3, [pc, #120]	; (80068d0 <tcp_rst+0xa8>)
 8006856:	f240 524d 	movw	r2, #1357	; 0x54d
 800685a:	491e      	ldr	r1, [pc, #120]	; (80068d4 <tcp_rst+0xac>)
 800685c:	481e      	ldr	r0, [pc, #120]	; (80068d8 <tcp_rst+0xb0>)
 800685e:	f001 f9c3 	bl	8007be8 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8006862:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 8006864:	4658      	mov	r0, fp
 8006866:	f7fb fbcc 	bl	8002002 <lwip_htons>
 800686a:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800686c:	4650      	mov	r0, sl
 800686e:	f7fb fbc8 	bl	8002002 <lwip_htons>
 8006872:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8006874:	4648      	mov	r0, r9
 8006876:	f7fb fbc7 	bl	8002008 <lwip_htonl>
 800687a:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800687c:	4630      	mov	r0, r6
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800687e:	2600      	movs	r6, #0
  tcphdr->ackno = lwip_htonl(ackno);
 8006880:	f7fb fbc2 	bl	8002008 <lwip_htonl>
 8006884:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8006886:	f245 0014 	movw	r0, #20500	; 0x5014
 800688a:	f7fb fbba 	bl	8002002 <lwip_htons>
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800688e:	2308      	movs	r3, #8
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8006890:	81a0      	strh	r0, [r4, #12]
  tcphdr->urgp = 0;

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8006892:	4638      	mov	r0, r7
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8006894:	73a3      	strb	r3, [r4, #14]
 8006896:	2360      	movs	r3, #96	; 0x60
  tcphdr->chksum = 0;
 8006898:	7426      	strb	r6, [r4, #16]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800689a:	73e3      	strb	r3, [r4, #15]
  tcphdr->chksum = 0;
 800689c:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 800689e:	74a6      	strb	r6, [r4, #18]
 80068a0:	74e6      	strb	r6, [r4, #19]
  netif = ip_route(local_ip, remote_ip);
 80068a2:	f7fc f843 	bl	800292c <ip4_route>
  if (netif != NULL) {
 80068a6:	b148      	cbz	r0, 80068bc <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80068a8:	2306      	movs	r3, #6
 80068aa:	9002      	str	r0, [sp, #8]
 80068ac:	9600      	str	r6, [sp, #0]
 80068ae:	463a      	mov	r2, r7
 80068b0:	9301      	str	r3, [sp, #4]
 80068b2:	4641      	mov	r1, r8
 80068b4:	23ff      	movs	r3, #255	; 0xff
 80068b6:	4628      	mov	r0, r5
 80068b8:	f7fc f99e 	bl	8002bf8 <ip4_output_if>
  }
  pbuf_free(p);
 80068bc:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80068be:	b005      	add	sp, #20
 80068c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 80068c4:	f7fd b8ea 	b.w	8003a9c <pbuf_free>
}
 80068c8:	b005      	add	sp, #20
 80068ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ce:	bf00      	nop
 80068d0:	0800a12f 	.word	0x0800a12f
 80068d4:	0800a101 	.word	0x0800a101
 80068d8:	08008f43 	.word	0x08008f43

080068dc <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 80068dc:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 80068de:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 80068e0:	b1aa      	cbz	r2, 800690e <tcp_rexmit_rto+0x32>
 80068e2:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 80068e4:	680b      	ldr	r3, [r1, #0]
 80068e6:	b983      	cbnz	r3, 800690a <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80068e8:	6e84      	ldr	r4, [r0, #104]	; 0x68
 80068ea:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80068ec:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80068ee:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  pcb->unsent = pcb->unacked;
 80068f2:	6682      	str	r2, [r0, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 80068f4:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 80068f6:	bf1c      	itt	ne
 80068f8:	3301      	addne	r3, #1
 80068fa:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80068fe:	2300      	movs	r3, #0

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 8006900:	f85d 4b04 	ldr.w	r4, [sp], #4
  pcb->rttest = 0;
 8006904:	6343      	str	r3, [r0, #52]	; 0x34
  tcp_output(pcb);
 8006906:	f7ff be11 	b.w	800652c <tcp_output>
 800690a:	4619      	mov	r1, r3
 800690c:	e7ea      	b.n	80068e4 <tcp_rexmit_rto+0x8>
}
 800690e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006912:	4770      	bx	lr

08006914 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8006914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8006916:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 8006918:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 800691a:	b1ad      	cbz	r5, 8006948 <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800691c:	682b      	ldr	r3, [r5, #0]

  cur_seg = &(pcb->unsent);
 800691e:	f100 0668 	add.w	r6, r0, #104	; 0x68
  pcb->unacked = seg->next;
 8006922:	66c3      	str	r3, [r0, #108]	; 0x6c
  while (*cur_seg &&
 8006924:	6833      	ldr	r3, [r6, #0]
 8006926:	b983      	cbnz	r3, 800694a <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 8006928:	6833      	ldr	r3, [r6, #0]
 800692a:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800692c:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800692e:	682b      	ldr	r3, [r5, #0]
 8006930:	b90b      	cbnz	r3, 8006936 <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8006932:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8006936:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800693a:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800693c:	bf1c      	itt	ne
 800693e:	3301      	addne	r3, #1
 8006940:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8006944:	2300      	movs	r3, #0
 8006946:	6363      	str	r3, [r4, #52]	; 0x34
 8006948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	6858      	ldr	r0, [r3, #4]
 800694e:	f7fb fb5b 	bl	8002008 <lwip_htonl>
 8006952:	68eb      	ldr	r3, [r5, #12]
 8006954:	4607      	mov	r7, r0
 8006956:	6858      	ldr	r0, [r3, #4]
 8006958:	f7fb fb56 	bl	8002008 <lwip_htonl>
 800695c:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800695e:	2800      	cmp	r0, #0
 8006960:	dae2      	bge.n	8006928 <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 8006962:	6836      	ldr	r6, [r6, #0]
 8006964:	e7de      	b.n	8006924 <tcp_rexmit+0x10>

08006966 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8006966:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 8006968:	b510      	push	{r4, lr}
 800696a:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800696c:	b30b      	cbz	r3, 80069b2 <tcp_rexmit_fast+0x4c>
 800696e:	7e83      	ldrb	r3, [r0, #26]
 8006970:	075b      	lsls	r3, r3, #29
 8006972:	d41e      	bmi.n	80069b2 <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8006974:	f7ff ffce 	bl	8006914 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8006978:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800697c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8006980:	4293      	cmp	r3, r2
 8006982:	bf38      	it	cc
 8006984:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8006986:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8006988:	bf28      	it	cs
 800698a:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800698c:	0059      	lsls	r1, r3, #1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800698e:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8006992:	428a      	cmp	r2, r1
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8006994:	440b      	add	r3, r1
      pcb->ssthresh = 2*pcb->mss;
 8006996:	bf38      	it	cc
 8006998:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800699c:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 80069a0:	4413      	add	r3, r2
 80069a2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 80069a6:	7ea3      	ldrb	r3, [r4, #26]
 80069a8:	f043 0304 	orr.w	r3, r3, #4
 80069ac:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	8623      	strh	r3, [r4, #48]	; 0x30
 80069b2:	bd10      	pop	{r4, pc}

080069b4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80069b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80069b6:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 80069b8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80069ba:	3801      	subs	r0, #1
 80069bc:	f7fb fb24 	bl	8002008 <lwip_htonl>
 80069c0:	2100      	movs	r1, #0
 80069c2:	4602      	mov	r2, r0
 80069c4:	4620      	mov	r0, r4
 80069c6:	f7ff fc87 	bl	80062d8 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80069ca:	4605      	mov	r5, r0
 80069cc:	b1c8      	cbz	r0, 8006a02 <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80069ce:	1d26      	adds	r6, r4, #4
 80069d0:	4630      	mov	r0, r6
 80069d2:	f7fb ffab 	bl	800292c <ip4_route>
  if (netif == NULL) {
 80069d6:	b188      	cbz	r0, 80069fc <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80069d8:	2100      	movs	r1, #0
 80069da:	2206      	movs	r2, #6
 80069dc:	7aa3      	ldrb	r3, [r4, #10]
 80069de:	9002      	str	r0, [sp, #8]
 80069e0:	4628      	mov	r0, r5
 80069e2:	e88d 0006 	stmia.w	sp, {r1, r2}
 80069e6:	4621      	mov	r1, r4
 80069e8:	4632      	mov	r2, r6
 80069ea:	f7fc f905 	bl	8002bf8 <ip4_output_if>
 80069ee:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80069f0:	4628      	mov	r0, r5
 80069f2:	f7fd f853 	bl	8003a9c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 80069f6:	4620      	mov	r0, r4
 80069f8:	b004      	add	sp, #16
 80069fa:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 80069fc:	f06f 0403 	mvn.w	r4, #3
 8006a00:	e7f6      	b.n	80069f0 <tcp_keepalive+0x3c>
    return ERR_MEM;
 8006a02:	f04f 34ff 	mov.w	r4, #4294967295
 8006a06:	e7f6      	b.n	80069f6 <tcp_keepalive+0x42>

08006a08 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8006a08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8006a0c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 8006a0e:	4606      	mov	r6, r0

  if (seg == NULL) {
 8006a10:	b914      	cbnz	r4, 8006a18 <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 8006a12:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 8006a14:	2c00      	cmp	r4, #0
 8006a16:	d041      	beq.n	8006a9c <tcp_zero_window_probe+0x94>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8006a18:	68e3      	ldr	r3, [r4, #12]
 8006a1a:	8998      	ldrh	r0, [r3, #12]
 8006a1c:	f7fb faf1 	bl	8002002 <lwip_htons>
 8006a20:	f010 0501 	ands.w	r5, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8006a24:	68e3      	ldr	r3, [r4, #12]
 8006a26:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8006a28:	bf18      	it	ne
 8006a2a:	8925      	ldrhne	r5, [r4, #8]
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8006a2c:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8006a2e:	bf1c      	itt	ne
 8006a30:	fab5 f585 	clzne	r5, r5
 8006a34:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8006a36:	f085 0101 	eor.w	r1, r5, #1
 8006a3a:	f7ff fc4d 	bl	80062d8 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8006a3e:	4607      	mov	r7, r0
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d03d      	beq.n	8006ac0 <tcp_zero_window_probe+0xb8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8006a44:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 8006a48:	b365      	cbz	r5, 8006aa4 <tcp_zero_window_probe+0x9c>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8006a4a:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 8006a4e:	2011      	movs	r0, #17
 8006a50:	f7fb fad7 	bl	8002002 <lwip_htons>
 8006a54:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8006a58:	b2ad      	uxth	r5, r5
 8006a5a:	4328      	orrs	r0, r5
 8006a5c:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8006a60:	68e3      	ldr	r3, [r4, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8006a62:	1d34      	adds	r4, r6, #4
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8006a64:	6858      	ldr	r0, [r3, #4]
 8006a66:	f7fb facf 	bl	8002008 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8006a6a:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8006a6c:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8006a6e:	1a1b      	subs	r3, r3, r0
 8006a70:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 8006a72:	bfb8      	it	lt
 8006a74:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8006a76:	4620      	mov	r0, r4
 8006a78:	f7fb ff58 	bl	800292c <ip4_route>
  if (netif == NULL) {
 8006a7c:	b1e8      	cbz	r0, 8006aba <tcp_zero_window_probe+0xb2>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8006a7e:	2100      	movs	r1, #0
 8006a80:	2206      	movs	r2, #6
 8006a82:	9002      	str	r0, [sp, #8]
 8006a84:	4638      	mov	r0, r7
 8006a86:	7ab3      	ldrb	r3, [r6, #10]
 8006a88:	e88d 0006 	stmia.w	sp, {r1, r2}
 8006a8c:	4622      	mov	r2, r4
 8006a8e:	4631      	mov	r1, r6
 8006a90:	f7fc f8b2 	bl	8002bf8 <ip4_output_if>
 8006a94:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8006a96:	4638      	mov	r0, r7
 8006a98:	f7fd f800 	bl	8003a9c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	b004      	add	sp, #16
 8006aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8006aa4:	6860      	ldr	r0, [r4, #4]
 8006aa6:	f108 0114 	add.w	r1, r8, #20
 8006aaa:	8922      	ldrh	r2, [r4, #8]
 8006aac:	8903      	ldrh	r3, [r0, #8]
 8006aae:	1a9b      	subs	r3, r3, r2
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f7fd fa8e 	bl	8003fd4 <pbuf_copy_partial>
 8006ab8:	e7d2      	b.n	8006a60 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 8006aba:	f06f 0403 	mvn.w	r4, #3
 8006abe:	e7ea      	b.n	8006a96 <tcp_zero_window_probe+0x8e>
    return ERR_MEM;
 8006ac0:	f04f 34ff 	mov.w	r4, #4294967295
 8006ac4:	e7ea      	b.n	8006a9c <tcp_zero_window_probe+0x94>
	...

08006ac8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8006ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006acc:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8006ace:	2006      	movs	r0, #6
{
 8006ad0:	460f      	mov	r7, r1
 8006ad2:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8006ad4:	f7fc fe78 	bl	80037c8 <memp_malloc>
  if (timeout == NULL) {
 8006ad8:	4604      	mov	r4, r0
 8006ada:	b938      	cbnz	r0, 8006aec <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8006adc:	4b1e      	ldr	r3, [pc, #120]	; (8006b58 <sys_timeout+0x90>)
 8006ade:	22d4      	movs	r2, #212	; 0xd4
 8006ae0:	491e      	ldr	r1, [pc, #120]	; (8006b5c <sys_timeout+0x94>)
 8006ae2:	481f      	ldr	r0, [pc, #124]	; (8006b60 <sys_timeout+0x98>)
        t->next = timeout;
        break;
      }
    }
  }
}
 8006ae4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8006ae8:	f001 b87e 	b.w	8007be8 <iprintf>
  now = sys_now();
 8006aec:	f000 fcb8 	bl	8007460 <sys_now>
  if (next_timeout == NULL) {
 8006af0:	4a1c      	ldr	r2, [pc, #112]	; (8006b64 <sys_timeout+0x9c>)
 8006af2:	491d      	ldr	r1, [pc, #116]	; (8006b68 <sys_timeout+0xa0>)
 8006af4:	6813      	ldr	r3, [r2, #0]
 8006af6:	b95b      	cbnz	r3, 8006b10 <sys_timeout+0x48>
    timeouts_last_time = now;
 8006af8:	6008      	str	r0, [r1, #0]
    diff = 0;
 8006afa:	4618      	mov	r0, r3
  timeout->next = NULL;
 8006afc:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 8006afe:	4428      	add	r0, r5
  timeout->h = handler;
 8006b00:	60a7      	str	r7, [r4, #8]
  timeout->next = NULL;
 8006b02:	6021      	str	r1, [r4, #0]
  timeout->arg = arg;
 8006b04:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 8006b06:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 8006b08:	b92b      	cbnz	r3, 8006b16 <sys_timeout+0x4e>
    next_timeout = timeout;
 8006b0a:	6014      	str	r4, [r2, #0]
 8006b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 8006b10:	6809      	ldr	r1, [r1, #0]
 8006b12:	1a40      	subs	r0, r0, r1
 8006b14:	e7f2      	b.n	8006afc <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 8006b16:	6859      	ldr	r1, [r3, #4]
 8006b18:	428d      	cmp	r5, r1
 8006b1a:	d217      	bcs.n	8006b4c <sys_timeout+0x84>
    next_timeout->time -= msecs;
 8006b1c:	1b4d      	subs	r5, r1, r5
 8006b1e:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 8006b20:	6023      	str	r3, [r4, #0]
 8006b22:	e7f2      	b.n	8006b0a <sys_timeout+0x42>
      if (t->next == NULL || t->next->time > timeout->time) {
 8006b24:	684e      	ldr	r6, [r1, #4]
 8006b26:	42b2      	cmp	r2, r6
 8006b28:	d312      	bcc.n	8006b50 <sys_timeout+0x88>
 8006b2a:	4608      	mov	r0, r1
      timeout->time -= t->time;
 8006b2c:	6841      	ldr	r1, [r0, #4]
 8006b2e:	6862      	ldr	r2, [r4, #4]
 8006b30:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 8006b32:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 8006b34:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8006b36:	2900      	cmp	r1, #0
 8006b38:	d1f4      	bne.n	8006b24 <sys_timeout+0x5c>
        } else if (timeout->time > msecs) {
 8006b3a:	4295      	cmp	r5, r2
 8006b3c:	d202      	bcs.n	8006b44 <sys_timeout+0x7c>
          timeout->time = msecs + next_timeout->time;
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	441d      	add	r5, r3
 8006b42:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 8006b44:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 8006b46:	6004      	str	r4, [r0, #0]
        break;
 8006b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	e7ed      	b.n	8006b2c <sys_timeout+0x64>
          t->next->time -= timeout->time;
 8006b50:	1ab2      	subs	r2, r6, r2
 8006b52:	604a      	str	r2, [r1, #4]
 8006b54:	e7f6      	b.n	8006b44 <sys_timeout+0x7c>
 8006b56:	bf00      	nop
 8006b58:	0800a190 	.word	0x0800a190
 8006b5c:	0800a1c4 	.word	0x0800a1c4
 8006b60:	08008f43 	.word	0x08008f43
 8006b64:	20000200 	.word	0x20000200
 8006b68:	20000208 	.word	0x20000208

08006b6c <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8006b6c:	4b08      	ldr	r3, [pc, #32]	; (8006b90 <tcp_timer_needed+0x24>)
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	b962      	cbnz	r2, 8006b8c <tcp_timer_needed+0x20>
 8006b72:	4a08      	ldr	r2, [pc, #32]	; (8006b94 <tcp_timer_needed+0x28>)
 8006b74:	6812      	ldr	r2, [r2, #0]
 8006b76:	b912      	cbnz	r2, 8006b7e <tcp_timer_needed+0x12>
 8006b78:	4a07      	ldr	r2, [pc, #28]	; (8006b98 <tcp_timer_needed+0x2c>)
 8006b7a:	6812      	ldr	r2, [r2, #0]
 8006b7c:	b132      	cbz	r2, 8006b8c <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 8006b7e:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8006b80:	4906      	ldr	r1, [pc, #24]	; (8006b9c <tcp_timer_needed+0x30>)
 8006b82:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 8006b84:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8006b86:	2200      	movs	r2, #0
 8006b88:	f7ff bf9e 	b.w	8006ac8 <sys_timeout>
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	20000204 	.word	0x20000204
 8006b94:	20003748 	.word	0x20003748
 8006b98:	20003758 	.word	0x20003758
 8006b9c:	08006ba1 	.word	0x08006ba1

08006ba0 <tcpip_tcp_timer>:
{
 8006ba0:	b508      	push	{r3, lr}
  tcp_tmr();
 8006ba2:	f7fd ff0f 	bl	80049c4 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8006ba6:	4b08      	ldr	r3, [pc, #32]	; (8006bc8 <tcpip_tcp_timer+0x28>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	b913      	cbnz	r3, 8006bb2 <tcpip_tcp_timer+0x12>
 8006bac:	4b07      	ldr	r3, [pc, #28]	; (8006bcc <tcpip_tcp_timer+0x2c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	b133      	cbz	r3, 8006bc0 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	4906      	ldr	r1, [pc, #24]	; (8006bd0 <tcpip_tcp_timer+0x30>)
 8006bb6:	20fa      	movs	r0, #250	; 0xfa
}
 8006bb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8006bbc:	f7ff bf84 	b.w	8006ac8 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 8006bc0:	4a04      	ldr	r2, [pc, #16]	; (8006bd4 <tcpip_tcp_timer+0x34>)
 8006bc2:	6013      	str	r3, [r2, #0]
 8006bc4:	bd08      	pop	{r3, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20003748 	.word	0x20003748
 8006bcc:	20003758 	.word	0x20003758
 8006bd0:	08006ba1 	.word	0x08006ba1
 8006bd4:	20000204 	.word	0x20000204

08006bd8 <sys_timeouts_init>:
{
 8006bd8:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8006bda:	4d0a      	ldr	r5, [pc, #40]	; (8006c04 <sys_timeouts_init+0x2c>)
 8006bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006be0:	4c09      	ldr	r4, [pc, #36]	; (8006c08 <sys_timeouts_init+0x30>)
 8006be2:	f105 0208 	add.w	r2, r5, #8
 8006be6:	4621      	mov	r1, r4
 8006be8:	f7ff ff6e 	bl	8006ac8 <sys_timeout>
 8006bec:	f105 0210 	add.w	r2, r5, #16
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bf6:	f7ff ff67 	bl	8006ac8 <sys_timeout>
  timeouts_last_time = sys_now();
 8006bfa:	f000 fc31 	bl	8007460 <sys_now>
 8006bfe:	4b03      	ldr	r3, [pc, #12]	; (8006c0c <sys_timeouts_init+0x34>)
 8006c00:	6018      	str	r0, [r3, #0]
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	0800a178 	.word	0x0800a178
 8006c08:	08006c11 	.word	0x08006c11
 8006c0c:	20000208 	.word	0x20000208

08006c10 <cyclic_timer>:
{
 8006c10:	b510      	push	{r4, lr}
 8006c12:	4604      	mov	r4, r0
  cyclic->handler();
 8006c14:	6843      	ldr	r3, [r0, #4]
 8006c16:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8006c18:	4903      	ldr	r1, [pc, #12]	; (8006c28 <cyclic_timer+0x18>)
 8006c1a:	4622      	mov	r2, r4
 8006c1c:	6820      	ldr	r0, [r4, #0]
}
 8006c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8006c22:	f7ff bf51 	b.w	8006ac8 <sys_timeout>
 8006c26:	bf00      	nop
 8006c28:	08006c11 	.word	0x08006c11

08006c2c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8006c2c:	4770      	bx	lr
	...

08006c30 <udp_input>:
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8006c30:	8943      	ldrh	r3, [r0, #10]
 8006c32:	2b07      	cmp	r3, #7
{
 8006c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c38:	4605      	mov	r5, r0
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 8006c3e:	d805      	bhi.n	8006c4c <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8006c40:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8006c42:	b005      	add	sp, #20
 8006c44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8006c48:	f7fc bf28 	b.w	8003a9c <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8006c4c:	4e3e      	ldr	r6, [pc, #248]	; (8006d48 <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 8006c4e:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8006c50:	6831      	ldr	r1, [r6, #0]
 8006c52:	6970      	ldr	r0, [r6, #20]
 8006c54:	f7fb ffe1 	bl	8002c1a <ip4_addr_isbroadcast_u32>
 8006c58:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 8006c5a:	8820      	ldrh	r0, [r4, #0]
 8006c5c:	f7fb f9d1 	bl	8002002 <lwip_htons>
 8006c60:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 8006c62:	8860      	ldrh	r0, [r4, #2]
  uncon_pcb = NULL;
 8006c64:	2400      	movs	r4, #0
  dest = lwip_ntohs(udphdr->dest);
 8006c66:	f7fb f9cc 	bl	8002002 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c6a:	4a38      	ldr	r2, [pc, #224]	; (8006d4c <udp_input+0x11c>)
  dest = lwip_ntohs(udphdr->dest);
 8006c6c:	4682      	mov	sl, r0
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006c6e:	6971      	ldr	r1, [r6, #20]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c70:	6810      	ldr	r0, [r2, #0]
  prev = NULL;
 8006c72:	46a4      	mov	ip, r4
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8006c74:	f8d6 e010 	ldr.w	lr, [r6, #16]
 8006c78:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	9603      	str	r6, [sp, #12]
 8006c7e:	b92b      	cbnz	r3, 8006c8c <udp_input+0x5c>
  if (pcb != NULL) {
 8006c80:	bb0c      	cbnz	r4, 8006cc6 <udp_input+0x96>
  if (for_us) {
 8006c82:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006c86:	428b      	cmp	r3, r1
 8006c88:	d1da      	bne.n	8006c40 <udp_input+0x10>
 8006c8a:	e01c      	b.n	8006cc6 <udp_input+0x96>
    if ((pcb->local_port == dest) &&
 8006c8c:	8a5a      	ldrh	r2, [r3, #18]
 8006c8e:	4552      	cmp	r2, sl
 8006c90:	d12b      	bne.n	8006cea <udp_input+0xba>
 8006c92:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 8006c94:	b32f      	cbz	r7, 8006ce2 <udp_input+0xb2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8006c96:	b13a      	cbz	r2, 8006ca8 <udp_input+0x78>
 8006c98:	1c4e      	adds	r6, r1, #1
 8006c9a:	d005      	beq.n	8006ca8 <udp_input+0x78>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8006c9c:	404a      	eors	r2, r1
 8006c9e:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8006ca0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8006ca4:	4216      	tst	r6, r2
 8006ca6:	d120      	bne.n	8006cea <udp_input+0xba>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8006ca8:	7c1a      	ldrb	r2, [r3, #16]
 8006caa:	0752      	lsls	r2, r2, #29
 8006cac:	d402      	bmi.n	8006cb4 <udp_input+0x84>
 8006cae:	2c00      	cmp	r4, #0
 8006cb0:	bf08      	it	eq
 8006cb2:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 8006cb4:	8a9a      	ldrh	r2, [r3, #20]
 8006cb6:	4542      	cmp	r2, r8
 8006cb8:	d117      	bne.n	8006cea <udp_input+0xba>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8006cba:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 8006cbc:	b9c2      	cbnz	r2, 8006cf0 <udp_input+0xc0>
        if (prev != NULL) {
 8006cbe:	f1bc 0f00 	cmp.w	ip, #0
 8006cc2:	d118      	bne.n	8006cf6 <udp_input+0xc6>
 8006cc4:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 8006cc6:	f06f 0107 	mvn.w	r1, #7
 8006cca:	4628      	mov	r0, r5
 8006ccc:	f7fc fee0 	bl	8003a90 <pbuf_header>
 8006cd0:	b1c0      	cbz	r0, 8006d04 <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8006cd2:	4b1f      	ldr	r3, [pc, #124]	; (8006d50 <udp_input+0x120>)
 8006cd4:	f240 1255 	movw	r2, #341	; 0x155
 8006cd8:	491e      	ldr	r1, [pc, #120]	; (8006d54 <udp_input+0x124>)
 8006cda:	481f      	ldr	r0, [pc, #124]	; (8006d58 <udp_input+0x128>)
 8006cdc:	f000 ff84 	bl	8007be8 <iprintf>
 8006ce0:	e7ae      	b.n	8006c40 <udp_input+0x10>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006ce2:	2a00      	cmp	r2, #0
 8006ce4:	d0e0      	beq.n	8006ca8 <udp_input+0x78>
 8006ce6:	428a      	cmp	r2, r1
 8006ce8:	d0de      	beq.n	8006ca8 <udp_input+0x78>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8006cea:	469c      	mov	ip, r3
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	e7c6      	b.n	8006c7e <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8006cf0:	4572      	cmp	r2, lr
 8006cf2:	d1fa      	bne.n	8006cea <udp_input+0xba>
 8006cf4:	e7e3      	b.n	8006cbe <udp_input+0x8e>
          prev->next = pcb->next;
 8006cf6:	68da      	ldr	r2, [r3, #12]
          udp_pcbs = pcb;
 8006cf8:	f8cb 3000 	str.w	r3, [fp]
          prev->next = pcb->next;
 8006cfc:	f8cc 200c 	str.w	r2, [ip, #12]
          pcb->next = udp_pcbs;
 8006d00:	60d8      	str	r0, [r3, #12]
 8006d02:	e7df      	b.n	8006cc4 <udp_input+0x94>
    if (pcb != NULL) {
 8006d04:	b164      	cbz	r4, 8006d20 <udp_input+0xf0>
      if (pcb->recv != NULL) {
 8006d06:	69a6      	ldr	r6, [r4, #24]
 8006d08:	2e00      	cmp	r6, #0
 8006d0a:	d099      	beq.n	8006c40 <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8006d0c:	f8cd 8000 	str.w	r8, [sp]
 8006d10:	462a      	mov	r2, r5
 8006d12:	4b12      	ldr	r3, [pc, #72]	; (8006d5c <udp_input+0x12c>)
 8006d14:	4621      	mov	r1, r4
 8006d16:	69e0      	ldr	r0, [r4, #28]
 8006d18:	47b0      	blx	r6
}
 8006d1a:	b005      	add	sp, #20
 8006d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8006d20:	2f00      	cmp	r7, #0
 8006d22:	d18d      	bne.n	8006c40 <udp_input+0x10>
 8006d24:	9b03      	ldr	r3, [sp, #12]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d2c:	2be0      	cmp	r3, #224	; 0xe0
 8006d2e:	d087      	beq.n	8006c40 <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8006d30:	9b03      	ldr	r3, [sp, #12]
 8006d32:	4628      	mov	r0, r5
 8006d34:	8999      	ldrh	r1, [r3, #12]
 8006d36:	3108      	adds	r1, #8
 8006d38:	b209      	sxth	r1, r1
 8006d3a:	f7fc feac 	bl	8003a96 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8006d3e:	2103      	movs	r1, #3
 8006d40:	4628      	mov	r0, r5
 8006d42:	f7fb fde9 	bl	8002918 <icmp_dest_unreach>
 8006d46:	e77b      	b.n	8006c40 <udp_input+0x10>
 8006d48:	20000220 	.word	0x20000220
 8006d4c:	20003760 	.word	0x20003760
 8006d50:	0800a201 	.word	0x0800a201
 8006d54:	0800a230 	.word	0x0800a230
 8006d58:	08008f43 	.word	0x08008f43
 8006d5c:	20000230 	.word	0x20000230

08006d60 <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 8006d60:	4b26      	ldr	r3, [pc, #152]	; (8006dfc <udp_bind+0x9c>)
{
 8006d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 8006d66:	2900      	cmp	r1, #0
 8006d68:	bf08      	it	eq
 8006d6a:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	d040      	beq.n	8006df2 <udp_bind+0x92>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8006d70:	4e23      	ldr	r6, [pc, #140]	; (8006e00 <udp_bind+0xa0>)
 8006d72:	f8d6 e000 	ldr.w	lr, [r6]
 8006d76:	4675      	mov	r5, lr
 8006d78:	b96d      	cbnz	r5, 8006d96 <udp_bind+0x36>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 8006d7a:	b192      	cbz	r2, 8006da2 <udp_bind+0x42>
 8006d7c:	4673      	mov	r3, lr
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8006d7e:	b1fb      	cbz	r3, 8006dc0 <udp_bind+0x60>
      if (pcb != ipcb) {
 8006d80:	4283      	cmp	r3, r0
 8006d82:	d006      	beq.n	8006d92 <udp_bind+0x32>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8006d84:	8a5c      	ldrh	r4, [r3, #18]
 8006d86:	4294      	cmp	r4, r2
 8006d88:	d103      	bne.n	8006d92 <udp_bind+0x32>
 8006d8a:	681f      	ldr	r7, [r3, #0]
 8006d8c:	680c      	ldr	r4, [r1, #0]
 8006d8e:	42a7      	cmp	r7, r4
 8006d90:	d029      	beq.n	8006de6 <udp_bind+0x86>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	e7f3      	b.n	8006d7e <udp_bind+0x1e>
    if (pcb == ipcb) {
 8006d96:	4285      	cmp	r5, r0
 8006d98:	d001      	beq.n	8006d9e <udp_bind+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8006d9a:	68ed      	ldr	r5, [r5, #12]
 8006d9c:	e7ec      	b.n	8006d78 <udp_bind+0x18>
      rebind = 1;
 8006d9e:	2501      	movs	r5, #1
 8006da0:	e7eb      	b.n	8006d7a <udp_bind+0x1a>
 8006da2:	4b18      	ldr	r3, [pc, #96]	; (8006e04 <udp_bind+0xa4>)
  if (port == 0) {
 8006da4:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8006da8:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8006dac:	881a      	ldrh	r2, [r3, #0]
 8006dae:	4562      	cmp	r2, ip
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8006db0:	4677      	mov	r7, lr
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8006db2:	bf16      	itet	ne
 8006db4:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8006db6:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8006dba:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8006dbc:	b957      	cbnz	r7, 8006dd4 <udp_bind+0x74>
 8006dbe:	801a      	strh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8006dc0:	680b      	ldr	r3, [r1, #0]

  pcb->local_port = port;
 8006dc2:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8006dc4:	6003      	str	r3, [r0, #0]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8006dc6:	b915      	cbnz	r5, 8006dce <udp_bind+0x6e>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8006dc8:	f8c0 e00c 	str.w	lr, [r0, #12]
    udp_pcbs = pcb;
 8006dcc:	6030      	str	r0, [r6, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8006dce:	2000      	movs	r0, #0
 8006dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pcb->local_port == udp_port) {
 8006dd4:	f8b7 8012 	ldrh.w	r8, [r7, #18]
 8006dd8:	4590      	cmp	r8, r2
 8006dda:	d108      	bne.n	8006dee <udp_bind+0x8e>
 8006ddc:	3c01      	subs	r4, #1
 8006dde:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8006de0:	2c00      	cmp	r4, #0
 8006de2:	d1e4      	bne.n	8006dae <udp_bind+0x4e>
 8006de4:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 8006de6:	f06f 0007 	mvn.w	r0, #7
 8006dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8006dee:	68ff      	ldr	r7, [r7, #12]
 8006df0:	e7e4      	b.n	8006dbc <udp_bind+0x5c>
    return ERR_VAL;
 8006df2:	f06f 0005 	mvn.w	r0, #5
}
 8006df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dfa:	bf00      	nop
 8006dfc:	08009114 	.word	0x08009114
 8006e00:	20003760 	.word	0x20003760
 8006e04:	2000000c 	.word	0x2000000c

08006e08 <udp_sendto_if_src>:
{
 8006e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e0c:	460e      	mov	r6, r1
 8006e0e:	b085      	sub	sp, #20
 8006e10:	4690      	mov	r8, r2
 8006e12:	4699      	mov	r9, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8006e14:	4607      	mov	r7, r0
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d050      	beq.n	8006ebc <udp_sendto_if_src+0xb4>
 8006e1a:	2a00      	cmp	r2, #0
 8006e1c:	d04e      	beq.n	8006ebc <udp_sendto_if_src+0xb4>
  if (pcb->local_port == 0) {
 8006e1e:	8a42      	ldrh	r2, [r0, #18]
 8006e20:	2a00      	cmp	r2, #0
 8006e22:	d033      	beq.n	8006e8c <udp_sendto_if_src+0x84>
  if (pbuf_header(p, UDP_HLEN)) {
 8006e24:	2108      	movs	r1, #8
 8006e26:	4630      	mov	r0, r6
 8006e28:	f7fc fe32 	bl	8003a90 <pbuf_header>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d137      	bne.n	8006ea0 <udp_sendto_if_src+0x98>
 8006e30:	4634      	mov	r4, r6
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8006e32:	8963      	ldrh	r3, [r4, #10]
 8006e34:	2b07      	cmp	r3, #7
 8006e36:	d806      	bhi.n	8006e46 <udp_sendto_if_src+0x3e>
 8006e38:	4b23      	ldr	r3, [pc, #140]	; (8006ec8 <udp_sendto_if_src+0xc0>)
 8006e3a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006e3e:	4923      	ldr	r1, [pc, #140]	; (8006ecc <udp_sendto_if_src+0xc4>)
 8006e40:	4823      	ldr	r0, [pc, #140]	; (8006ed0 <udp_sendto_if_src+0xc8>)
 8006e42:	f000 fed1 	bl	8007be8 <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
 8006e46:	6865      	ldr	r5, [r4, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 8006e48:	8a78      	ldrh	r0, [r7, #18]
 8006e4a:	f7fb f8da 	bl	8002002 <lwip_htons>
 8006e4e:	8028      	strh	r0, [r5, #0]
  udphdr->dest = lwip_htons(dst_port);
 8006e50:	4648      	mov	r0, r9
 8006e52:	f7fb f8d6 	bl	8002002 <lwip_htons>
  udphdr->chksum = 0x0000;
 8006e56:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 8006e58:	8068      	strh	r0, [r5, #2]
  udphdr->chksum = 0x0000;
 8006e5a:	71ab      	strb	r3, [r5, #6]
 8006e5c:	71eb      	strb	r3, [r5, #7]
    udphdr->len = lwip_htons(q->tot_len);
 8006e5e:	8920      	ldrh	r0, [r4, #8]
 8006e60:	f7fb f8cf 	bl	8002002 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8006e64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    udphdr->len = lwip_htons(q->tot_len);
 8006e66:	80a8      	strh	r0, [r5, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8006e68:	4620      	mov	r0, r4
 8006e6a:	7abb      	ldrb	r3, [r7, #10]
 8006e6c:	9202      	str	r2, [sp, #8]
 8006e6e:	2211      	movs	r2, #17
 8006e70:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e72:	9201      	str	r2, [sp, #4]
 8006e74:	7a7a      	ldrb	r2, [r7, #9]
 8006e76:	9200      	str	r2, [sp, #0]
 8006e78:	4642      	mov	r2, r8
 8006e7a:	f7fb fe45 	bl	8002b08 <ip4_output_if_src>
  if (q != p) {
 8006e7e:	42b4      	cmp	r4, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8006e80:	4605      	mov	r5, r0
  if (q != p) {
 8006e82:	d009      	beq.n	8006e98 <udp_sendto_if_src+0x90>
    pbuf_free(q);
 8006e84:	4620      	mov	r0, r4
 8006e86:	f7fc fe09 	bl	8003a9c <pbuf_free>
 8006e8a:	e005      	b.n	8006e98 <udp_sendto_if_src+0x90>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8006e8c:	4601      	mov	r1, r0
 8006e8e:	f7ff ff67 	bl	8006d60 <udp_bind>
    if (err != ERR_OK) {
 8006e92:	4605      	mov	r5, r0
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d0c5      	beq.n	8006e24 <udp_sendto_if_src+0x1c>
}
 8006e98:	4628      	mov	r0, r5
 8006e9a:	b005      	add	sp, #20
 8006e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2108      	movs	r1, #8
 8006ea4:	2001      	movs	r0, #1
 8006ea6:	f7fc fe5b 	bl	8003b60 <pbuf_alloc>
    if (q == NULL) {
 8006eaa:	4604      	mov	r4, r0
 8006eac:	b148      	cbz	r0, 8006ec2 <udp_sendto_if_src+0xba>
    if (p->tot_len != 0) {
 8006eae:	8933      	ldrh	r3, [r6, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d0be      	beq.n	8006e32 <udp_sendto_if_src+0x2a>
      pbuf_chain(q, p);
 8006eb4:	4631      	mov	r1, r6
 8006eb6:	f7fc fff9 	bl	8003eac <pbuf_chain>
 8006eba:	e7ba      	b.n	8006e32 <udp_sendto_if_src+0x2a>
    return ERR_VAL;
 8006ebc:	f06f 0505 	mvn.w	r5, #5
 8006ec0:	e7ea      	b.n	8006e98 <udp_sendto_if_src+0x90>
      return ERR_MEM;
 8006ec2:	f04f 35ff 	mov.w	r5, #4294967295
 8006ec6:	e7e7      	b.n	8006e98 <udp_sendto_if_src+0x90>
 8006ec8:	0800a201 	.word	0x0800a201
 8006ecc:	0800a244 	.word	0x0800a244
 8006ed0:	08008f43 	.word	0x08008f43

08006ed4 <udp_sendto_if>:
{
 8006ed4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ed6:	9c06      	ldr	r4, [sp, #24]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8006ed8:	b190      	cbz	r0, 8006f00 <udp_sendto_if+0x2c>
 8006eda:	b18a      	cbz	r2, 8006f00 <udp_sendto_if+0x2c>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8006edc:	6805      	ldr	r5, [r0, #0]
 8006ede:	b11d      	cbz	r5, 8006ee8 <udp_sendto_if+0x14>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8006ee0:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8006ee4:	2ee0      	cmp	r6, #224	; 0xe0
 8006ee6:	d106      	bne.n	8006ef6 <udp_sendto_if+0x22>
    src_ip = netif_ip_addr4(netif);
 8006ee8:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8006eea:	e88d 0030 	stmia.w	sp, {r4, r5}
 8006eee:	f7ff ff8b 	bl	8006e08 <udp_sendto_if_src>
}
 8006ef2:	b002      	add	sp, #8
 8006ef4:	bd70      	pop	{r4, r5, r6, pc}
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8006ef6:	6866      	ldr	r6, [r4, #4]
 8006ef8:	42b5      	cmp	r5, r6
 8006efa:	d104      	bne.n	8006f06 <udp_sendto_if+0x32>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8006efc:	4605      	mov	r5, r0
 8006efe:	e7f4      	b.n	8006eea <udp_sendto_if+0x16>
    return ERR_VAL;
 8006f00:	f06f 0005 	mvn.w	r0, #5
 8006f04:	e7f5      	b.n	8006ef2 <udp_sendto_if+0x1e>
      return ERR_RTE;
 8006f06:	f06f 0003 	mvn.w	r0, #3
 8006f0a:	e7f2      	b.n	8006ef2 <udp_sendto_if+0x1e>

08006f0c <udp_sendto>:
{
 8006f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f0e:	460e      	mov	r6, r1
 8006f10:	4614      	mov	r4, r2
 8006f12:	461f      	mov	r7, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8006f14:	4605      	mov	r5, r0
 8006f16:	b168      	cbz	r0, 8006f34 <udp_sendto+0x28>
 8006f18:	b162      	cbz	r2, 8006f34 <udp_sendto+0x28>
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	f7fb fd06 	bl	800292c <ip4_route>
  if (netif == NULL) {
 8006f20:	b158      	cbz	r0, 8006f3a <udp_sendto+0x2e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8006f22:	9000      	str	r0, [sp, #0]
 8006f24:	463b      	mov	r3, r7
 8006f26:	4622      	mov	r2, r4
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	f7ff ffd2 	bl	8006ed4 <udp_sendto_if>
}
 8006f30:	b003      	add	sp, #12
 8006f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 8006f34:	f06f 0005 	mvn.w	r0, #5
 8006f38:	e7fa      	b.n	8006f30 <udp_sendto+0x24>
    return ERR_RTE;
 8006f3a:	f06f 0003 	mvn.w	r0, #3
 8006f3e:	e7f7      	b.n	8006f30 <udp_sendto+0x24>

08006f40 <udp_send>:
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 8006f40:	4602      	mov	r2, r0
 8006f42:	b118      	cbz	r0, 8006f4c <udp_send+0xc>
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8006f44:	8a83      	ldrh	r3, [r0, #20]
 8006f46:	3204      	adds	r2, #4
 8006f48:	f7ff bfe0 	b.w	8006f0c <udp_sendto>
}
 8006f4c:	f06f 0005 	mvn.w	r0, #5
 8006f50:	4770      	bx	lr
	...

08006f54 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8006f54:	b570      	push	{r4, r5, r6, lr}
 8006f56:	460d      	mov	r5, r1
 8006f58:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	b1d0      	cbz	r0, 8006f94 <udp_connect+0x40>
 8006f5e:	b1c9      	cbz	r1, 8006f94 <udp_connect+0x40>
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 8006f60:	8a42      	ldrh	r2, [r0, #18]
 8006f62:	b16a      	cbz	r2, 8006f80 <udp_connect+0x2c>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8006f64:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;
 8006f66:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8006f68:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8006f6a:	7c23      	ldrb	r3, [r4, #16]
 8006f6c:	f043 0304 	orr.w	r3, r3, #4
 8006f70:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8006f72:	4b0b      	ldr	r3, [pc, #44]	; (8006fa0 <udp_connect+0x4c>)
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	4610      	mov	r0, r2
 8006f78:	b940      	cbnz	r0, 8006f8c <udp_connect+0x38>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8006f7a:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 8006f7c:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 8006f7e:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8006f80:	4601      	mov	r1, r0
 8006f82:	f7ff feed 	bl	8006d60 <udp_bind>
    if (err != ERR_OK) {
 8006f86:	2800      	cmp	r0, #0
 8006f88:	d0ec      	beq.n	8006f64 <udp_connect+0x10>
 8006f8a:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb == ipcb) {
 8006f8c:	42a0      	cmp	r0, r4
 8006f8e:	d004      	beq.n	8006f9a <udp_connect+0x46>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8006f90:	68c0      	ldr	r0, [r0, #12]
 8006f92:	e7f1      	b.n	8006f78 <udp_connect+0x24>
    return ERR_VAL;
 8006f94:	f06f 0005 	mvn.w	r0, #5
 8006f98:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 8006f9a:	2000      	movs	r0, #0
}
 8006f9c:	bd70      	pop	{r4, r5, r6, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20003760 	.word	0x20003760

08006fa4 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8006fa4:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 8006fa6:	61c2      	str	r2, [r0, #28]
 8006fa8:	4770      	bx	lr

08006faa <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8006faa:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8006fac:	2000      	movs	r0, #0
 8006fae:	f7fc fc0b 	bl	80037c8 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	b128      	cbz	r0, 8006fc2 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	2100      	movs	r1, #0
 8006fba:	f000 fe0d 	bl	8007bd8 <memset>
    pcb->ttl = UDP_TTL;
 8006fbe:	23ff      	movs	r3, #255	; 0xff
 8006fc0:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	bd10      	pop	{r4, pc}
	...

08006fc8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8006fc8:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8006fca:	b138      	cbz	r0, 8006fdc <udp_netif_ip_addr_changed+0x14>
 8006fcc:	6803      	ldr	r3, [r0, #0]
 8006fce:	b12b      	cbz	r3, 8006fdc <udp_netif_ip_addr_changed+0x14>
 8006fd0:	b121      	cbz	r1, 8006fdc <udp_netif_ip_addr_changed+0x14>
 8006fd2:	680b      	ldr	r3, [r1, #0]
 8006fd4:	b113      	cbz	r3, 8006fdc <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8006fd6:	4b06      	ldr	r3, [pc, #24]	; (8006ff0 <udp_netif_ip_addr_changed+0x28>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	b903      	cbnz	r3, 8006fde <udp_netif_ip_addr_changed+0x16>
 8006fdc:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8006fde:	681c      	ldr	r4, [r3, #0]
 8006fe0:	6802      	ldr	r2, [r0, #0]
 8006fe2:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8006fe4:	bf04      	itt	eq
 8006fe6:	680a      	ldreq	r2, [r1, #0]
 8006fe8:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	e7f5      	b.n	8006fda <udp_netif_ip_addr_changed+0x12>
 8006fee:	bf00      	nop
 8006ff0:	20003760 	.word	0x20003760

08006ff4 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8006ff4:	8943      	ldrh	r3, [r0, #10]
 8006ff6:	2b0e      	cmp	r3, #14
{
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 8006ffe:	d914      	bls.n	800702a <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8007000:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8007002:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8007004:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8007006:	07d9      	lsls	r1, r3, #31
 8007008:	d50a      	bpl.n	8007020 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800700a:	2b01      	cmp	r3, #1
 800700c:	d111      	bne.n	8007032 <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800700e:	7843      	ldrb	r3, [r0, #1]
 8007010:	b933      	cbnz	r3, 8007020 <ethernet_input+0x2c>
 8007012:	7883      	ldrb	r3, [r0, #2]
 8007014:	2b5e      	cmp	r3, #94	; 0x5e
 8007016:	d103      	bne.n	8007020 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8007018:	7b63      	ldrb	r3, [r4, #13]
 800701a:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800701e:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8007020:	2e08      	cmp	r6, #8
 8007022:	d010      	beq.n	8007046 <ethernet_input+0x52>
 8007024:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8007028:	d01e      	beq.n	8007068 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800702a:	4620      	mov	r0, r4
 800702c:	f7fc fd36 	bl	8003a9c <pbuf_free>
  return ERR_OK;
 8007030:	e018      	b.n	8007064 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8007032:	2206      	movs	r2, #6
 8007034:	4914      	ldr	r1, [pc, #80]	; (8007088 <ethernet_input+0x94>)
 8007036:	f000 fdb5 	bl	8007ba4 <memcmp>
 800703a:	2800      	cmp	r0, #0
 800703c:	d1f0      	bne.n	8007020 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 800703e:	7b63      	ldrb	r3, [r4, #13]
 8007040:	f043 0308 	orr.w	r3, r3, #8
 8007044:	e7eb      	b.n	800701e <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8007046:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800704a:	071a      	lsls	r2, r3, #28
 800704c:	d5ed      	bpl.n	800702a <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800704e:	f06f 010d 	mvn.w	r1, #13
 8007052:	4620      	mov	r0, r4
 8007054:	f7fc fd1c 	bl	8003a90 <pbuf_header>
 8007058:	2800      	cmp	r0, #0
 800705a:	d1e6      	bne.n	800702a <ethernet_input+0x36>
        ip4_input(p, netif);
 800705c:	4629      	mov	r1, r5
 800705e:	4620      	mov	r0, r4
 8007060:	f7fb fc90 	bl	8002984 <ip4_input>
}
 8007064:	2000      	movs	r0, #0
 8007066:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8007068:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800706c:	071b      	lsls	r3, r3, #28
 800706e:	d5dc      	bpl.n	800702a <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8007070:	f06f 010d 	mvn.w	r1, #13
 8007074:	4620      	mov	r0, r4
 8007076:	f7fc fd0b 	bl	8003a90 <pbuf_header>
 800707a:	2800      	cmp	r0, #0
 800707c:	d1d5      	bne.n	800702a <ethernet_input+0x36>
        etharp_input(p, netif);
 800707e:	4629      	mov	r1, r5
 8007080:	4620      	mov	r0, r4
 8007082:	f7fb f8f1 	bl	8002268 <etharp_input>
      break;
 8007086:	e7ed      	b.n	8007064 <ethernet_input+0x70>
 8007088:	0800a272 	.word	0x0800a272

0800708c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800708c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007090:	460d      	mov	r5, r1
 8007092:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8007094:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 8007098:	4616      	mov	r6, r2
 800709a:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800709c:	f7fa ffb1 	bl	8002002 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80070a0:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 80070a2:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80070a4:	4628      	mov	r0, r5
 80070a6:	f7fc fcf3 	bl	8003a90 <pbuf_header>
 80070aa:	b9e0      	cbnz	r0, 80070e6 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80070ac:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 80070ae:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	600b      	str	r3, [r1, #0]
 80070b6:	88bb      	ldrh	r3, [r7, #4]
 80070b8:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 80070ba:	6833      	ldr	r3, [r6, #0]
 80070bc:	f8c1 3006 	str.w	r3, [r1, #6]
 80070c0:	88b3      	ldrh	r3, [r6, #4]
 80070c2:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80070c4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80070c8:	2b06      	cmp	r3, #6
 80070ca:	d006      	beq.n	80070da <ethernet_output+0x4e>
 80070cc:	4b08      	ldr	r3, [pc, #32]	; (80070f0 <ethernet_output+0x64>)
 80070ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80070d2:	4908      	ldr	r1, [pc, #32]	; (80070f4 <ethernet_output+0x68>)
 80070d4:	4808      	ldr	r0, [pc, #32]	; (80070f8 <ethernet_output+0x6c>)
 80070d6:	f000 fd87 	bl	8007be8 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80070da:	69a3      	ldr	r3, [r4, #24]
 80070dc:	4629      	mov	r1, r5
 80070de:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 80070e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 80070e4:	4718      	bx	r3
}
 80070e6:	f06f 0001 	mvn.w	r0, #1
 80070ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070ee:	bf00      	nop
 80070f0:	0800a278 	.word	0x0800a278
 80070f4:	0800a2ad 	.word	0x0800a2ad
 80070f8:	08008f43 	.word	0x08008f43

080070fc <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80070fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007100:	4a25      	ldr	r2, [pc, #148]	; (8007198 <low_level_output+0x9c>)
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 8007102:	f04f 0800 	mov.w	r8, #0
{
 8007106:	460c      	mov	r4, r1
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007108:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800710c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
 800710e:	4647      	mov	r7, r8
 8007110:	9200      	str	r2, [sp, #0]
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007112:	68ab      	ldr	r3, [r5, #8]
  for(q = p; q != NULL; q = q->next)
 8007114:	b92c      	cbnz	r4, 8007122 <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007116:	4639      	mov	r1, r7
 8007118:	481f      	ldr	r0, [pc, #124]	; (8007198 <low_level_output+0x9c>)
 800711a:	f7f9 fc41 	bl	80009a0 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800711e:	4620      	mov	r0, r4
 8007120:	e004      	b.n	800712c <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007122:	682a      	ldr	r2, [r5, #0]
 8007124:	2a00      	cmp	r2, #0
 8007126:	da11      	bge.n	800714c <low_level_output+0x50>
        errval = ERR_USE;
 8007128:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800712c:	9b00      	ldr	r3, [sp, #0]
 800712e:	f241 0214 	movw	r2, #4116	; 0x1014
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	5899      	ldr	r1, [r3, r2]
 8007136:	0689      	lsls	r1, r1, #26
 8007138:	d505      	bpl.n	8007146 <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800713a:	2120      	movs	r1, #32
 800713c:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800713e:	2100      	movs	r1, #0
 8007140:	f241 0204 	movw	r2, #4100	; 0x1004
 8007144:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 8007146:	b003      	add	sp, #12
 8007148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 800714c:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007150:	4646      	mov	r6, r8
      payloadoffset = 0;
 8007152:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007156:	eb06 0809 	add.w	r8, r6, r9
 800715a:	1998      	adds	r0, r3, r6
 800715c:	6861      	ldr	r1, [r4, #4]
 800715e:	45d8      	cmp	r8, fp
 8007160:	d808      	bhi.n	8007174 <low_level_output+0x78>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007162:	464a      	mov	r2, r9
 8007164:	4451      	add	r1, sl
 8007166:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 8007168:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800716a:	f000 fd2a 	bl	8007bc2 <memcpy>
  for(q = p; q != NULL; q = q->next)
 800716e:	6824      	ldr	r4, [r4, #0]
 8007170:	9b01      	ldr	r3, [sp, #4]
 8007172:	e7cf      	b.n	8007114 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007174:	ebab 0606 	sub.w	r6, fp, r6
 8007178:	4451      	add	r1, sl
 800717a:	4632      	mov	r2, r6
 800717c:	f000 fd21 	bl	8007bc2 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007180:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007182:	682b      	ldr	r3, [r5, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	dbcf      	blt.n	8007128 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007188:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800718a:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800718c:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800718e:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 8007192:	2600      	movs	r6, #0
 8007194:	e7df      	b.n	8007156 <low_level_output+0x5a>
 8007196:	bf00      	nop
 8007198:	20005034 	.word	0x20005034

0800719c <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 800719c:	6802      	ldr	r2, [r0, #0]
 800719e:	4b29      	ldr	r3, [pc, #164]	; (8007244 <HAL_ETH_MspInit+0xa8>)
 80071a0:	429a      	cmp	r2, r3
{
 80071a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071a4:	b089      	sub	sp, #36	; 0x24
  if(ethHandle->Instance==ETH)
 80071a6:	d14a      	bne.n	800723e <HAL_ETH_MspInit+0xa2>
    __HAL_RCC_ETH_CLK_ENABLE();
 80071a8:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ac:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ae:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071b0:	2503      	movs	r5, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 80071b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80071b4:	240b      	movs	r4, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071b6:	a903      	add	r1, sp, #12
 80071b8:	4823      	ldr	r0, [pc, #140]	; (8007248 <HAL_ETH_MspInit+0xac>)
    __HAL_RCC_ETH_CLK_ENABLE();
 80071ba:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80071be:	631a      	str	r2, [r3, #48]	; 0x30
 80071c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071c2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80071c6:	9200      	str	r2, [sp, #0]
 80071c8:	9a00      	ldr	r2, [sp, #0]
 80071ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071cc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80071d0:	631a      	str	r2, [r3, #48]	; 0x30
 80071d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071d4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80071d8:	9201      	str	r2, [sp, #4]
 80071da:	9a01      	ldr	r2, [sp, #4]
 80071dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071de:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80071e2:	631a      	str	r2, [r3, #48]	; 0x30
 80071e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071e6:	9704      	str	r7, [sp, #16]
    __HAL_RCC_ETH_CLK_ENABLE();
 80071e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ec:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071ee:	9506      	str	r5, [sp, #24]
    __HAL_RCC_ETH_CLK_ENABLE();
 80071f0:	9302      	str	r3, [sp, #8]
 80071f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80071f4:	2332      	movs	r3, #50	; 0x32
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80071f6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80071f8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071fa:	f7f9 fe2b 	bl	8000e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80071fe:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007200:	a903      	add	r1, sp, #12
 8007202:	4812      	ldr	r0, [pc, #72]	; (800724c <HAL_ETH_MspInit+0xb0>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007204:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007206:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007208:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800720a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800720c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800720e:	f7f9 fe21 	bl	8000e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007212:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007216:	a903      	add	r1, sp, #12
 8007218:	480d      	ldr	r0, [pc, #52]	; (8007250 <HAL_ETH_MspInit+0xb4>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800721a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800721c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800721e:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007220:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007222:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007224:	f7f9 fe16 	bl	8000e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007228:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800722c:	a903      	add	r1, sp, #12
 800722e:	4809      	ldr	r0, [pc, #36]	; (8007254 <HAL_ETH_MspInit+0xb8>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007230:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007232:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007234:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007236:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007238:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800723a:	f7f9 fe0b 	bl	8000e54 <HAL_GPIO_Init>
}
 800723e:	b009      	add	sp, #36	; 0x24
 8007240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007242:	bf00      	nop
 8007244:	40028000 	.word	0x40028000
 8007248:	40020800 	.word	0x40020800
 800724c:	40020000 	.word	0x40020000
 8007250:	40020400 	.word	0x40020400
 8007254:	40021800 	.word	0x40021800

08007258 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800725c:	4c34      	ldr	r4, [pc, #208]	; (8007330 <ethernetif_input+0xd8>)
{
 800725e:	9001      	str	r0, [sp, #4]
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8007260:	4620      	mov	r0, r4
 8007262:	f7f9 fc0f 	bl	8000a84 <HAL_ETH_GetReceivedFrame>
 8007266:	4605      	mov	r5, r0
 8007268:	2800      	cmp	r0, #0
 800726a:	d15e      	bne.n	800732a <ethernetif_input+0xd2>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800726c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  len = heth.RxFrameInfos.length;
 800726e:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007270:	9300      	str	r3, [sp, #0]
  if (len > 0)
 8007272:	bb09      	cbnz	r1, 80072b8 <ethernetif_input+0x60>
  struct pbuf *p = NULL;
 8007274:	2700      	movs	r7, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007276:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007278:	2200      	movs	r2, #0
 800727a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800727c:	4282      	cmp	r2, r0
 800727e:	d14d      	bne.n	800731c <ethernetif_input+0xc4>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	f241 0114 	movw	r1, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;  
 8007286:	2200      	movs	r2, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8007288:	5858      	ldr	r0, [r3, r1]
    heth.RxFrameInfos.SegCount =0;  
 800728a:	63a2      	str	r2, [r4, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800728c:	0600      	lsls	r0, r0, #24
 800728e:	d504      	bpl.n	800729a <ethernetif_input+0x42>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007290:	2080      	movs	r0, #128	; 0x80
 8007292:	5058      	str	r0, [r3, r1]
    heth.Instance->DMARPDR = 0;
 8007294:	f241 0108 	movw	r1, #4104	; 0x1008
 8007298:	505a      	str	r2, [r3, r1]

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800729a:	2f00      	cmp	r7, #0
 800729c:	d045      	beq.n	800732a <ethernetif_input+0xd2>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800729e:	9b01      	ldr	r3, [sp, #4]
 80072a0:	4638      	mov	r0, r7
 80072a2:	9901      	ldr	r1, [sp, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	4798      	blx	r3
    
  if (err != ERR_OK)
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d03e      	beq.n	800732a <ethernetif_input+0xd2>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80072ac:	4638      	mov	r0, r7
    p = NULL;    
  }
}
 80072ae:	b003      	add	sp, #12
 80072b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 80072b4:	f7fc bbf2 	b.w	8003a9c <pbuf_free>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80072b8:	2203      	movs	r2, #3
 80072ba:	2004      	movs	r0, #4
 80072bc:	f7fc fc50 	bl	8003b60 <pbuf_alloc>
  if (p != NULL)
 80072c0:	4607      	mov	r7, r0
 80072c2:	2800      	cmp	r0, #0
 80072c4:	d0d6      	beq.n	8007274 <ethernetif_input+0x1c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80072c6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80072ca:	4680      	mov	r8, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80072cc:	f240 5bf4 	movw	fp, #1524	; 0x5f4
      byteslefttocopy = q->len;
 80072d0:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 80072d4:	462e      	mov	r6, r5
      payloadoffset = 0;
 80072d6:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80072da:	18b5      	adds	r5, r6, r2
 80072dc:	9b00      	ldr	r3, [sp, #0]
 80072de:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80072e2:	455d      	cmp	r5, fp
 80072e4:	eb03 0106 	add.w	r1, r3, r6
 80072e8:	d808      	bhi.n	80072fc <ethernetif_input+0xa4>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80072ea:	4448      	add	r0, r9
 80072ec:	f000 fc69 	bl	8007bc2 <memcpy>
    for(q = p; q != NULL; q = q->next)
 80072f0:	f8d8 8000 	ldr.w	r8, [r8]
 80072f4:	f1b8 0f00 	cmp.w	r8, #0
 80072f8:	d1ea      	bne.n	80072d0 <ethernetif_input+0x78>
 80072fa:	e7bc      	b.n	8007276 <ethernetif_input+0x1e>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80072fc:	ebab 0606 	sub.w	r6, fp, r6
 8007300:	4448      	add	r0, r9
 8007302:	4632      	mov	r2, r6
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007304:	44b1      	add	r9, r6
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007306:	f000 fc5c 	bl	8007bc2 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800730a:	f8da a00c 	ldr.w	sl, [sl, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800730e:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        bufferoffset = 0;
 8007312:	2600      	movs	r6, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007314:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	e7de      	b.n	80072da <ethernetif_input+0x82>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800731c:	6819      	ldr	r1, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800731e:	3201      	adds	r2, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007320:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007324:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	e7a8      	b.n	800727c <ethernetif_input+0x24>
}
 800732a:	b003      	add	sp, #12
 800732c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007330:	20005034 	.word	0x20005034

08007334 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007334:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007336:	4604      	mov	r4, r0
{
 8007338:	b085      	sub	sp, #20
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800733a:	b930      	cbnz	r0, 800734a <ethernetif_init+0x16>
 800733c:	4b3d      	ldr	r3, [pc, #244]	; (8007434 <ethernetif_init+0x100>)
 800733e:	f240 222a 	movw	r2, #554	; 0x22a
 8007342:	493d      	ldr	r1, [pc, #244]	; (8007438 <ethernetif_init+0x104>)
 8007344:	483d      	ldr	r0, [pc, #244]	; (800743c <ethernetif_init+0x108>)
 8007346:	f000 fc4f 	bl	8007be8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800734a:	2373      	movs	r3, #115	; 0x73
  heth.Instance = ETH;
 800734c:	4d3c      	ldr	r5, [pc, #240]	; (8007440 <ethernetif_init+0x10c>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800734e:	2201      	movs	r2, #1
 8007350:	493c      	ldr	r1, [pc, #240]	; (8007444 <ethernetif_init+0x110>)
  netif->name[0] = IFNAME0;
 8007352:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 8007356:	2374      	movs	r3, #116	; 0x74
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007358:	4628      	mov	r0, r5
  netif->name[1] = IFNAME1;
 800735a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800735e:	4b3a      	ldr	r3, [pc, #232]	; (8007448 <ethernetif_init+0x114>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007360:	e885 0006 	stmia.w	r5, {r1, r2}
  netif->output = etharp_output;
 8007364:	6163      	str	r3, [r4, #20]
  MACAddr[1] = 0x80;
 8007366:	2280      	movs	r2, #128	; 0x80
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007368:	4b38      	ldr	r3, [pc, #224]	; (800744c <ethernetif_init+0x118>)
  MACAddr[1] = 0x80;
 800736a:	f88d 2009 	strb.w	r2, [sp, #9]
  MACAddr[2] = 0xE1;
 800736e:	22e1      	movs	r2, #225	; 0xe1
  netif->linkoutput = low_level_output;
 8007370:	61a3      	str	r3, [r4, #24]
  uint32_t regvalue = 0;
 8007372:	2300      	movs	r3, #0
  MACAddr[2] = 0xE1;
 8007374:	f88d 200a 	strb.w	r2, [sp, #10]
  heth.Init.MACAddr = &MACAddr[0];
 8007378:	aa02      	add	r2, sp, #8
  uint32_t regvalue = 0;
 800737a:	9301      	str	r3, [sp, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800737c:	822b      	strh	r3, [r5, #16]
  MACAddr[0] = 0x00;
 800737e:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[3] = 0x00;
 8007382:	f88d 300b 	strb.w	r3, [sp, #11]
  MACAddr[4] = 0x00;
 8007386:	f88d 300c 	strb.w	r3, [sp, #12]
  MACAddr[5] = 0x00;
 800738a:	f88d 300d 	strb.w	r3, [sp, #13]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800738e:	61ab      	str	r3, [r5, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007390:	61eb      	str	r3, [r5, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007392:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.MACAddr = &MACAddr[0];
 8007396:	616a      	str	r2, [r5, #20]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007398:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800739a:	f7f9 fc23 	bl	8000be4 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800739e:	b928      	cbnz	r0, 80073ac <ethernetif_init+0x78>
    netif->flags |= NETIF_FLAG_LINK_UP;
 80073a0:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80073a4:	f043 0304 	orr.w	r3, r3, #4
 80073a8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80073ac:	2304      	movs	r3, #4
 80073ae:	4a28      	ldr	r2, [pc, #160]	; (8007450 <ethernetif_init+0x11c>)
 80073b0:	4928      	ldr	r1, [pc, #160]	; (8007454 <ethernetif_init+0x120>)
 80073b2:	4823      	ldr	r0, [pc, #140]	; (8007440 <ethernetif_init+0x10c>)
 80073b4:	f7f9 fa7a 	bl	80008ac <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80073b8:	4927      	ldr	r1, [pc, #156]	; (8007458 <ethernetif_init+0x124>)
 80073ba:	2304      	movs	r3, #4
 80073bc:	4a27      	ldr	r2, [pc, #156]	; (800745c <ethernetif_init+0x128>)
 80073be:	4820      	ldr	r0, [pc, #128]	; (8007440 <ethernetif_init+0x10c>)
 80073c0:	f7f9 fab1 	bl	8000926 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80073c4:	2306      	movs	r3, #6
  HAL_ETH_Start(&heth);
 80073c6:	481e      	ldr	r0, [pc, #120]	; (8007440 <ethernetif_init+0x10c>)
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80073c8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80073cc:	696b      	ldr	r3, [r5, #20]
 80073ce:	781a      	ldrb	r2, [r3, #0]
 80073d0:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80073d4:	785a      	ldrb	r2, [r3, #1]
 80073d6:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80073da:	789a      	ldrb	r2, [r3, #2]
 80073dc:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80073e0:	78da      	ldrb	r2, [r3, #3]
 80073e2:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80073e6:	791a      	ldrb	r2, [r3, #4]
 80073e8:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80073ec:	795b      	ldrb	r3, [r3, #5]
 80073ee:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 80073f2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80073f6:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80073f8:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80073fc:	f043 030a 	orr.w	r3, r3, #10
 8007400:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_Start(&heth);
 8007404:	f7f9 fce8 	bl	8000dd8 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8007408:	aa01      	add	r2, sp, #4
 800740a:	210b      	movs	r1, #11
 800740c:	480c      	ldr	r0, [pc, #48]	; (8007440 <ethernetif_init+0x10c>)
 800740e:	f7f9 fb78 	bl	8000b02 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8007412:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8007414:	210b      	movs	r1, #11
 8007416:	480a      	ldr	r0, [pc, #40]	; (8007440 <ethernetif_init+0x10c>)
  regvalue |= (PHY_ISFR_INT4);
 8007418:	f042 020b 	orr.w	r2, r2, #11
 800741c:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800741e:	f7f9 fbaa 	bl	8000b76 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8007422:	aa01      	add	r2, sp, #4
 8007424:	210b      	movs	r1, #11
 8007426:	4806      	ldr	r0, [pc, #24]	; (8007440 <ethernetif_init+0x10c>)
 8007428:	f7f9 fb6b 	bl	8000b02 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800742c:	2000      	movs	r0, #0
 800742e:	b005      	add	sp, #20
 8007430:	bd30      	pop	{r4, r5, pc}
 8007432:	bf00      	nop
 8007434:	0800a2e4 	.word	0x0800a2e4
 8007438:	08008f35 	.word	0x08008f35
 800743c:	08008f43 	.word	0x08008f43
 8007440:	20005034 	.word	0x20005034
 8007444:	40028000 	.word	0x40028000
 8007448:	0800262d 	.word	0x0800262d
 800744c:	080070fd 	.word	0x080070fd
 8007450:	2000507c 	.word	0x2000507c
 8007454:	20003764 	.word	0x20003764
 8007458:	20004fb4 	.word	0x20004fb4
 800745c:	200037e4 	.word	0x200037e4

08007460 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 8007460:	f7f9 b90a 	b.w	8000678 <HAL_GetTick>

08007464 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007464:	4b43      	ldr	r3, [pc, #268]	; (8007574 <MX_GPIO_Init+0x110>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8007466:	f44f 4181 	mov.w	r1, #16512	; 0x4080
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800746a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800746c:	f042 0204 	orr.w	r2, r2, #4
{
 8007470:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007472:	631a      	str	r2, [r3, #48]	; 0x30
{
 8007474:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007478:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800747a:	4f3f      	ldr	r7, [pc, #252]	; (8007578 <MX_GPIO_Init+0x114>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800747c:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800747e:	f002 0204 	and.w	r2, r2, #4
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8007482:	4d3e      	ldr	r5, [pc, #248]	; (800757c <MX_GPIO_Init+0x118>)
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8007484:	4638      	mov	r0, r7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007486:	9201      	str	r2, [sp, #4]
 8007488:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800748a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800748c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007490:	631a      	str	r2, [r3, #48]	; 0x30
 8007492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007494:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8007498:	9202      	str	r2, [sp, #8]
 800749a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800749c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800749e:	f042 0201 	orr.w	r2, r2, #1
 80074a2:	631a      	str	r2, [r3, #48]	; 0x30
 80074a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074a6:	f002 0201 	and.w	r2, r2, #1
 80074aa:	9203      	str	r2, [sp, #12]
 80074ac:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074b0:	f042 0202 	orr.w	r2, r2, #2
 80074b4:	631a      	str	r2, [r3, #48]	; 0x30
 80074b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074b8:	f002 0202 	and.w	r2, r2, #2
 80074bc:	9204      	str	r2, [sp, #16]
 80074be:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80074c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074c2:	f042 0208 	orr.w	r2, r2, #8
 80074c6:	631a      	str	r2, [r3, #48]	; 0x30
 80074c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074ca:	f002 0208 	and.w	r2, r2, #8
 80074ce:	9205      	str	r2, [sp, #20]
 80074d0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80074d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074d8:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80074da:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80074dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e2:	9306      	str	r3, [sp, #24]
 80074e4:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80074e6:	f7f9 fd9f 	bl	8001028 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80074ea:	2200      	movs	r2, #0
 80074ec:	4628      	mov	r0, r5
 80074ee:	2140      	movs	r1, #64	; 0x40
 80074f0:	f7f9 fd9a 	bl	8001028 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80074f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80074f8:	a907      	add	r1, sp, #28
 80074fa:	4821      	ldr	r0, [pc, #132]	; (8007580 <MX_GPIO_Init+0x11c>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80074fc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80074fe:	4b21      	ldr	r3, [pc, #132]	; (8007584 <MX_GPIO_Init+0x120>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007500:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007502:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8007504:	f7f9 fca6 	bl	8000e54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8007508:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800750c:	a907      	add	r1, sp, #28
 800750e:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007510:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8007512:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007514:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007516:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007518:	f7f9 fc9c 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800751c:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800751e:	a907      	add	r1, sp, #28
 8007520:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007522:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8007524:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007526:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007528:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800752a:	f7f9 fc93 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800752e:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8007530:	a907      	add	r1, sp, #28
 8007532:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007534:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8007536:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007538:	f5a5 55c0 	sub.w	r5, r5, #6144	; 0x1800
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800753c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800753e:	f7f9 fc89 	bl	8000e54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007542:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007546:	a907      	add	r1, sp, #28
 8007548:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800754a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800754c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800754e:	2302      	movs	r3, #2
 8007550:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007552:	2303      	movs	r3, #3
 8007554:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007556:	230a      	movs	r3, #10
 8007558:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800755a:	f7f9 fc7b 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800755e:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007562:	a907      	add	r1, sp, #28
 8007564:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007566:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007568:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800756a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800756c:	f7f9 fc72 	bl	8000e54 <HAL_GPIO_Init>

}
 8007570:	b00d      	add	sp, #52	; 0x34
 8007572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007574:	40023800 	.word	0x40023800
 8007578:	40020400 	.word	0x40020400
 800757c:	40021800 	.word	0x40021800
 8007580:	40020800 	.word	0x40020800
 8007584:	10110000 	.word	0x10110000

08007588 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007588:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
  IP_ADDRESS[1] = 168;
  IP_ADDRESS[2] = 0;
  IP_ADDRESS[3] = 10;
 800758a:	230a      	movs	r3, #10
  IP_ADDRESS[0] = 192;
 800758c:	4f30      	ldr	r7, [pc, #192]	; (8007650 <MX_LWIP_Init+0xc8>)
  NETMASK_ADDRESS[0] = 255;
 800758e:	4e31      	ldr	r6, [pc, #196]	; (8007654 <MX_LWIP_Init+0xcc>)
  IP_ADDRESS[1] = 168;
 8007590:	22a8      	movs	r2, #168	; 0xa8
  IP_ADDRESS[3] = 10;
 8007592:	70fb      	strb	r3, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 8007594:	23ff      	movs	r3, #255	; 0xff
  NETMASK_ADDRESS[1] = 255;
  NETMASK_ADDRESS[2] = 255;
  NETMASK_ADDRESS[3] = 0;
  GATEWAY_ADDRESS[0] = 192;
 8007596:	4d30      	ldr	r5, [pc, #192]	; (8007658 <MX_LWIP_Init+0xd0>)
  IP_ADDRESS[0] = 192;
 8007598:	21c0      	movs	r1, #192	; 0xc0
  NETMASK_ADDRESS[0] = 255;
 800759a:	7033      	strb	r3, [r6, #0]
  IP_ADDRESS[2] = 0;
 800759c:	2400      	movs	r4, #0
  NETMASK_ADDRESS[1] = 255;
 800759e:	7073      	strb	r3, [r6, #1]
{
 80075a0:	b085      	sub	sp, #20
  NETMASK_ADDRESS[2] = 255;
 80075a2:	70b3      	strb	r3, [r6, #2]
  GATEWAY_ADDRESS[1] = 168;
  GATEWAY_ADDRESS[2] = 0;
  GATEWAY_ADDRESS[3] = 1;
 80075a4:	2301      	movs	r3, #1
  GATEWAY_ADDRESS[1] = 168;
 80075a6:	706a      	strb	r2, [r5, #1]
  GATEWAY_ADDRESS[3] = 1;
 80075a8:	70eb      	strb	r3, [r5, #3]
  

  PC_ADDRESS[0]= 192;
 80075aa:	4b2c      	ldr	r3, [pc, #176]	; (800765c <MX_LWIP_Init+0xd4>)
  IP_ADDRESS[1] = 168;
 80075ac:	707a      	strb	r2, [r7, #1]
  PC_ADDRESS[1]= 168;
 80075ae:	705a      	strb	r2, [r3, #1]
  PC_ADDRESS[2]= 0;
  PC_ADDRESS[3]= 100;
 80075b0:	2264      	movs	r2, #100	; 0x64
  GATEWAY_ADDRESS[0] = 192;
 80075b2:	7029      	strb	r1, [r5, #0]
  PC_ADDRESS[0]= 192;
 80075b4:	7019      	strb	r1, [r3, #0]
  PC_ADDRESS[3]= 100;
 80075b6:	70da      	strb	r2, [r3, #3]
  IP_ADDRESS[0] = 192;
 80075b8:	7039      	strb	r1, [r7, #0]
  GATEWAY_ADDRESS[2] = 0;
 80075ba:	70ac      	strb	r4, [r5, #2]
  PC_ADDRESS[2]= 0;
 80075bc:	709c      	strb	r4, [r3, #2]
  IP_ADDRESS[2] = 0;
 80075be:	70bc      	strb	r4, [r7, #2]
  NETMASK_ADDRESS[3] = 0;
 80075c0:	70f4      	strb	r4, [r6, #3]


  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80075c2:	f7fa fd23 	bl	800200c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&pc_ipaddr,  192, 168,   1, 100);
 80075c6:	4a26      	ldr	r2, [pc, #152]	; (8007660 <MX_LWIP_Init+0xd8>)
 80075c8:	4b26      	ldr	r3, [pc, #152]	; (8007664 <MX_LWIP_Init+0xdc>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80075ca:	4927      	ldr	r1, [pc, #156]	; (8007668 <MX_LWIP_Init+0xe0>)
  IP4_ADDR(&pc_ipaddr,  192, 168,   1, 100);
 80075cc:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80075ce:	787b      	ldrb	r3, [r7, #1]
 80075d0:	783a      	ldrb	r2, [r7, #0]
 80075d2:	041b      	lsls	r3, r3, #16
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80075d4:	7868      	ldrb	r0, [r5, #1]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80075d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80075da:	78fa      	ldrb	r2, [r7, #3]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80075dc:	0400      	lsls	r0, r0, #16
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80075de:	4313      	orrs	r3, r2
 80075e0:	78ba      	ldrb	r2, [r7, #2]
 80075e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80075e6:	7832      	ldrb	r2, [r6, #0]
 80075e8:	ba1b      	rev	r3, r3
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80075ea:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80075ec:	7873      	ldrb	r3, [r6, #1]
 80075ee:	041b      	lsls	r3, r3, #16
 80075f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80075f4:	78f2      	ldrb	r2, [r6, #3]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	78b2      	ldrb	r2, [r6, #2]
 80075fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80075fe:	4a1b      	ldr	r2, [pc, #108]	; (800766c <MX_LWIP_Init+0xe4>)
 8007600:	ba1b      	rev	r3, r3
 8007602:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007604:	782b      	ldrb	r3, [r5, #0]
 8007606:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800760a:	78eb      	ldrb	r3, [r5, #3]
 800760c:	4318      	orrs	r0, r3
 800760e:	78ab      	ldrb	r3, [r5, #2]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007610:	4d17      	ldr	r5, [pc, #92]	; (8007670 <MX_LWIP_Init+0xe8>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007612:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8007616:	4b17      	ldr	r3, [pc, #92]	; (8007674 <MX_LWIP_Init+0xec>)
 8007618:	ba00      	rev	r0, r0
 800761a:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800761c:	4816      	ldr	r0, [pc, #88]	; (8007678 <MX_LWIP_Init+0xf0>)
 800761e:	9400      	str	r4, [sp, #0]
 8007620:	9002      	str	r0, [sp, #8]
 8007622:	4816      	ldr	r0, [pc, #88]	; (800767c <MX_LWIP_Init+0xf4>)
 8007624:	9001      	str	r0, [sp, #4]
 8007626:	4628      	mov	r0, r5
 8007628:	f7fc f94c 	bl	80038c4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800762c:	4628      	mov	r0, r5
 800762e:	f7fc f987 	bl	8003940 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007632:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007636:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 8007638:	075b      	lsls	r3, r3, #29
 800763a:	d504      	bpl.n	8007646 <MX_LWIP_Init+0xbe>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800763c:	b005      	add	sp, #20
 800763e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_up(&gnetif);
 8007642:	f7fc b983 	b.w	800394c <netif_set_up>
}
 8007646:	b005      	add	sp, #20
 8007648:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_down(&gnetif);
 800764c:	f7fc b98d 	b.w	800396a <netif_set_down>
 8007650:	2000688c 	.word	0x2000688c
 8007654:	20006888 	.word	0x20006888
 8007658:	20006850 	.word	0x20006850
 800765c:	2000684c 	.word	0x2000684c
 8007660:	6401a8c0 	.word	0x6401a8c0
 8007664:	20006894 	.word	0x20006894
 8007668:	20006884 	.word	0x20006884
 800766c:	20006890 	.word	0x20006890
 8007670:	20006854 	.word	0x20006854
 8007674:	20006898 	.word	0x20006898
 8007678:	08006ff5 	.word	0x08006ff5
 800767c:	08007335 	.word	0x08007335

08007680 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007680:	4b2d      	ldr	r3, [pc, #180]	; (8007738 <SystemClock_Config+0xb8>)
 8007682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007684:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8007688:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800768a:	641a      	str	r2, [r3, #64]	; 0x40
{
 800768c:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 800768e:	6c1b      	ldr	r3, [r3, #64]	; 0x40

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007690:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007692:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007694:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8007696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800769e:	4b27      	ldr	r3, [pc, #156]	; (800773c <SystemClock_Config+0xbc>)
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80076a6:	601a      	str	r2, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80076aa:	950d      	str	r5, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80076ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLM = 4;
 80076b0:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80076b2:	9511      	str	r5, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80076b4:	9301      	str	r3, [sp, #4]
 80076b6:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80076b8:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80076ba:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80076bc:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80076be:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80076c2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80076c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80076c8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 80076ca:	23d8      	movs	r3, #216	; 0xd8
 80076cc:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80076ce:	f7f9 fce9 	bl	80010a4 <HAL_RCC_OscConfig>
 80076d2:	b100      	cbz	r0, 80076d6 <SystemClock_Config+0x56>
 80076d4:	e7fe      	b.n	80076d4 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80076d6:	f7f9 fcad 	bl	8001034 <HAL_PWREx_EnableOverDrive>
 80076da:	b100      	cbz	r0, 80076de <SystemClock_Config+0x5e>
 80076dc:	e7fe      	b.n	80076dc <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80076de:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80076e0:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80076e2:	2107      	movs	r1, #7
 80076e4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80076e6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80076e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80076ec:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80076ee:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80076f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076f4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80076f6:	f7f9 fe97 	bl	8001428 <HAL_RCC_ClockConfig>
 80076fa:	b100      	cbz	r0, 80076fe <SystemClock_Config+0x7e>
 80076fc:	e7fe      	b.n	80076fc <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80076fe:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8007702:	9027      	str	r0, [sp, #156]	; 0x9c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007704:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007706:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007708:	f7f9 ff52 	bl	80015b0 <HAL_RCCEx_PeriphCLKConfig>
 800770c:	4605      	mov	r5, r0
 800770e:	b100      	cbz	r0, 8007712 <SystemClock_Config+0x92>
 8007710:	e7fe      	b.n	8007710 <SystemClock_Config+0x90>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8007712:	f7f9 ff27 	bl	8001564 <HAL_RCC_GetHCLKFreq>
 8007716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800771a:	fbb0 f0f3 	udiv	r0, r0, r3
 800771e:	f7f9 f80d 	bl	800073c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8007722:	4620      	mov	r0, r4
 8007724:	f7f9 f820 	bl	8000768 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007728:	462a      	mov	r2, r5
 800772a:	4629      	mov	r1, r5
 800772c:	f04f 30ff 	mov.w	r0, #4294967295
 8007730:	f7f8 ffcc 	bl	80006cc <HAL_NVIC_SetPriority>
}
 8007734:	b039      	add	sp, #228	; 0xe4
 8007736:	bd30      	pop	{r4, r5, pc}
 8007738:	40023800 	.word	0x40023800
 800773c:	40007000 	.word	0x40007000

08007740 <main>:
{
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007742:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007746:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800774a:	4b2c      	ldr	r3, [pc, #176]	; (80077fc <main+0xbc>)
 800774c:	2100      	movs	r1, #0
 800774e:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8007752:	695a      	ldr	r2, [r3, #20]
 8007754:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007758:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800775a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800775e:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8007762:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8007766:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800776a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800776e:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8007772:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8007776:	f3c2 324e 	ubfx	r2, r2, #13, #15
 800777a:	07a5      	lsls	r5, r4, #30
 800777c:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800777e:	ea02 0e06 	and.w	lr, r2, r6
 8007782:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8007784:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007786:	ea4e 0700 	orr.w	r7, lr, r0
      } while (ways--);
 800778a:	3901      	subs	r1, #1
 800778c:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007790:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways--);
 8007794:	1c4f      	adds	r7, r1, #1
 8007796:	d1f6      	bne.n	8007786 <main+0x46>
 8007798:	3a20      	subs	r2, #32
    } while(sets--);
 800779a:	f112 0f20 	cmn.w	r2, #32
 800779e:	d1ee      	bne.n	800777e <main+0x3e>
 80077a0:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80077a4:	695a      	ldr	r2, [r3, #20]
 80077a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80077aa:	615a      	str	r2, [r3, #20]
 80077ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80077b0:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80077b4:	f7f8 ff48 	bl	8000648 <HAL_Init>
	unsigned counter=0;
 80077b8:	2400      	movs	r4, #0
  SystemClock_Config();
 80077ba:	f7ff ff61 	bl	8007680 <SystemClock_Config>
	  ethernetif_input(&gnetif);
 80077be:	4e10      	ldr	r6, [pc, #64]	; (8007800 <main+0xc0>)
  MX_GPIO_Init();
 80077c0:	f7ff fe50 	bl	8007464 <MX_GPIO_Init>
	  if(counter==10000000)
 80077c4:	4d0f      	ldr	r5, [pc, #60]	; (8007804 <main+0xc4>)
  MX_USART3_UART_Init();
 80077c6:	f000 f92f 	bl	8007a28 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80077ca:	f000 f90b 	bl	80079e4 <MX_USART2_UART_Init>
  MX_LWIP_Init();
 80077ce:	f7ff fedb 	bl	8007588 <MX_LWIP_Init>
  serial_print(clear_screen);
 80077d2:	480d      	ldr	r0, [pc, #52]	; (8007808 <main+0xc8>)
 80077d4:	f000 f81e 	bl	8007814 <serial_print>
  serial_print("System initialized");
 80077d8:	480c      	ldr	r0, [pc, #48]	; (800780c <main+0xcc>)
 80077da:	f000 f81b 	bl	8007814 <serial_print>
  udp_echoclient_connect();
 80077de:	f000 f8ab 	bl	8007938 <udp_echoclient_connect>
  udp_echoclient_send();
 80077e2:	f000 f8cf 	bl	8007984 <udp_echoclient_send>
	  ethernetif_input(&gnetif);
 80077e6:	4630      	mov	r0, r6
 80077e8:	f7ff fd36 	bl	8007258 <ethernetif_input>
	  if(counter==10000000)
 80077ec:	42ac      	cmp	r4, r5
 80077ee:	d102      	bne.n	80077f6 <main+0xb6>
		  counter=0;
 80077f0:	2400      	movs	r4, #0
		  udp_echoclient_send();
 80077f2:	f000 f8c7 	bl	8007984 <udp_echoclient_send>
	  counter++;
 80077f6:	3401      	adds	r4, #1
	  ethernetif_input(&gnetif);
 80077f8:	e7f5      	b.n	80077e6 <main+0xa6>
 80077fa:	bf00      	nop
 80077fc:	e000ed00 	.word	0xe000ed00
 8007800:	20006854 	.word	0x20006854
 8007804:	00989680 	.word	0x00989680
 8007808:	0800a2f8 	.word	0x0800a2f8
 800780c:	0800a300 	.word	0x0800a300

08007810 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8007810:	e7fe      	b.n	8007810 <_Error_Handler>
	...

08007814 <serial_print>:
uint8_t aRxBuffer[1];

void serial_print(char *s)
{

	char new_line[]="\r\n";//new line/carriage return
 8007814:	4b11      	ldr	r3, [pc, #68]	; (800785c <serial_print+0x48>)
{
 8007816:	b573      	push	{r0, r1, r4, r5, r6, lr}
	char new_line[]="\r\n";//new line/carriage return
 8007818:	881a      	ldrh	r2, [r3, #0]

	memset(&USART2TxBuffer[0], 0, sizeof(USART2TxBuffer));//erase the old info from char array
 800781a:	26f0      	movs	r6, #240	; 0xf0
 800781c:	4c10      	ldr	r4, [pc, #64]	; (8007860 <serial_print+0x4c>)
{
 800781e:	4605      	mov	r5, r0
	char new_line[]="\r\n";//new line/carriage return
 8007820:	789b      	ldrb	r3, [r3, #2]
	memset(&USART2TxBuffer[0], 0, sizeof(USART2TxBuffer));//erase the old info from char array
 8007822:	2100      	movs	r1, #0
	char new_line[]="\r\n";//new line/carriage return
 8007824:	f8ad 2004 	strh.w	r2, [sp, #4]
	memset(&USART2TxBuffer[0], 0, sizeof(USART2TxBuffer));//erase the old info from char array
 8007828:	4620      	mov	r0, r4
 800782a:	4632      	mov	r2, r6
	char new_line[]="\r\n";//new line/carriage return
 800782c:	f88d 3006 	strb.w	r3, [sp, #6]
	memset(&USART2TxBuffer[0], 0, sizeof(USART2TxBuffer));//erase the old info from char array
 8007830:	f000 f9d2 	bl	8007bd8 <memset>

	strcpy(USART2TxBuffer,*(&s));//copy the  string passed from the function to the TX buffer. *(&s)= pointer to the adress where the string is located(in memory)
 8007834:	4629      	mov	r1, r5

	HAL_UART_Transmit(&huart2,USART2TxBuffer,sizeof(USART2TxBuffer),64);// Sending in normal mode
 8007836:	4d0b      	ldr	r5, [pc, #44]	; (8007864 <serial_print+0x50>)
	strcpy(USART2TxBuffer,*(&s));//copy the  string passed from the function to the TX buffer. *(&s)= pointer to the adress where the string is located(in memory)
 8007838:	4620      	mov	r0, r4
 800783a:	f000 fa11 	bl	8007c60 <strcpy>
	HAL_UART_Transmit(&huart2,USART2TxBuffer,sizeof(USART2TxBuffer),64);// Sending in normal mode
 800783e:	4632      	mov	r2, r6
 8007840:	4621      	mov	r1, r4
 8007842:	2340      	movs	r3, #64	; 0x40
 8007844:	4628      	mov	r0, r5
 8007846:	f7fa f992 	bl	8001b6e <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2,new_line,sizeof(new_line),1);//new line
 800784a:	2301      	movs	r3, #1
 800784c:	2203      	movs	r2, #3
 800784e:	a901      	add	r1, sp, #4
 8007850:	4628      	mov	r0, r5
 8007852:	f7fa f98c 	bl	8001b6e <HAL_UART_Transmit>
}
 8007856:	b002      	add	sp, #8
 8007858:	bd70      	pop	{r4, r5, r6, pc}
 800785a:	bf00      	nop
 800785c:	0800a313 	.word	0x0800a313
 8007860:	2000689c 	.word	0x2000689c
 8007864:	20006acc 	.word	0x20006acc

08007868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007868:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800786a:	2003      	movs	r0, #3
 800786c:	f7f8 ff1c 	bl	80006a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8007870:	2200      	movs	r2, #0
 8007872:	f06f 000b 	mvn.w	r0, #11
 8007876:	4611      	mov	r1, r2
 8007878:	f7f8 ff28 	bl	80006cc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800787c:	2200      	movs	r2, #0
 800787e:	f06f 000a 	mvn.w	r0, #10
 8007882:	4611      	mov	r1, r2
 8007884:	f7f8 ff22 	bl	80006cc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8007888:	2200      	movs	r2, #0
 800788a:	f06f 0009 	mvn.w	r0, #9
 800788e:	4611      	mov	r1, r2
 8007890:	f7f8 ff1c 	bl	80006cc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8007894:	2200      	movs	r2, #0
 8007896:	f06f 0004 	mvn.w	r0, #4
 800789a:	4611      	mov	r1, r2
 800789c:	f7f8 ff16 	bl	80006cc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80078a0:	2200      	movs	r2, #0
 80078a2:	f06f 0003 	mvn.w	r0, #3
 80078a6:	4611      	mov	r1, r2
 80078a8:	f7f8 ff10 	bl	80006cc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80078ac:	2200      	movs	r2, #0
 80078ae:	f06f 0001 	mvn.w	r0, #1
 80078b2:	4611      	mov	r1, r2
 80078b4:	f7f8 ff0a 	bl	80006cc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80078b8:	2200      	movs	r2, #0
 80078ba:	f04f 30ff 	mov.w	r0, #4294967295
 80078be:	4611      	mov	r1, r2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80078c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80078c4:	f7f8 bf02 	b.w	80006cc <HAL_NVIC_SetPriority>

080078c8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80078c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80078ca:	f7f8 fec9 	bl	8000660 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80078ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80078d2:	f7f8 bf56 	b.w	8000782 <HAL_SYSTICK_IRQHandler>
	...

080078d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80078d8:	490f      	ldr	r1, [pc, #60]	; (8007918 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80078da:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80078dc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80078e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80078e8:	4b0c      	ldr	r3, [pc, #48]	; (800791c <SystemInit+0x44>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	f042 0201 	orr.w	r2, r2, #1
 80078f0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80078f2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80078fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80078fe:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007900:	4a07      	ldr	r2, [pc, #28]	; (8007920 <SystemInit+0x48>)
 8007902:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800790a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800790c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800790e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007912:	608b      	str	r3, [r1, #8]
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	e000ed00 	.word	0xe000ed00
 800791c:	40023800 	.word	0x40023800
 8007920:	24003010 	.word	0x24003010

08007924 <udp_receive_callback>:
  */
void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{

  /*increment message count */
  message_count++;
 8007924:	4903      	ldr	r1, [pc, #12]	; (8007934 <udp_receive_callback+0x10>)

  /* Free receive pbuf */
  pbuf_free(p);
 8007926:	4610      	mov	r0, r2
  message_count++;
 8007928:	680b      	ldr	r3, [r1, #0]
 800792a:	3301      	adds	r3, #1
 800792c:	600b      	str	r3, [r1, #0]
  pbuf_free(p);
 800792e:	f7fc b8b5 	b.w	8003a9c <pbuf_free>
 8007932:	bf00      	nop
 8007934:	2000020c 	.word	0x2000020c

08007938 <udp_echoclient_connect>:
{
 8007938:	b513      	push	{r0, r1, r4, lr}
  upcb = udp_new();
 800793a:	4c0d      	ldr	r4, [pc, #52]	; (8007970 <udp_echoclient_connect+0x38>)
 800793c:	f7ff fb35 	bl	8006faa <udp_new>
 8007940:	6020      	str	r0, [r4, #0]
  if (upcb!=NULL)
 8007942:	b178      	cbz	r0, 8007964 <udp_echoclient_connect+0x2c>
    IP4_ADDR( &DestIPaddr, DEST_IP_ADDR0, DEST_IP_ADDR1, DEST_IP_ADDR2, DEST_IP_ADDR3 );
 8007944:	a902      	add	r1, sp, #8
 8007946:	4b0b      	ldr	r3, [pc, #44]	; (8007974 <udp_echoclient_connect+0x3c>)
    err= udp_connect(upcb, &DestIPaddr, UDP_SERVER_PORT);
 8007948:	2207      	movs	r2, #7
    IP4_ADDR( &DestIPaddr, DEST_IP_ADDR0, DEST_IP_ADDR1, DEST_IP_ADDR2, DEST_IP_ADDR3 );
 800794a:	f841 3d04 	str.w	r3, [r1, #-4]!
    err= udp_connect(upcb, &DestIPaddr, UDP_SERVER_PORT);
 800794e:	f7ff fb01 	bl	8006f54 <udp_connect>
    if (err == ERR_OK)
 8007952:	4602      	mov	r2, r0
 8007954:	b930      	cbnz	r0, 8007964 <udp_echoclient_connect+0x2c>
      udp_recv(upcb, udp_receive_callback, NULL);
 8007956:	6820      	ldr	r0, [r4, #0]
 8007958:	4907      	ldr	r1, [pc, #28]	; (8007978 <udp_echoclient_connect+0x40>)
 800795a:	f7ff fb23 	bl	8006fa4 <udp_recv>
      serial_print("udp_recv");
 800795e:	4807      	ldr	r0, [pc, #28]	; (800797c <udp_echoclient_connect+0x44>)
 8007960:	f7ff ff58 	bl	8007814 <serial_print>
  serial_print("udp_echoclient_connect");
 8007964:	4806      	ldr	r0, [pc, #24]	; (8007980 <udp_echoclient_connect+0x48>)
 8007966:	f7ff ff55 	bl	8007814 <serial_print>
}
 800796a:	b002      	add	sp, #8
 800796c:	bd10      	pop	{r4, pc}
 800796e:	bf00      	nop
 8007970:	20006990 	.word	0x20006990
 8007974:	6400a8c0 	.word	0x6400a8c0
 8007978:	08007925 	.word	0x08007925
 800797c:	0800a32e 	.word	0x0800a32e
 8007980:	0800a337 	.word	0x0800a337

08007984 <udp_echoclient_send>:
  sprintf((char*)data, "Hello World nr: %d", (int)message_count);
 8007984:	4b12      	ldr	r3, [pc, #72]	; (80079d0 <udp_echoclient_send+0x4c>)
 8007986:	4913      	ldr	r1, [pc, #76]	; (80079d4 <udp_echoclient_send+0x50>)
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	4813      	ldr	r0, [pc, #76]	; (80079d8 <udp_echoclient_send+0x54>)
{
 800798c:	b510      	push	{r4, lr}
  sprintf((char*)data, "Hello World nr: %d", (int)message_count);
 800798e:	f000 f943 	bl	8007c18 <siprintf>
  p = pbuf_alloc(PBUF_TRANSPORT,strlen((char*)data), PBUF_POOL);
 8007992:	4811      	ldr	r0, [pc, #68]	; (80079d8 <udp_echoclient_send+0x54>)
 8007994:	f7f8 fc54 	bl	8000240 <strlen>
 8007998:	2203      	movs	r2, #3
 800799a:	b281      	uxth	r1, r0
 800799c:	2000      	movs	r0, #0
 800799e:	f7fc f8df 	bl	8003b60 <pbuf_alloc>
  if (p != NULL)
 80079a2:	4604      	mov	r4, r0
 80079a4:	b178      	cbz	r0, 80079c6 <udp_echoclient_send+0x42>
    pbuf_take(p, (char*)data, strlen((char*)data));
 80079a6:	480c      	ldr	r0, [pc, #48]	; (80079d8 <udp_echoclient_send+0x54>)
 80079a8:	f7f8 fc4a 	bl	8000240 <strlen>
 80079ac:	490a      	ldr	r1, [pc, #40]	; (80079d8 <udp_echoclient_send+0x54>)
 80079ae:	b282      	uxth	r2, r0
 80079b0:	4620      	mov	r0, r4
 80079b2:	f7fc fb55 	bl	8004060 <pbuf_take>
    udp_send(upcb, p); 
 80079b6:	4b09      	ldr	r3, [pc, #36]	; (80079dc <udp_echoclient_send+0x58>)
 80079b8:	4621      	mov	r1, r4
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	f7ff fac0 	bl	8006f40 <udp_send>
    pbuf_free(p);
 80079c0:	4620      	mov	r0, r4
 80079c2:	f7fc f86b 	bl	8003a9c <pbuf_free>
  serial_print("udp_echoclient_send");
 80079c6:	4806      	ldr	r0, [pc, #24]	; (80079e0 <udp_echoclient_send+0x5c>)
}
 80079c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  serial_print("udp_echoclient_send");
 80079cc:	f7ff bf22 	b.w	8007814 <serial_print>
 80079d0:	2000020c 	.word	0x2000020c
 80079d4:	0800a34e 	.word	0x0800a34e
 80079d8:	20006994 	.word	0x20006994
 80079dc:	20006990 	.word	0x20006990
 80079e0:	0800a361 	.word	0x0800a361

080079e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80079e4:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80079e6:	480d      	ldr	r0, [pc, #52]	; (8007a1c <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 80079e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80079ec:	4a0c      	ldr	r2, [pc, #48]	; (8007a20 <MX_USART2_UART_Init+0x3c>)
 80079ee:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
 80079f2:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  huart2.Init.StopBits = UART_STOPBITS_1;
 80079f6:	2300      	movs	r3, #0
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80079f8:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80079fa:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80079fc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80079fe:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a00:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007a02:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007a04:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007a06:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007a08:	f7fa fac9 	bl	8001f9e <HAL_UART_Init>
 8007a0c:	b128      	cbz	r0, 8007a1a <MX_USART2_UART_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007a0e:	214f      	movs	r1, #79	; 0x4f
 8007a10:	4804      	ldr	r0, [pc, #16]	; (8007a24 <MX_USART2_UART_Init+0x40>)
  }

}
 8007a12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8007a16:	f7ff befb 	b.w	8007810 <_Error_Handler>
 8007a1a:	bd08      	pop	{r3, pc}
 8007a1c:	20006acc 	.word	0x20006acc
 8007a20:	40004400 	.word	0x40004400
 8007a24:	0800a375 	.word	0x0800a375

08007a28 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007a28:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8007a2a:	480d      	ldr	r0, [pc, #52]	; (8007a60 <MX_USART3_UART_Init+0x38>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_7B;
 8007a2c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007a30:	4a0c      	ldr	r2, [pc, #48]	; (8007a64 <MX_USART3_UART_Init+0x3c>)
 8007a32:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
 8007a36:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007a3a:	2300      	movs	r3, #0
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007a3c:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007a3e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007a40:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007a42:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a44:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007a46:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007a48:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007a4a:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007a4c:	f7fa faa7 	bl	8001f9e <HAL_UART_Init>
 8007a50:	b128      	cbz	r0, 8007a5e <MX_USART3_UART_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007a52:	2164      	movs	r1, #100	; 0x64
 8007a54:	4804      	ldr	r0, [pc, #16]	; (8007a68 <MX_USART3_UART_Init+0x40>)
  }

}
 8007a56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8007a5a:	f7ff bed9 	b.w	8007810 <_Error_Handler>
 8007a5e:	bd08      	pop	{r3, pc}
 8007a60:	20006a5c 	.word	0x20006a5c
 8007a64:	40004800 	.word	0x40004800
 8007a68:	0800a375 	.word	0x0800a375

08007a6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8007a6c:	6803      	ldr	r3, [r0, #0]
 8007a6e:	4a21      	ldr	r2, [pc, #132]	; (8007af4 <HAL_UART_MspInit+0x88>)
 8007a70:	4293      	cmp	r3, r2
{
 8007a72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a74:	b089      	sub	sp, #36	; 0x24
  if(uartHandle->Instance==USART2)
 8007a76:	d123      	bne.n	8007ac0 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007a78:	4b1f      	ldr	r3, [pc, #124]	; (8007af8 <HAL_UART_MspInit+0x8c>)
    /**USART2 GPIO Configuration    
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a7a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a7c:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a7e:	2503      	movs	r5, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8007a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007a82:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a84:	a903      	add	r1, sp, #12
 8007a86:	481d      	ldr	r0, [pc, #116]	; (8007afc <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8007a88:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a90:	9704      	str	r7, [sp, #16]
    __HAL_RCC_USART2_CLK_ENABLE();
 8007a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a96:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a98:	9506      	str	r5, [sp, #24]
    __HAL_RCC_USART2_CLK_ENABLE();
 8007a9a:	9301      	str	r3, [sp, #4]
 8007a9c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007a9e:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007aa0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007aa2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007aa4:	f7f9 f9d6 	bl	8000e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007aa8:	2320      	movs	r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007aaa:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aac:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007aae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ab0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007ab2:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ab4:	a903      	add	r1, sp, #12
 8007ab6:	4812      	ldr	r0, [pc, #72]	; (8007b00 <HAL_UART_MspInit+0x94>)
 8007ab8:	f7f9 f9cc 	bl	8000e54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8007abc:	b009      	add	sp, #36	; 0x24
 8007abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(uartHandle->Instance==USART3)
 8007ac0:	4a10      	ldr	r2, [pc, #64]	; (8007b04 <HAL_UART_MspInit+0x98>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d1fa      	bne.n	8007abc <HAL_UART_MspInit+0x50>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007ac6:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <HAL_UART_MspInit+0x8c>)
 8007ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007aca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007ace:	641a      	str	r2, [r3, #64]	; 0x40
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ad6:	9302      	str	r3, [sp, #8]
 8007ad8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007ada:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007ade:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007aec:	2307      	movs	r3, #7
 8007aee:	9307      	str	r3, [sp, #28]
 8007af0:	e7e0      	b.n	8007ab4 <HAL_UART_MspInit+0x48>
 8007af2:	bf00      	nop
 8007af4:	40004400 	.word	0x40004400
 8007af8:	40023800 	.word	0x40023800
 8007afc:	40020000 	.word	0x40020000
 8007b00:	40020c00 	.word	0x40020c00
 8007b04:	40004800 	.word	0x40004800

08007b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007b0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007b0e:	e003      	b.n	8007b18 <LoopCopyDataInit>

08007b10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007b10:	4b0c      	ldr	r3, [pc, #48]	; (8007b44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007b12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007b14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007b16:	3104      	adds	r1, #4

08007b18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007b18:	480b      	ldr	r0, [pc, #44]	; (8007b48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007b1a:	4b0c      	ldr	r3, [pc, #48]	; (8007b4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007b1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007b1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007b20:	d3f6      	bcc.n	8007b10 <CopyDataInit>
  ldr  r2, =_sbss
 8007b22:	4a0b      	ldr	r2, [pc, #44]	; (8007b50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007b24:	e002      	b.n	8007b2c <LoopFillZerobss>

08007b26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007b26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007b28:	f842 3b04 	str.w	r3, [r2], #4

08007b2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007b2c:	4b09      	ldr	r3, [pc, #36]	; (8007b54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007b2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007b30:	d3f9      	bcc.n	8007b26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007b32:	f7ff fed1 	bl	80078d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b36:	f000 f811 	bl	8007b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007b3a:	f7ff fe01 	bl	8007740 <main>
  bx  lr    
 8007b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007b40:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8007b44:	0800a42c 	.word	0x0800a42c
  ldr  r0, =_sdata
 8007b48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007b4c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8007b50:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8007b54:	20006b40 	.word	0x20006b40

08007b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007b58:	e7fe      	b.n	8007b58 <ADC_IRQHandler>
	...

08007b5c <__libc_init_array>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	4e0d      	ldr	r6, [pc, #52]	; (8007b94 <__libc_init_array+0x38>)
 8007b60:	4c0d      	ldr	r4, [pc, #52]	; (8007b98 <__libc_init_array+0x3c>)
 8007b62:	1ba4      	subs	r4, r4, r6
 8007b64:	10a4      	asrs	r4, r4, #2
 8007b66:	2500      	movs	r5, #0
 8007b68:	42a5      	cmp	r5, r4
 8007b6a:	d109      	bne.n	8007b80 <__libc_init_array+0x24>
 8007b6c:	4e0b      	ldr	r6, [pc, #44]	; (8007b9c <__libc_init_array+0x40>)
 8007b6e:	4c0c      	ldr	r4, [pc, #48]	; (8007ba0 <__libc_init_array+0x44>)
 8007b70:	f001 f936 	bl	8008de0 <_init>
 8007b74:	1ba4      	subs	r4, r4, r6
 8007b76:	10a4      	asrs	r4, r4, #2
 8007b78:	2500      	movs	r5, #0
 8007b7a:	42a5      	cmp	r5, r4
 8007b7c:	d105      	bne.n	8007b8a <__libc_init_array+0x2e>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b84:	4798      	blx	r3
 8007b86:	3501      	adds	r5, #1
 8007b88:	e7ee      	b.n	8007b68 <__libc_init_array+0xc>
 8007b8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b8e:	4798      	blx	r3
 8007b90:	3501      	adds	r5, #1
 8007b92:	e7f2      	b.n	8007b7a <__libc_init_array+0x1e>
 8007b94:	0800a424 	.word	0x0800a424
 8007b98:	0800a424 	.word	0x0800a424
 8007b9c:	0800a424 	.word	0x0800a424
 8007ba0:	0800a428 	.word	0x0800a428

08007ba4 <memcmp>:
 8007ba4:	b510      	push	{r4, lr}
 8007ba6:	3901      	subs	r1, #1
 8007ba8:	4402      	add	r2, r0
 8007baa:	4290      	cmp	r0, r2
 8007bac:	d101      	bne.n	8007bb2 <memcmp+0xe>
 8007bae:	2000      	movs	r0, #0
 8007bb0:	bd10      	pop	{r4, pc}
 8007bb2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007bb6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007bba:	42a3      	cmp	r3, r4
 8007bbc:	d0f5      	beq.n	8007baa <memcmp+0x6>
 8007bbe:	1b18      	subs	r0, r3, r4
 8007bc0:	bd10      	pop	{r4, pc}

08007bc2 <memcpy>:
 8007bc2:	b510      	push	{r4, lr}
 8007bc4:	1e43      	subs	r3, r0, #1
 8007bc6:	440a      	add	r2, r1
 8007bc8:	4291      	cmp	r1, r2
 8007bca:	d100      	bne.n	8007bce <memcpy+0xc>
 8007bcc:	bd10      	pop	{r4, pc}
 8007bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bd6:	e7f7      	b.n	8007bc8 <memcpy+0x6>

08007bd8 <memset>:
 8007bd8:	4402      	add	r2, r0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d100      	bne.n	8007be2 <memset+0xa>
 8007be0:	4770      	bx	lr
 8007be2:	f803 1b01 	strb.w	r1, [r3], #1
 8007be6:	e7f9      	b.n	8007bdc <memset+0x4>

08007be8 <iprintf>:
 8007be8:	b40f      	push	{r0, r1, r2, r3}
 8007bea:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <iprintf+0x2c>)
 8007bec:	b513      	push	{r0, r1, r4, lr}
 8007bee:	681c      	ldr	r4, [r3, #0]
 8007bf0:	b124      	cbz	r4, 8007bfc <iprintf+0x14>
 8007bf2:	69a3      	ldr	r3, [r4, #24]
 8007bf4:	b913      	cbnz	r3, 8007bfc <iprintf+0x14>
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f000 f87a 	bl	8007cf0 <__sinit>
 8007bfc:	ab05      	add	r3, sp, #20
 8007bfe:	9a04      	ldr	r2, [sp, #16]
 8007c00:	68a1      	ldr	r1, [r4, #8]
 8007c02:	9301      	str	r3, [sp, #4]
 8007c04:	4620      	mov	r0, r4
 8007c06:	f000 fad5 	bl	80081b4 <_vfiprintf_r>
 8007c0a:	b002      	add	sp, #8
 8007c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c10:	b004      	add	sp, #16
 8007c12:	4770      	bx	lr
 8007c14:	20000014 	.word	0x20000014

08007c18 <siprintf>:
 8007c18:	b40e      	push	{r1, r2, r3}
 8007c1a:	b500      	push	{lr}
 8007c1c:	b09c      	sub	sp, #112	; 0x70
 8007c1e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8007c22:	ab1d      	add	r3, sp, #116	; 0x74
 8007c24:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007c28:	9002      	str	r0, [sp, #8]
 8007c2a:	9006      	str	r0, [sp, #24]
 8007c2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c30:	480a      	ldr	r0, [pc, #40]	; (8007c5c <siprintf+0x44>)
 8007c32:	9104      	str	r1, [sp, #16]
 8007c34:	9107      	str	r1, [sp, #28]
 8007c36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c3e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007c42:	6800      	ldr	r0, [r0, #0]
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	a902      	add	r1, sp, #8
 8007c48:	f000 f996 	bl	8007f78 <_svfiprintf_r>
 8007c4c:	9b02      	ldr	r3, [sp, #8]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	701a      	strb	r2, [r3, #0]
 8007c52:	b01c      	add	sp, #112	; 0x70
 8007c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c58:	b003      	add	sp, #12
 8007c5a:	4770      	bx	lr
 8007c5c:	20000014 	.word	0x20000014

08007c60 <strcpy>:
 8007c60:	4603      	mov	r3, r0
 8007c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c66:	f803 2b01 	strb.w	r2, [r3], #1
 8007c6a:	2a00      	cmp	r2, #0
 8007c6c:	d1f9      	bne.n	8007c62 <strcpy+0x2>
 8007c6e:	4770      	bx	lr

08007c70 <_cleanup_r>:
 8007c70:	4901      	ldr	r1, [pc, #4]	; (8007c78 <_cleanup_r+0x8>)
 8007c72:	f000 b8a9 	b.w	8007dc8 <_fwalk_reent>
 8007c76:	bf00      	nop
 8007c78:	08008a89 	.word	0x08008a89

08007c7c <std.isra.0>:
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	b510      	push	{r4, lr}
 8007c80:	4604      	mov	r4, r0
 8007c82:	6003      	str	r3, [r0, #0]
 8007c84:	6043      	str	r3, [r0, #4]
 8007c86:	6083      	str	r3, [r0, #8]
 8007c88:	8181      	strh	r1, [r0, #12]
 8007c8a:	6643      	str	r3, [r0, #100]	; 0x64
 8007c8c:	81c2      	strh	r2, [r0, #14]
 8007c8e:	6103      	str	r3, [r0, #16]
 8007c90:	6143      	str	r3, [r0, #20]
 8007c92:	6183      	str	r3, [r0, #24]
 8007c94:	4619      	mov	r1, r3
 8007c96:	2208      	movs	r2, #8
 8007c98:	305c      	adds	r0, #92	; 0x5c
 8007c9a:	f7ff ff9d 	bl	8007bd8 <memset>
 8007c9e:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <std.isra.0+0x38>)
 8007ca0:	6263      	str	r3, [r4, #36]	; 0x24
 8007ca2:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <std.isra.0+0x3c>)
 8007ca4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ca6:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <std.isra.0+0x40>)
 8007ca8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007caa:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <std.isra.0+0x44>)
 8007cac:	6224      	str	r4, [r4, #32]
 8007cae:	6323      	str	r3, [r4, #48]	; 0x30
 8007cb0:	bd10      	pop	{r4, pc}
 8007cb2:	bf00      	nop
 8007cb4:	0800872d 	.word	0x0800872d
 8007cb8:	0800874f 	.word	0x0800874f
 8007cbc:	08008787 	.word	0x08008787
 8007cc0:	080087ab 	.word	0x080087ab

08007cc4 <__sfmoreglue>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	1e4a      	subs	r2, r1, #1
 8007cc8:	2568      	movs	r5, #104	; 0x68
 8007cca:	4355      	muls	r5, r2
 8007ccc:	460e      	mov	r6, r1
 8007cce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cd2:	f000 f897 	bl	8007e04 <_malloc_r>
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	b140      	cbz	r0, 8007cec <__sfmoreglue+0x28>
 8007cda:	2100      	movs	r1, #0
 8007cdc:	e880 0042 	stmia.w	r0, {r1, r6}
 8007ce0:	300c      	adds	r0, #12
 8007ce2:	60a0      	str	r0, [r4, #8]
 8007ce4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ce8:	f7ff ff76 	bl	8007bd8 <memset>
 8007cec:	4620      	mov	r0, r4
 8007cee:	bd70      	pop	{r4, r5, r6, pc}

08007cf0 <__sinit>:
 8007cf0:	6983      	ldr	r3, [r0, #24]
 8007cf2:	b510      	push	{r4, lr}
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	bb33      	cbnz	r3, 8007d46 <__sinit+0x56>
 8007cf8:	6483      	str	r3, [r0, #72]	; 0x48
 8007cfa:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007cfc:	6503      	str	r3, [r0, #80]	; 0x50
 8007cfe:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <__sinit+0x58>)
 8007d00:	4a12      	ldr	r2, [pc, #72]	; (8007d4c <__sinit+0x5c>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6282      	str	r2, [r0, #40]	; 0x28
 8007d06:	4298      	cmp	r0, r3
 8007d08:	bf04      	itt	eq
 8007d0a:	2301      	moveq	r3, #1
 8007d0c:	6183      	streq	r3, [r0, #24]
 8007d0e:	f000 f81f 	bl	8007d50 <__sfp>
 8007d12:	6060      	str	r0, [r4, #4]
 8007d14:	4620      	mov	r0, r4
 8007d16:	f000 f81b 	bl	8007d50 <__sfp>
 8007d1a:	60a0      	str	r0, [r4, #8]
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f000 f817 	bl	8007d50 <__sfp>
 8007d22:	2200      	movs	r2, #0
 8007d24:	60e0      	str	r0, [r4, #12]
 8007d26:	2104      	movs	r1, #4
 8007d28:	6860      	ldr	r0, [r4, #4]
 8007d2a:	f7ff ffa7 	bl	8007c7c <std.isra.0>
 8007d2e:	2201      	movs	r2, #1
 8007d30:	2109      	movs	r1, #9
 8007d32:	68a0      	ldr	r0, [r4, #8]
 8007d34:	f7ff ffa2 	bl	8007c7c <std.isra.0>
 8007d38:	2202      	movs	r2, #2
 8007d3a:	2112      	movs	r1, #18
 8007d3c:	68e0      	ldr	r0, [r4, #12]
 8007d3e:	f7ff ff9d 	bl	8007c7c <std.isra.0>
 8007d42:	2301      	movs	r3, #1
 8007d44:	61a3      	str	r3, [r4, #24]
 8007d46:	bd10      	pop	{r4, pc}
 8007d48:	0800a3e4 	.word	0x0800a3e4
 8007d4c:	08007c71 	.word	0x08007c71

08007d50 <__sfp>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	4b1c      	ldr	r3, [pc, #112]	; (8007dc4 <__sfp+0x74>)
 8007d54:	681e      	ldr	r6, [r3, #0]
 8007d56:	69b3      	ldr	r3, [r6, #24]
 8007d58:	4607      	mov	r7, r0
 8007d5a:	b913      	cbnz	r3, 8007d62 <__sfp+0x12>
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f7ff ffc7 	bl	8007cf0 <__sinit>
 8007d62:	3648      	adds	r6, #72	; 0x48
 8007d64:	68b4      	ldr	r4, [r6, #8]
 8007d66:	6873      	ldr	r3, [r6, #4]
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	d503      	bpl.n	8007d74 <__sfp+0x24>
 8007d6c:	6833      	ldr	r3, [r6, #0]
 8007d6e:	b133      	cbz	r3, 8007d7e <__sfp+0x2e>
 8007d70:	6836      	ldr	r6, [r6, #0]
 8007d72:	e7f7      	b.n	8007d64 <__sfp+0x14>
 8007d74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d78:	b16d      	cbz	r5, 8007d96 <__sfp+0x46>
 8007d7a:	3468      	adds	r4, #104	; 0x68
 8007d7c:	e7f4      	b.n	8007d68 <__sfp+0x18>
 8007d7e:	2104      	movs	r1, #4
 8007d80:	4638      	mov	r0, r7
 8007d82:	f7ff ff9f 	bl	8007cc4 <__sfmoreglue>
 8007d86:	6030      	str	r0, [r6, #0]
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d1f1      	bne.n	8007d70 <__sfp+0x20>
 8007d8c:	230c      	movs	r3, #12
 8007d8e:	603b      	str	r3, [r7, #0]
 8007d90:	4604      	mov	r4, r0
 8007d92:	4620      	mov	r0, r4
 8007d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d9a:	81e3      	strh	r3, [r4, #14]
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	81a3      	strh	r3, [r4, #12]
 8007da0:	6665      	str	r5, [r4, #100]	; 0x64
 8007da2:	6025      	str	r5, [r4, #0]
 8007da4:	60a5      	str	r5, [r4, #8]
 8007da6:	6065      	str	r5, [r4, #4]
 8007da8:	6125      	str	r5, [r4, #16]
 8007daa:	6165      	str	r5, [r4, #20]
 8007dac:	61a5      	str	r5, [r4, #24]
 8007dae:	2208      	movs	r2, #8
 8007db0:	4629      	mov	r1, r5
 8007db2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007db6:	f7ff ff0f 	bl	8007bd8 <memset>
 8007dba:	6365      	str	r5, [r4, #52]	; 0x34
 8007dbc:	63a5      	str	r5, [r4, #56]	; 0x38
 8007dbe:	64a5      	str	r5, [r4, #72]	; 0x48
 8007dc0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007dc2:	e7e6      	b.n	8007d92 <__sfp+0x42>
 8007dc4:	0800a3e4 	.word	0x0800a3e4

08007dc8 <_fwalk_reent>:
 8007dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dcc:	4680      	mov	r8, r0
 8007dce:	4689      	mov	r9, r1
 8007dd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007dd4:	2600      	movs	r6, #0
 8007dd6:	b914      	cbnz	r4, 8007dde <_fwalk_reent+0x16>
 8007dd8:	4630      	mov	r0, r6
 8007dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dde:	68a5      	ldr	r5, [r4, #8]
 8007de0:	6867      	ldr	r7, [r4, #4]
 8007de2:	3f01      	subs	r7, #1
 8007de4:	d501      	bpl.n	8007dea <_fwalk_reent+0x22>
 8007de6:	6824      	ldr	r4, [r4, #0]
 8007de8:	e7f5      	b.n	8007dd6 <_fwalk_reent+0xe>
 8007dea:	89ab      	ldrh	r3, [r5, #12]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d907      	bls.n	8007e00 <_fwalk_reent+0x38>
 8007df0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007df4:	3301      	adds	r3, #1
 8007df6:	d003      	beq.n	8007e00 <_fwalk_reent+0x38>
 8007df8:	4629      	mov	r1, r5
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	47c8      	blx	r9
 8007dfe:	4306      	orrs	r6, r0
 8007e00:	3568      	adds	r5, #104	; 0x68
 8007e02:	e7ee      	b.n	8007de2 <_fwalk_reent+0x1a>

08007e04 <_malloc_r>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	1ccd      	adds	r5, r1, #3
 8007e08:	f025 0503 	bic.w	r5, r5, #3
 8007e0c:	3508      	adds	r5, #8
 8007e0e:	2d0c      	cmp	r5, #12
 8007e10:	bf38      	it	cc
 8007e12:	250c      	movcc	r5, #12
 8007e14:	2d00      	cmp	r5, #0
 8007e16:	4606      	mov	r6, r0
 8007e18:	db01      	blt.n	8007e1e <_malloc_r+0x1a>
 8007e1a:	42a9      	cmp	r1, r5
 8007e1c:	d903      	bls.n	8007e26 <_malloc_r+0x22>
 8007e1e:	230c      	movs	r3, #12
 8007e20:	6033      	str	r3, [r6, #0]
 8007e22:	2000      	movs	r0, #0
 8007e24:	bd70      	pop	{r4, r5, r6, pc}
 8007e26:	f000 fee9 	bl	8008bfc <__malloc_lock>
 8007e2a:	4a23      	ldr	r2, [pc, #140]	; (8007eb8 <_malloc_r+0xb4>)
 8007e2c:	6814      	ldr	r4, [r2, #0]
 8007e2e:	4621      	mov	r1, r4
 8007e30:	b991      	cbnz	r1, 8007e58 <_malloc_r+0x54>
 8007e32:	4c22      	ldr	r4, [pc, #136]	; (8007ebc <_malloc_r+0xb8>)
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	b91b      	cbnz	r3, 8007e40 <_malloc_r+0x3c>
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f000 fc67 	bl	800870c <_sbrk_r>
 8007e3e:	6020      	str	r0, [r4, #0]
 8007e40:	4629      	mov	r1, r5
 8007e42:	4630      	mov	r0, r6
 8007e44:	f000 fc62 	bl	800870c <_sbrk_r>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d126      	bne.n	8007e9a <_malloc_r+0x96>
 8007e4c:	230c      	movs	r3, #12
 8007e4e:	6033      	str	r3, [r6, #0]
 8007e50:	4630      	mov	r0, r6
 8007e52:	f000 fed4 	bl	8008bfe <__malloc_unlock>
 8007e56:	e7e4      	b.n	8007e22 <_malloc_r+0x1e>
 8007e58:	680b      	ldr	r3, [r1, #0]
 8007e5a:	1b5b      	subs	r3, r3, r5
 8007e5c:	d41a      	bmi.n	8007e94 <_malloc_r+0x90>
 8007e5e:	2b0b      	cmp	r3, #11
 8007e60:	d90f      	bls.n	8007e82 <_malloc_r+0x7e>
 8007e62:	600b      	str	r3, [r1, #0]
 8007e64:	50cd      	str	r5, [r1, r3]
 8007e66:	18cc      	adds	r4, r1, r3
 8007e68:	4630      	mov	r0, r6
 8007e6a:	f000 fec8 	bl	8008bfe <__malloc_unlock>
 8007e6e:	f104 000b 	add.w	r0, r4, #11
 8007e72:	1d23      	adds	r3, r4, #4
 8007e74:	f020 0007 	bic.w	r0, r0, #7
 8007e78:	1ac3      	subs	r3, r0, r3
 8007e7a:	d01b      	beq.n	8007eb4 <_malloc_r+0xb0>
 8007e7c:	425a      	negs	r2, r3
 8007e7e:	50e2      	str	r2, [r4, r3]
 8007e80:	bd70      	pop	{r4, r5, r6, pc}
 8007e82:	428c      	cmp	r4, r1
 8007e84:	bf0d      	iteet	eq
 8007e86:	6863      	ldreq	r3, [r4, #4]
 8007e88:	684b      	ldrne	r3, [r1, #4]
 8007e8a:	6063      	strne	r3, [r4, #4]
 8007e8c:	6013      	streq	r3, [r2, #0]
 8007e8e:	bf18      	it	ne
 8007e90:	460c      	movne	r4, r1
 8007e92:	e7e9      	b.n	8007e68 <_malloc_r+0x64>
 8007e94:	460c      	mov	r4, r1
 8007e96:	6849      	ldr	r1, [r1, #4]
 8007e98:	e7ca      	b.n	8007e30 <_malloc_r+0x2c>
 8007e9a:	1cc4      	adds	r4, r0, #3
 8007e9c:	f024 0403 	bic.w	r4, r4, #3
 8007ea0:	42a0      	cmp	r0, r4
 8007ea2:	d005      	beq.n	8007eb0 <_malloc_r+0xac>
 8007ea4:	1a21      	subs	r1, r4, r0
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	f000 fc30 	bl	800870c <_sbrk_r>
 8007eac:	3001      	adds	r0, #1
 8007eae:	d0cd      	beq.n	8007e4c <_malloc_r+0x48>
 8007eb0:	6025      	str	r5, [r4, #0]
 8007eb2:	e7d9      	b.n	8007e68 <_malloc_r+0x64>
 8007eb4:	bd70      	pop	{r4, r5, r6, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20000210 	.word	0x20000210
 8007ebc:	20000214 	.word	0x20000214

08007ec0 <__ssputs_r>:
 8007ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec4:	688e      	ldr	r6, [r1, #8]
 8007ec6:	429e      	cmp	r6, r3
 8007ec8:	4682      	mov	sl, r0
 8007eca:	460c      	mov	r4, r1
 8007ecc:	4691      	mov	r9, r2
 8007ece:	4698      	mov	r8, r3
 8007ed0:	d835      	bhi.n	8007f3e <__ssputs_r+0x7e>
 8007ed2:	898a      	ldrh	r2, [r1, #12]
 8007ed4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ed8:	d031      	beq.n	8007f3e <__ssputs_r+0x7e>
 8007eda:	6825      	ldr	r5, [r4, #0]
 8007edc:	6909      	ldr	r1, [r1, #16]
 8007ede:	1a6f      	subs	r7, r5, r1
 8007ee0:	6965      	ldr	r5, [r4, #20]
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ee8:	fb95 f5f3 	sdiv	r5, r5, r3
 8007eec:	f108 0301 	add.w	r3, r8, #1
 8007ef0:	443b      	add	r3, r7
 8007ef2:	429d      	cmp	r5, r3
 8007ef4:	bf38      	it	cc
 8007ef6:	461d      	movcc	r5, r3
 8007ef8:	0553      	lsls	r3, r2, #21
 8007efa:	d531      	bpl.n	8007f60 <__ssputs_r+0xa0>
 8007efc:	4629      	mov	r1, r5
 8007efe:	f7ff ff81 	bl	8007e04 <_malloc_r>
 8007f02:	4606      	mov	r6, r0
 8007f04:	b950      	cbnz	r0, 8007f1c <__ssputs_r+0x5c>
 8007f06:	230c      	movs	r3, #12
 8007f08:	f8ca 3000 	str.w	r3, [sl]
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f12:	81a3      	strh	r3, [r4, #12]
 8007f14:	f04f 30ff 	mov.w	r0, #4294967295
 8007f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1c:	463a      	mov	r2, r7
 8007f1e:	6921      	ldr	r1, [r4, #16]
 8007f20:	f7ff fe4f 	bl	8007bc2 <memcpy>
 8007f24:	89a3      	ldrh	r3, [r4, #12]
 8007f26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f2e:	81a3      	strh	r3, [r4, #12]
 8007f30:	6126      	str	r6, [r4, #16]
 8007f32:	6165      	str	r5, [r4, #20]
 8007f34:	443e      	add	r6, r7
 8007f36:	1bed      	subs	r5, r5, r7
 8007f38:	6026      	str	r6, [r4, #0]
 8007f3a:	60a5      	str	r5, [r4, #8]
 8007f3c:	4646      	mov	r6, r8
 8007f3e:	4546      	cmp	r6, r8
 8007f40:	bf28      	it	cs
 8007f42:	4646      	movcs	r6, r8
 8007f44:	4632      	mov	r2, r6
 8007f46:	4649      	mov	r1, r9
 8007f48:	6820      	ldr	r0, [r4, #0]
 8007f4a:	f000 fe3d 	bl	8008bc8 <memmove>
 8007f4e:	68a3      	ldr	r3, [r4, #8]
 8007f50:	1b9b      	subs	r3, r3, r6
 8007f52:	60a3      	str	r3, [r4, #8]
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	441e      	add	r6, r3
 8007f58:	6026      	str	r6, [r4, #0]
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f60:	462a      	mov	r2, r5
 8007f62:	f000 fe9b 	bl	8008c9c <_realloc_r>
 8007f66:	4606      	mov	r6, r0
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d1e1      	bne.n	8007f30 <__ssputs_r+0x70>
 8007f6c:	6921      	ldr	r1, [r4, #16]
 8007f6e:	4650      	mov	r0, sl
 8007f70:	f000 fe46 	bl	8008c00 <_free_r>
 8007f74:	e7c7      	b.n	8007f06 <__ssputs_r+0x46>
	...

08007f78 <_svfiprintf_r>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	b09d      	sub	sp, #116	; 0x74
 8007f7e:	4680      	mov	r8, r0
 8007f80:	9303      	str	r3, [sp, #12]
 8007f82:	898b      	ldrh	r3, [r1, #12]
 8007f84:	061c      	lsls	r4, r3, #24
 8007f86:	460d      	mov	r5, r1
 8007f88:	4616      	mov	r6, r2
 8007f8a:	d50f      	bpl.n	8007fac <_svfiprintf_r+0x34>
 8007f8c:	690b      	ldr	r3, [r1, #16]
 8007f8e:	b96b      	cbnz	r3, 8007fac <_svfiprintf_r+0x34>
 8007f90:	2140      	movs	r1, #64	; 0x40
 8007f92:	f7ff ff37 	bl	8007e04 <_malloc_r>
 8007f96:	6028      	str	r0, [r5, #0]
 8007f98:	6128      	str	r0, [r5, #16]
 8007f9a:	b928      	cbnz	r0, 8007fa8 <_svfiprintf_r+0x30>
 8007f9c:	230c      	movs	r3, #12
 8007f9e:	f8c8 3000 	str.w	r3, [r8]
 8007fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa6:	e0c5      	b.n	8008134 <_svfiprintf_r+0x1bc>
 8007fa8:	2340      	movs	r3, #64	; 0x40
 8007faa:	616b      	str	r3, [r5, #20]
 8007fac:	2300      	movs	r3, #0
 8007fae:	9309      	str	r3, [sp, #36]	; 0x24
 8007fb0:	2320      	movs	r3, #32
 8007fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fb6:	2330      	movs	r3, #48	; 0x30
 8007fb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fbc:	f04f 0b01 	mov.w	fp, #1
 8007fc0:	4637      	mov	r7, r6
 8007fc2:	463c      	mov	r4, r7
 8007fc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d13c      	bne.n	8008046 <_svfiprintf_r+0xce>
 8007fcc:	ebb7 0a06 	subs.w	sl, r7, r6
 8007fd0:	d00b      	beq.n	8007fea <_svfiprintf_r+0x72>
 8007fd2:	4653      	mov	r3, sl
 8007fd4:	4632      	mov	r2, r6
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	4640      	mov	r0, r8
 8007fda:	f7ff ff71 	bl	8007ec0 <__ssputs_r>
 8007fde:	3001      	adds	r0, #1
 8007fe0:	f000 80a3 	beq.w	800812a <_svfiprintf_r+0x1b2>
 8007fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe6:	4453      	add	r3, sl
 8007fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fea:	783b      	ldrb	r3, [r7, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 809c 	beq.w	800812a <_svfiprintf_r+0x1b2>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff8:	9304      	str	r3, [sp, #16]
 8007ffa:	9307      	str	r3, [sp, #28]
 8007ffc:	9205      	str	r2, [sp, #20]
 8007ffe:	9306      	str	r3, [sp, #24]
 8008000:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008004:	931a      	str	r3, [sp, #104]	; 0x68
 8008006:	2205      	movs	r2, #5
 8008008:	7821      	ldrb	r1, [r4, #0]
 800800a:	4850      	ldr	r0, [pc, #320]	; (800814c <_svfiprintf_r+0x1d4>)
 800800c:	f7f8 f920 	bl	8000250 <memchr>
 8008010:	1c67      	adds	r7, r4, #1
 8008012:	9b04      	ldr	r3, [sp, #16]
 8008014:	b9d8      	cbnz	r0, 800804e <_svfiprintf_r+0xd6>
 8008016:	06d9      	lsls	r1, r3, #27
 8008018:	bf44      	itt	mi
 800801a:	2220      	movmi	r2, #32
 800801c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008020:	071a      	lsls	r2, r3, #28
 8008022:	bf44      	itt	mi
 8008024:	222b      	movmi	r2, #43	; 0x2b
 8008026:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800802a:	7822      	ldrb	r2, [r4, #0]
 800802c:	2a2a      	cmp	r2, #42	; 0x2a
 800802e:	d016      	beq.n	800805e <_svfiprintf_r+0xe6>
 8008030:	9a07      	ldr	r2, [sp, #28]
 8008032:	2100      	movs	r1, #0
 8008034:	200a      	movs	r0, #10
 8008036:	4627      	mov	r7, r4
 8008038:	3401      	adds	r4, #1
 800803a:	783b      	ldrb	r3, [r7, #0]
 800803c:	3b30      	subs	r3, #48	; 0x30
 800803e:	2b09      	cmp	r3, #9
 8008040:	d951      	bls.n	80080e6 <_svfiprintf_r+0x16e>
 8008042:	b1c9      	cbz	r1, 8008078 <_svfiprintf_r+0x100>
 8008044:	e011      	b.n	800806a <_svfiprintf_r+0xf2>
 8008046:	2b25      	cmp	r3, #37	; 0x25
 8008048:	d0c0      	beq.n	8007fcc <_svfiprintf_r+0x54>
 800804a:	4627      	mov	r7, r4
 800804c:	e7b9      	b.n	8007fc2 <_svfiprintf_r+0x4a>
 800804e:	4a3f      	ldr	r2, [pc, #252]	; (800814c <_svfiprintf_r+0x1d4>)
 8008050:	1a80      	subs	r0, r0, r2
 8008052:	fa0b f000 	lsl.w	r0, fp, r0
 8008056:	4318      	orrs	r0, r3
 8008058:	9004      	str	r0, [sp, #16]
 800805a:	463c      	mov	r4, r7
 800805c:	e7d3      	b.n	8008006 <_svfiprintf_r+0x8e>
 800805e:	9a03      	ldr	r2, [sp, #12]
 8008060:	1d11      	adds	r1, r2, #4
 8008062:	6812      	ldr	r2, [r2, #0]
 8008064:	9103      	str	r1, [sp, #12]
 8008066:	2a00      	cmp	r2, #0
 8008068:	db01      	blt.n	800806e <_svfiprintf_r+0xf6>
 800806a:	9207      	str	r2, [sp, #28]
 800806c:	e004      	b.n	8008078 <_svfiprintf_r+0x100>
 800806e:	4252      	negs	r2, r2
 8008070:	f043 0302 	orr.w	r3, r3, #2
 8008074:	9207      	str	r2, [sp, #28]
 8008076:	9304      	str	r3, [sp, #16]
 8008078:	783b      	ldrb	r3, [r7, #0]
 800807a:	2b2e      	cmp	r3, #46	; 0x2e
 800807c:	d10e      	bne.n	800809c <_svfiprintf_r+0x124>
 800807e:	787b      	ldrb	r3, [r7, #1]
 8008080:	2b2a      	cmp	r3, #42	; 0x2a
 8008082:	f107 0101 	add.w	r1, r7, #1
 8008086:	d132      	bne.n	80080ee <_svfiprintf_r+0x176>
 8008088:	9b03      	ldr	r3, [sp, #12]
 800808a:	1d1a      	adds	r2, r3, #4
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	9203      	str	r2, [sp, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	bfb8      	it	lt
 8008094:	f04f 33ff 	movlt.w	r3, #4294967295
 8008098:	3702      	adds	r7, #2
 800809a:	9305      	str	r3, [sp, #20]
 800809c:	4c2c      	ldr	r4, [pc, #176]	; (8008150 <_svfiprintf_r+0x1d8>)
 800809e:	7839      	ldrb	r1, [r7, #0]
 80080a0:	2203      	movs	r2, #3
 80080a2:	4620      	mov	r0, r4
 80080a4:	f7f8 f8d4 	bl	8000250 <memchr>
 80080a8:	b138      	cbz	r0, 80080ba <_svfiprintf_r+0x142>
 80080aa:	2340      	movs	r3, #64	; 0x40
 80080ac:	1b00      	subs	r0, r0, r4
 80080ae:	fa03 f000 	lsl.w	r0, r3, r0
 80080b2:	9b04      	ldr	r3, [sp, #16]
 80080b4:	4303      	orrs	r3, r0
 80080b6:	9304      	str	r3, [sp, #16]
 80080b8:	3701      	adds	r7, #1
 80080ba:	7839      	ldrb	r1, [r7, #0]
 80080bc:	4825      	ldr	r0, [pc, #148]	; (8008154 <_svfiprintf_r+0x1dc>)
 80080be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080c2:	2206      	movs	r2, #6
 80080c4:	1c7e      	adds	r6, r7, #1
 80080c6:	f7f8 f8c3 	bl	8000250 <memchr>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d035      	beq.n	800813a <_svfiprintf_r+0x1c2>
 80080ce:	4b22      	ldr	r3, [pc, #136]	; (8008158 <_svfiprintf_r+0x1e0>)
 80080d0:	b9fb      	cbnz	r3, 8008112 <_svfiprintf_r+0x19a>
 80080d2:	9b03      	ldr	r3, [sp, #12]
 80080d4:	3307      	adds	r3, #7
 80080d6:	f023 0307 	bic.w	r3, r3, #7
 80080da:	3308      	adds	r3, #8
 80080dc:	9303      	str	r3, [sp, #12]
 80080de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e0:	444b      	add	r3, r9
 80080e2:	9309      	str	r3, [sp, #36]	; 0x24
 80080e4:	e76c      	b.n	8007fc0 <_svfiprintf_r+0x48>
 80080e6:	fb00 3202 	mla	r2, r0, r2, r3
 80080ea:	2101      	movs	r1, #1
 80080ec:	e7a3      	b.n	8008036 <_svfiprintf_r+0xbe>
 80080ee:	2300      	movs	r3, #0
 80080f0:	9305      	str	r3, [sp, #20]
 80080f2:	4618      	mov	r0, r3
 80080f4:	240a      	movs	r4, #10
 80080f6:	460f      	mov	r7, r1
 80080f8:	3101      	adds	r1, #1
 80080fa:	783a      	ldrb	r2, [r7, #0]
 80080fc:	3a30      	subs	r2, #48	; 0x30
 80080fe:	2a09      	cmp	r2, #9
 8008100:	d903      	bls.n	800810a <_svfiprintf_r+0x192>
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0ca      	beq.n	800809c <_svfiprintf_r+0x124>
 8008106:	9005      	str	r0, [sp, #20]
 8008108:	e7c8      	b.n	800809c <_svfiprintf_r+0x124>
 800810a:	fb04 2000 	mla	r0, r4, r0, r2
 800810e:	2301      	movs	r3, #1
 8008110:	e7f1      	b.n	80080f6 <_svfiprintf_r+0x17e>
 8008112:	ab03      	add	r3, sp, #12
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	462a      	mov	r2, r5
 8008118:	4b10      	ldr	r3, [pc, #64]	; (800815c <_svfiprintf_r+0x1e4>)
 800811a:	a904      	add	r1, sp, #16
 800811c:	4640      	mov	r0, r8
 800811e:	f3af 8000 	nop.w
 8008122:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008126:	4681      	mov	r9, r0
 8008128:	d1d9      	bne.n	80080de <_svfiprintf_r+0x166>
 800812a:	89ab      	ldrh	r3, [r5, #12]
 800812c:	065b      	lsls	r3, r3, #25
 800812e:	f53f af38 	bmi.w	8007fa2 <_svfiprintf_r+0x2a>
 8008132:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008134:	b01d      	add	sp, #116	; 0x74
 8008136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813a:	ab03      	add	r3, sp, #12
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	462a      	mov	r2, r5
 8008140:	4b06      	ldr	r3, [pc, #24]	; (800815c <_svfiprintf_r+0x1e4>)
 8008142:	a904      	add	r1, sp, #16
 8008144:	4640      	mov	r0, r8
 8008146:	f000 f9c1 	bl	80084cc <_printf_i>
 800814a:	e7ea      	b.n	8008122 <_svfiprintf_r+0x1aa>
 800814c:	0800a3e8 	.word	0x0800a3e8
 8008150:	0800a3ee 	.word	0x0800a3ee
 8008154:	0800a3f2 	.word	0x0800a3f2
 8008158:	00000000 	.word	0x00000000
 800815c:	08007ec1 	.word	0x08007ec1

08008160 <__sfputc_r>:
 8008160:	6893      	ldr	r3, [r2, #8]
 8008162:	3b01      	subs	r3, #1
 8008164:	2b00      	cmp	r3, #0
 8008166:	b410      	push	{r4}
 8008168:	6093      	str	r3, [r2, #8]
 800816a:	da09      	bge.n	8008180 <__sfputc_r+0x20>
 800816c:	6994      	ldr	r4, [r2, #24]
 800816e:	42a3      	cmp	r3, r4
 8008170:	db02      	blt.n	8008178 <__sfputc_r+0x18>
 8008172:	b2cb      	uxtb	r3, r1
 8008174:	2b0a      	cmp	r3, #10
 8008176:	d103      	bne.n	8008180 <__sfputc_r+0x20>
 8008178:	f85d 4b04 	ldr.w	r4, [sp], #4
 800817c:	f000 bb1a 	b.w	80087b4 <__swbuf_r>
 8008180:	6813      	ldr	r3, [r2, #0]
 8008182:	1c58      	adds	r0, r3, #1
 8008184:	6010      	str	r0, [r2, #0]
 8008186:	7019      	strb	r1, [r3, #0]
 8008188:	b2c8      	uxtb	r0, r1
 800818a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800818e:	4770      	bx	lr

08008190 <__sfputs_r>:
 8008190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008192:	4606      	mov	r6, r0
 8008194:	460f      	mov	r7, r1
 8008196:	4614      	mov	r4, r2
 8008198:	18d5      	adds	r5, r2, r3
 800819a:	42ac      	cmp	r4, r5
 800819c:	d101      	bne.n	80081a2 <__sfputs_r+0x12>
 800819e:	2000      	movs	r0, #0
 80081a0:	e007      	b.n	80081b2 <__sfputs_r+0x22>
 80081a2:	463a      	mov	r2, r7
 80081a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a8:	4630      	mov	r0, r6
 80081aa:	f7ff ffd9 	bl	8008160 <__sfputc_r>
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	d1f3      	bne.n	800819a <__sfputs_r+0xa>
 80081b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080081b4 <_vfiprintf_r>:
 80081b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b8:	b09d      	sub	sp, #116	; 0x74
 80081ba:	460c      	mov	r4, r1
 80081bc:	4617      	mov	r7, r2
 80081be:	9303      	str	r3, [sp, #12]
 80081c0:	4606      	mov	r6, r0
 80081c2:	b118      	cbz	r0, 80081cc <_vfiprintf_r+0x18>
 80081c4:	6983      	ldr	r3, [r0, #24]
 80081c6:	b90b      	cbnz	r3, 80081cc <_vfiprintf_r+0x18>
 80081c8:	f7ff fd92 	bl	8007cf0 <__sinit>
 80081cc:	4b7c      	ldr	r3, [pc, #496]	; (80083c0 <_vfiprintf_r+0x20c>)
 80081ce:	429c      	cmp	r4, r3
 80081d0:	d157      	bne.n	8008282 <_vfiprintf_r+0xce>
 80081d2:	6874      	ldr	r4, [r6, #4]
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	0718      	lsls	r0, r3, #28
 80081d8:	d55d      	bpl.n	8008296 <_vfiprintf_r+0xe2>
 80081da:	6923      	ldr	r3, [r4, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d05a      	beq.n	8008296 <_vfiprintf_r+0xe2>
 80081e0:	2300      	movs	r3, #0
 80081e2:	9309      	str	r3, [sp, #36]	; 0x24
 80081e4:	2320      	movs	r3, #32
 80081e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081ea:	2330      	movs	r3, #48	; 0x30
 80081ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081f0:	f04f 0b01 	mov.w	fp, #1
 80081f4:	46b8      	mov	r8, r7
 80081f6:	4645      	mov	r5, r8
 80081f8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d155      	bne.n	80082ac <_vfiprintf_r+0xf8>
 8008200:	ebb8 0a07 	subs.w	sl, r8, r7
 8008204:	d00b      	beq.n	800821e <_vfiprintf_r+0x6a>
 8008206:	4653      	mov	r3, sl
 8008208:	463a      	mov	r2, r7
 800820a:	4621      	mov	r1, r4
 800820c:	4630      	mov	r0, r6
 800820e:	f7ff ffbf 	bl	8008190 <__sfputs_r>
 8008212:	3001      	adds	r0, #1
 8008214:	f000 80c4 	beq.w	80083a0 <_vfiprintf_r+0x1ec>
 8008218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800821a:	4453      	add	r3, sl
 800821c:	9309      	str	r3, [sp, #36]	; 0x24
 800821e:	f898 3000 	ldrb.w	r3, [r8]
 8008222:	2b00      	cmp	r3, #0
 8008224:	f000 80bc 	beq.w	80083a0 <_vfiprintf_r+0x1ec>
 8008228:	2300      	movs	r3, #0
 800822a:	f04f 32ff 	mov.w	r2, #4294967295
 800822e:	9304      	str	r3, [sp, #16]
 8008230:	9307      	str	r3, [sp, #28]
 8008232:	9205      	str	r2, [sp, #20]
 8008234:	9306      	str	r3, [sp, #24]
 8008236:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800823a:	931a      	str	r3, [sp, #104]	; 0x68
 800823c:	2205      	movs	r2, #5
 800823e:	7829      	ldrb	r1, [r5, #0]
 8008240:	4860      	ldr	r0, [pc, #384]	; (80083c4 <_vfiprintf_r+0x210>)
 8008242:	f7f8 f805 	bl	8000250 <memchr>
 8008246:	f105 0801 	add.w	r8, r5, #1
 800824a:	9b04      	ldr	r3, [sp, #16]
 800824c:	2800      	cmp	r0, #0
 800824e:	d131      	bne.n	80082b4 <_vfiprintf_r+0x100>
 8008250:	06d9      	lsls	r1, r3, #27
 8008252:	bf44      	itt	mi
 8008254:	2220      	movmi	r2, #32
 8008256:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800825a:	071a      	lsls	r2, r3, #28
 800825c:	bf44      	itt	mi
 800825e:	222b      	movmi	r2, #43	; 0x2b
 8008260:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008264:	782a      	ldrb	r2, [r5, #0]
 8008266:	2a2a      	cmp	r2, #42	; 0x2a
 8008268:	d02c      	beq.n	80082c4 <_vfiprintf_r+0x110>
 800826a:	9a07      	ldr	r2, [sp, #28]
 800826c:	2100      	movs	r1, #0
 800826e:	200a      	movs	r0, #10
 8008270:	46a8      	mov	r8, r5
 8008272:	3501      	adds	r5, #1
 8008274:	f898 3000 	ldrb.w	r3, [r8]
 8008278:	3b30      	subs	r3, #48	; 0x30
 800827a:	2b09      	cmp	r3, #9
 800827c:	d96d      	bls.n	800835a <_vfiprintf_r+0x1a6>
 800827e:	b371      	cbz	r1, 80082de <_vfiprintf_r+0x12a>
 8008280:	e026      	b.n	80082d0 <_vfiprintf_r+0x11c>
 8008282:	4b51      	ldr	r3, [pc, #324]	; (80083c8 <_vfiprintf_r+0x214>)
 8008284:	429c      	cmp	r4, r3
 8008286:	d101      	bne.n	800828c <_vfiprintf_r+0xd8>
 8008288:	68b4      	ldr	r4, [r6, #8]
 800828a:	e7a3      	b.n	80081d4 <_vfiprintf_r+0x20>
 800828c:	4b4f      	ldr	r3, [pc, #316]	; (80083cc <_vfiprintf_r+0x218>)
 800828e:	429c      	cmp	r4, r3
 8008290:	bf08      	it	eq
 8008292:	68f4      	ldreq	r4, [r6, #12]
 8008294:	e79e      	b.n	80081d4 <_vfiprintf_r+0x20>
 8008296:	4621      	mov	r1, r4
 8008298:	4630      	mov	r0, r6
 800829a:	f000 faef 	bl	800887c <__swsetup_r>
 800829e:	2800      	cmp	r0, #0
 80082a0:	d09e      	beq.n	80081e0 <_vfiprintf_r+0x2c>
 80082a2:	f04f 30ff 	mov.w	r0, #4294967295
 80082a6:	b01d      	add	sp, #116	; 0x74
 80082a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ac:	2b25      	cmp	r3, #37	; 0x25
 80082ae:	d0a7      	beq.n	8008200 <_vfiprintf_r+0x4c>
 80082b0:	46a8      	mov	r8, r5
 80082b2:	e7a0      	b.n	80081f6 <_vfiprintf_r+0x42>
 80082b4:	4a43      	ldr	r2, [pc, #268]	; (80083c4 <_vfiprintf_r+0x210>)
 80082b6:	1a80      	subs	r0, r0, r2
 80082b8:	fa0b f000 	lsl.w	r0, fp, r0
 80082bc:	4318      	orrs	r0, r3
 80082be:	9004      	str	r0, [sp, #16]
 80082c0:	4645      	mov	r5, r8
 80082c2:	e7bb      	b.n	800823c <_vfiprintf_r+0x88>
 80082c4:	9a03      	ldr	r2, [sp, #12]
 80082c6:	1d11      	adds	r1, r2, #4
 80082c8:	6812      	ldr	r2, [r2, #0]
 80082ca:	9103      	str	r1, [sp, #12]
 80082cc:	2a00      	cmp	r2, #0
 80082ce:	db01      	blt.n	80082d4 <_vfiprintf_r+0x120>
 80082d0:	9207      	str	r2, [sp, #28]
 80082d2:	e004      	b.n	80082de <_vfiprintf_r+0x12a>
 80082d4:	4252      	negs	r2, r2
 80082d6:	f043 0302 	orr.w	r3, r3, #2
 80082da:	9207      	str	r2, [sp, #28]
 80082dc:	9304      	str	r3, [sp, #16]
 80082de:	f898 3000 	ldrb.w	r3, [r8]
 80082e2:	2b2e      	cmp	r3, #46	; 0x2e
 80082e4:	d110      	bne.n	8008308 <_vfiprintf_r+0x154>
 80082e6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80082ea:	2b2a      	cmp	r3, #42	; 0x2a
 80082ec:	f108 0101 	add.w	r1, r8, #1
 80082f0:	d137      	bne.n	8008362 <_vfiprintf_r+0x1ae>
 80082f2:	9b03      	ldr	r3, [sp, #12]
 80082f4:	1d1a      	adds	r2, r3, #4
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	9203      	str	r2, [sp, #12]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	bfb8      	it	lt
 80082fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008302:	f108 0802 	add.w	r8, r8, #2
 8008306:	9305      	str	r3, [sp, #20]
 8008308:	4d31      	ldr	r5, [pc, #196]	; (80083d0 <_vfiprintf_r+0x21c>)
 800830a:	f898 1000 	ldrb.w	r1, [r8]
 800830e:	2203      	movs	r2, #3
 8008310:	4628      	mov	r0, r5
 8008312:	f7f7 ff9d 	bl	8000250 <memchr>
 8008316:	b140      	cbz	r0, 800832a <_vfiprintf_r+0x176>
 8008318:	2340      	movs	r3, #64	; 0x40
 800831a:	1b40      	subs	r0, r0, r5
 800831c:	fa03 f000 	lsl.w	r0, r3, r0
 8008320:	9b04      	ldr	r3, [sp, #16]
 8008322:	4303      	orrs	r3, r0
 8008324:	9304      	str	r3, [sp, #16]
 8008326:	f108 0801 	add.w	r8, r8, #1
 800832a:	f898 1000 	ldrb.w	r1, [r8]
 800832e:	4829      	ldr	r0, [pc, #164]	; (80083d4 <_vfiprintf_r+0x220>)
 8008330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008334:	2206      	movs	r2, #6
 8008336:	f108 0701 	add.w	r7, r8, #1
 800833a:	f7f7 ff89 	bl	8000250 <memchr>
 800833e:	2800      	cmp	r0, #0
 8008340:	d034      	beq.n	80083ac <_vfiprintf_r+0x1f8>
 8008342:	4b25      	ldr	r3, [pc, #148]	; (80083d8 <_vfiprintf_r+0x224>)
 8008344:	bb03      	cbnz	r3, 8008388 <_vfiprintf_r+0x1d4>
 8008346:	9b03      	ldr	r3, [sp, #12]
 8008348:	3307      	adds	r3, #7
 800834a:	f023 0307 	bic.w	r3, r3, #7
 800834e:	3308      	adds	r3, #8
 8008350:	9303      	str	r3, [sp, #12]
 8008352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008354:	444b      	add	r3, r9
 8008356:	9309      	str	r3, [sp, #36]	; 0x24
 8008358:	e74c      	b.n	80081f4 <_vfiprintf_r+0x40>
 800835a:	fb00 3202 	mla	r2, r0, r2, r3
 800835e:	2101      	movs	r1, #1
 8008360:	e786      	b.n	8008270 <_vfiprintf_r+0xbc>
 8008362:	2300      	movs	r3, #0
 8008364:	9305      	str	r3, [sp, #20]
 8008366:	4618      	mov	r0, r3
 8008368:	250a      	movs	r5, #10
 800836a:	4688      	mov	r8, r1
 800836c:	3101      	adds	r1, #1
 800836e:	f898 2000 	ldrb.w	r2, [r8]
 8008372:	3a30      	subs	r2, #48	; 0x30
 8008374:	2a09      	cmp	r2, #9
 8008376:	d903      	bls.n	8008380 <_vfiprintf_r+0x1cc>
 8008378:	2b00      	cmp	r3, #0
 800837a:	d0c5      	beq.n	8008308 <_vfiprintf_r+0x154>
 800837c:	9005      	str	r0, [sp, #20]
 800837e:	e7c3      	b.n	8008308 <_vfiprintf_r+0x154>
 8008380:	fb05 2000 	mla	r0, r5, r0, r2
 8008384:	2301      	movs	r3, #1
 8008386:	e7f0      	b.n	800836a <_vfiprintf_r+0x1b6>
 8008388:	ab03      	add	r3, sp, #12
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	4622      	mov	r2, r4
 800838e:	4b13      	ldr	r3, [pc, #76]	; (80083dc <_vfiprintf_r+0x228>)
 8008390:	a904      	add	r1, sp, #16
 8008392:	4630      	mov	r0, r6
 8008394:	f3af 8000 	nop.w
 8008398:	f1b0 3fff 	cmp.w	r0, #4294967295
 800839c:	4681      	mov	r9, r0
 800839e:	d1d8      	bne.n	8008352 <_vfiprintf_r+0x19e>
 80083a0:	89a3      	ldrh	r3, [r4, #12]
 80083a2:	065b      	lsls	r3, r3, #25
 80083a4:	f53f af7d 	bmi.w	80082a2 <_vfiprintf_r+0xee>
 80083a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083aa:	e77c      	b.n	80082a6 <_vfiprintf_r+0xf2>
 80083ac:	ab03      	add	r3, sp, #12
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	4622      	mov	r2, r4
 80083b2:	4b0a      	ldr	r3, [pc, #40]	; (80083dc <_vfiprintf_r+0x228>)
 80083b4:	a904      	add	r1, sp, #16
 80083b6:	4630      	mov	r0, r6
 80083b8:	f000 f888 	bl	80084cc <_printf_i>
 80083bc:	e7ec      	b.n	8008398 <_vfiprintf_r+0x1e4>
 80083be:	bf00      	nop
 80083c0:	0800a3a4 	.word	0x0800a3a4
 80083c4:	0800a3e8 	.word	0x0800a3e8
 80083c8:	0800a3c4 	.word	0x0800a3c4
 80083cc:	0800a384 	.word	0x0800a384
 80083d0:	0800a3ee 	.word	0x0800a3ee
 80083d4:	0800a3f2 	.word	0x0800a3f2
 80083d8:	00000000 	.word	0x00000000
 80083dc:	08008191 	.word	0x08008191

080083e0 <_printf_common>:
 80083e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083e4:	4691      	mov	r9, r2
 80083e6:	461f      	mov	r7, r3
 80083e8:	688a      	ldr	r2, [r1, #8]
 80083ea:	690b      	ldr	r3, [r1, #16]
 80083ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083f0:	4293      	cmp	r3, r2
 80083f2:	bfb8      	it	lt
 80083f4:	4613      	movlt	r3, r2
 80083f6:	f8c9 3000 	str.w	r3, [r9]
 80083fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083fe:	4606      	mov	r6, r0
 8008400:	460c      	mov	r4, r1
 8008402:	b112      	cbz	r2, 800840a <_printf_common+0x2a>
 8008404:	3301      	adds	r3, #1
 8008406:	f8c9 3000 	str.w	r3, [r9]
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	0699      	lsls	r1, r3, #26
 800840e:	bf42      	ittt	mi
 8008410:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008414:	3302      	addmi	r3, #2
 8008416:	f8c9 3000 	strmi.w	r3, [r9]
 800841a:	6825      	ldr	r5, [r4, #0]
 800841c:	f015 0506 	ands.w	r5, r5, #6
 8008420:	d107      	bne.n	8008432 <_printf_common+0x52>
 8008422:	f104 0a19 	add.w	sl, r4, #25
 8008426:	68e3      	ldr	r3, [r4, #12]
 8008428:	f8d9 2000 	ldr.w	r2, [r9]
 800842c:	1a9b      	subs	r3, r3, r2
 800842e:	429d      	cmp	r5, r3
 8008430:	db29      	blt.n	8008486 <_printf_common+0xa6>
 8008432:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008436:	6822      	ldr	r2, [r4, #0]
 8008438:	3300      	adds	r3, #0
 800843a:	bf18      	it	ne
 800843c:	2301      	movne	r3, #1
 800843e:	0692      	lsls	r2, r2, #26
 8008440:	d42e      	bmi.n	80084a0 <_printf_common+0xc0>
 8008442:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008446:	4639      	mov	r1, r7
 8008448:	4630      	mov	r0, r6
 800844a:	47c0      	blx	r8
 800844c:	3001      	adds	r0, #1
 800844e:	d021      	beq.n	8008494 <_printf_common+0xb4>
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	68e5      	ldr	r5, [r4, #12]
 8008454:	f8d9 2000 	ldr.w	r2, [r9]
 8008458:	f003 0306 	and.w	r3, r3, #6
 800845c:	2b04      	cmp	r3, #4
 800845e:	bf08      	it	eq
 8008460:	1aad      	subeq	r5, r5, r2
 8008462:	68a3      	ldr	r3, [r4, #8]
 8008464:	6922      	ldr	r2, [r4, #16]
 8008466:	bf0c      	ite	eq
 8008468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800846c:	2500      	movne	r5, #0
 800846e:	4293      	cmp	r3, r2
 8008470:	bfc4      	itt	gt
 8008472:	1a9b      	subgt	r3, r3, r2
 8008474:	18ed      	addgt	r5, r5, r3
 8008476:	f04f 0900 	mov.w	r9, #0
 800847a:	341a      	adds	r4, #26
 800847c:	454d      	cmp	r5, r9
 800847e:	d11b      	bne.n	80084b8 <_printf_common+0xd8>
 8008480:	2000      	movs	r0, #0
 8008482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008486:	2301      	movs	r3, #1
 8008488:	4652      	mov	r2, sl
 800848a:	4639      	mov	r1, r7
 800848c:	4630      	mov	r0, r6
 800848e:	47c0      	blx	r8
 8008490:	3001      	adds	r0, #1
 8008492:	d103      	bne.n	800849c <_printf_common+0xbc>
 8008494:	f04f 30ff 	mov.w	r0, #4294967295
 8008498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800849c:	3501      	adds	r5, #1
 800849e:	e7c2      	b.n	8008426 <_printf_common+0x46>
 80084a0:	18e1      	adds	r1, r4, r3
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	2030      	movs	r0, #48	; 0x30
 80084a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084aa:	4422      	add	r2, r4
 80084ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084b4:	3302      	adds	r3, #2
 80084b6:	e7c4      	b.n	8008442 <_printf_common+0x62>
 80084b8:	2301      	movs	r3, #1
 80084ba:	4622      	mov	r2, r4
 80084bc:	4639      	mov	r1, r7
 80084be:	4630      	mov	r0, r6
 80084c0:	47c0      	blx	r8
 80084c2:	3001      	adds	r0, #1
 80084c4:	d0e6      	beq.n	8008494 <_printf_common+0xb4>
 80084c6:	f109 0901 	add.w	r9, r9, #1
 80084ca:	e7d7      	b.n	800847c <_printf_common+0x9c>

080084cc <_printf_i>:
 80084cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084d0:	4617      	mov	r7, r2
 80084d2:	7e0a      	ldrb	r2, [r1, #24]
 80084d4:	b085      	sub	sp, #20
 80084d6:	2a6e      	cmp	r2, #110	; 0x6e
 80084d8:	4698      	mov	r8, r3
 80084da:	4606      	mov	r6, r0
 80084dc:	460c      	mov	r4, r1
 80084de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084e0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80084e4:	f000 80bc 	beq.w	8008660 <_printf_i+0x194>
 80084e8:	d81a      	bhi.n	8008520 <_printf_i+0x54>
 80084ea:	2a63      	cmp	r2, #99	; 0x63
 80084ec:	d02e      	beq.n	800854c <_printf_i+0x80>
 80084ee:	d80a      	bhi.n	8008506 <_printf_i+0x3a>
 80084f0:	2a00      	cmp	r2, #0
 80084f2:	f000 80c8 	beq.w	8008686 <_printf_i+0x1ba>
 80084f6:	2a58      	cmp	r2, #88	; 0x58
 80084f8:	f000 808a 	beq.w	8008610 <_printf_i+0x144>
 80084fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008500:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8008504:	e02a      	b.n	800855c <_printf_i+0x90>
 8008506:	2a64      	cmp	r2, #100	; 0x64
 8008508:	d001      	beq.n	800850e <_printf_i+0x42>
 800850a:	2a69      	cmp	r2, #105	; 0x69
 800850c:	d1f6      	bne.n	80084fc <_printf_i+0x30>
 800850e:	6821      	ldr	r1, [r4, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008516:	d023      	beq.n	8008560 <_printf_i+0x94>
 8008518:	1d11      	adds	r1, r2, #4
 800851a:	6019      	str	r1, [r3, #0]
 800851c:	6813      	ldr	r3, [r2, #0]
 800851e:	e027      	b.n	8008570 <_printf_i+0xa4>
 8008520:	2a73      	cmp	r2, #115	; 0x73
 8008522:	f000 80b4 	beq.w	800868e <_printf_i+0x1c2>
 8008526:	d808      	bhi.n	800853a <_printf_i+0x6e>
 8008528:	2a6f      	cmp	r2, #111	; 0x6f
 800852a:	d02a      	beq.n	8008582 <_printf_i+0xb6>
 800852c:	2a70      	cmp	r2, #112	; 0x70
 800852e:	d1e5      	bne.n	80084fc <_printf_i+0x30>
 8008530:	680a      	ldr	r2, [r1, #0]
 8008532:	f042 0220 	orr.w	r2, r2, #32
 8008536:	600a      	str	r2, [r1, #0]
 8008538:	e003      	b.n	8008542 <_printf_i+0x76>
 800853a:	2a75      	cmp	r2, #117	; 0x75
 800853c:	d021      	beq.n	8008582 <_printf_i+0xb6>
 800853e:	2a78      	cmp	r2, #120	; 0x78
 8008540:	d1dc      	bne.n	80084fc <_printf_i+0x30>
 8008542:	2278      	movs	r2, #120	; 0x78
 8008544:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8008548:	496e      	ldr	r1, [pc, #440]	; (8008704 <_printf_i+0x238>)
 800854a:	e064      	b.n	8008616 <_printf_i+0x14a>
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8008552:	1d11      	adds	r1, r2, #4
 8008554:	6019      	str	r1, [r3, #0]
 8008556:	6813      	ldr	r3, [r2, #0]
 8008558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800855c:	2301      	movs	r3, #1
 800855e:	e0a3      	b.n	80086a8 <_printf_i+0x1dc>
 8008560:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008564:	f102 0104 	add.w	r1, r2, #4
 8008568:	6019      	str	r1, [r3, #0]
 800856a:	d0d7      	beq.n	800851c <_printf_i+0x50>
 800856c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8008570:	2b00      	cmp	r3, #0
 8008572:	da03      	bge.n	800857c <_printf_i+0xb0>
 8008574:	222d      	movs	r2, #45	; 0x2d
 8008576:	425b      	negs	r3, r3
 8008578:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800857c:	4962      	ldr	r1, [pc, #392]	; (8008708 <_printf_i+0x23c>)
 800857e:	220a      	movs	r2, #10
 8008580:	e017      	b.n	80085b2 <_printf_i+0xe6>
 8008582:	6820      	ldr	r0, [r4, #0]
 8008584:	6819      	ldr	r1, [r3, #0]
 8008586:	f010 0f80 	tst.w	r0, #128	; 0x80
 800858a:	d003      	beq.n	8008594 <_printf_i+0xc8>
 800858c:	1d08      	adds	r0, r1, #4
 800858e:	6018      	str	r0, [r3, #0]
 8008590:	680b      	ldr	r3, [r1, #0]
 8008592:	e006      	b.n	80085a2 <_printf_i+0xd6>
 8008594:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008598:	f101 0004 	add.w	r0, r1, #4
 800859c:	6018      	str	r0, [r3, #0]
 800859e:	d0f7      	beq.n	8008590 <_printf_i+0xc4>
 80085a0:	880b      	ldrh	r3, [r1, #0]
 80085a2:	4959      	ldr	r1, [pc, #356]	; (8008708 <_printf_i+0x23c>)
 80085a4:	2a6f      	cmp	r2, #111	; 0x6f
 80085a6:	bf14      	ite	ne
 80085a8:	220a      	movne	r2, #10
 80085aa:	2208      	moveq	r2, #8
 80085ac:	2000      	movs	r0, #0
 80085ae:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80085b2:	6865      	ldr	r5, [r4, #4]
 80085b4:	60a5      	str	r5, [r4, #8]
 80085b6:	2d00      	cmp	r5, #0
 80085b8:	f2c0 809c 	blt.w	80086f4 <_printf_i+0x228>
 80085bc:	6820      	ldr	r0, [r4, #0]
 80085be:	f020 0004 	bic.w	r0, r0, #4
 80085c2:	6020      	str	r0, [r4, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d13f      	bne.n	8008648 <_printf_i+0x17c>
 80085c8:	2d00      	cmp	r5, #0
 80085ca:	f040 8095 	bne.w	80086f8 <_printf_i+0x22c>
 80085ce:	4675      	mov	r5, lr
 80085d0:	2a08      	cmp	r2, #8
 80085d2:	d10b      	bne.n	80085ec <_printf_i+0x120>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	07da      	lsls	r2, r3, #31
 80085d8:	d508      	bpl.n	80085ec <_printf_i+0x120>
 80085da:	6923      	ldr	r3, [r4, #16]
 80085dc:	6862      	ldr	r2, [r4, #4]
 80085de:	429a      	cmp	r2, r3
 80085e0:	bfde      	ittt	le
 80085e2:	2330      	movle	r3, #48	; 0x30
 80085e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085ec:	ebae 0305 	sub.w	r3, lr, r5
 80085f0:	6123      	str	r3, [r4, #16]
 80085f2:	f8cd 8000 	str.w	r8, [sp]
 80085f6:	463b      	mov	r3, r7
 80085f8:	aa03      	add	r2, sp, #12
 80085fa:	4621      	mov	r1, r4
 80085fc:	4630      	mov	r0, r6
 80085fe:	f7ff feef 	bl	80083e0 <_printf_common>
 8008602:	3001      	adds	r0, #1
 8008604:	d155      	bne.n	80086b2 <_printf_i+0x1e6>
 8008606:	f04f 30ff 	mov.w	r0, #4294967295
 800860a:	b005      	add	sp, #20
 800860c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008610:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8008614:	493c      	ldr	r1, [pc, #240]	; (8008708 <_printf_i+0x23c>)
 8008616:	6822      	ldr	r2, [r4, #0]
 8008618:	6818      	ldr	r0, [r3, #0]
 800861a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800861e:	f100 0504 	add.w	r5, r0, #4
 8008622:	601d      	str	r5, [r3, #0]
 8008624:	d001      	beq.n	800862a <_printf_i+0x15e>
 8008626:	6803      	ldr	r3, [r0, #0]
 8008628:	e002      	b.n	8008630 <_printf_i+0x164>
 800862a:	0655      	lsls	r5, r2, #25
 800862c:	d5fb      	bpl.n	8008626 <_printf_i+0x15a>
 800862e:	8803      	ldrh	r3, [r0, #0]
 8008630:	07d0      	lsls	r0, r2, #31
 8008632:	bf44      	itt	mi
 8008634:	f042 0220 	orrmi.w	r2, r2, #32
 8008638:	6022      	strmi	r2, [r4, #0]
 800863a:	b91b      	cbnz	r3, 8008644 <_printf_i+0x178>
 800863c:	6822      	ldr	r2, [r4, #0]
 800863e:	f022 0220 	bic.w	r2, r2, #32
 8008642:	6022      	str	r2, [r4, #0]
 8008644:	2210      	movs	r2, #16
 8008646:	e7b1      	b.n	80085ac <_printf_i+0xe0>
 8008648:	4675      	mov	r5, lr
 800864a:	fbb3 f0f2 	udiv	r0, r3, r2
 800864e:	fb02 3310 	mls	r3, r2, r0, r3
 8008652:	5ccb      	ldrb	r3, [r1, r3]
 8008654:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008658:	4603      	mov	r3, r0
 800865a:	2800      	cmp	r0, #0
 800865c:	d1f5      	bne.n	800864a <_printf_i+0x17e>
 800865e:	e7b7      	b.n	80085d0 <_printf_i+0x104>
 8008660:	6808      	ldr	r0, [r1, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	6949      	ldr	r1, [r1, #20]
 8008666:	f010 0f80 	tst.w	r0, #128	; 0x80
 800866a:	d004      	beq.n	8008676 <_printf_i+0x1aa>
 800866c:	1d10      	adds	r0, r2, #4
 800866e:	6018      	str	r0, [r3, #0]
 8008670:	6813      	ldr	r3, [r2, #0]
 8008672:	6019      	str	r1, [r3, #0]
 8008674:	e007      	b.n	8008686 <_printf_i+0x1ba>
 8008676:	f010 0f40 	tst.w	r0, #64	; 0x40
 800867a:	f102 0004 	add.w	r0, r2, #4
 800867e:	6018      	str	r0, [r3, #0]
 8008680:	6813      	ldr	r3, [r2, #0]
 8008682:	d0f6      	beq.n	8008672 <_printf_i+0x1a6>
 8008684:	8019      	strh	r1, [r3, #0]
 8008686:	2300      	movs	r3, #0
 8008688:	6123      	str	r3, [r4, #16]
 800868a:	4675      	mov	r5, lr
 800868c:	e7b1      	b.n	80085f2 <_printf_i+0x126>
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	1d11      	adds	r1, r2, #4
 8008692:	6019      	str	r1, [r3, #0]
 8008694:	6815      	ldr	r5, [r2, #0]
 8008696:	6862      	ldr	r2, [r4, #4]
 8008698:	2100      	movs	r1, #0
 800869a:	4628      	mov	r0, r5
 800869c:	f7f7 fdd8 	bl	8000250 <memchr>
 80086a0:	b108      	cbz	r0, 80086a6 <_printf_i+0x1da>
 80086a2:	1b40      	subs	r0, r0, r5
 80086a4:	6060      	str	r0, [r4, #4]
 80086a6:	6863      	ldr	r3, [r4, #4]
 80086a8:	6123      	str	r3, [r4, #16]
 80086aa:	2300      	movs	r3, #0
 80086ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086b0:	e79f      	b.n	80085f2 <_printf_i+0x126>
 80086b2:	6923      	ldr	r3, [r4, #16]
 80086b4:	462a      	mov	r2, r5
 80086b6:	4639      	mov	r1, r7
 80086b8:	4630      	mov	r0, r6
 80086ba:	47c0      	blx	r8
 80086bc:	3001      	adds	r0, #1
 80086be:	d0a2      	beq.n	8008606 <_printf_i+0x13a>
 80086c0:	6823      	ldr	r3, [r4, #0]
 80086c2:	079b      	lsls	r3, r3, #30
 80086c4:	d507      	bpl.n	80086d6 <_printf_i+0x20a>
 80086c6:	2500      	movs	r5, #0
 80086c8:	f104 0919 	add.w	r9, r4, #25
 80086cc:	68e3      	ldr	r3, [r4, #12]
 80086ce:	9a03      	ldr	r2, [sp, #12]
 80086d0:	1a9b      	subs	r3, r3, r2
 80086d2:	429d      	cmp	r5, r3
 80086d4:	db05      	blt.n	80086e2 <_printf_i+0x216>
 80086d6:	68e0      	ldr	r0, [r4, #12]
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	4298      	cmp	r0, r3
 80086dc:	bfb8      	it	lt
 80086de:	4618      	movlt	r0, r3
 80086e0:	e793      	b.n	800860a <_printf_i+0x13e>
 80086e2:	2301      	movs	r3, #1
 80086e4:	464a      	mov	r2, r9
 80086e6:	4639      	mov	r1, r7
 80086e8:	4630      	mov	r0, r6
 80086ea:	47c0      	blx	r8
 80086ec:	3001      	adds	r0, #1
 80086ee:	d08a      	beq.n	8008606 <_printf_i+0x13a>
 80086f0:	3501      	adds	r5, #1
 80086f2:	e7eb      	b.n	80086cc <_printf_i+0x200>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1a7      	bne.n	8008648 <_printf_i+0x17c>
 80086f8:	780b      	ldrb	r3, [r1, #0]
 80086fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008702:	e765      	b.n	80085d0 <_printf_i+0x104>
 8008704:	0800a40a 	.word	0x0800a40a
 8008708:	0800a3f9 	.word	0x0800a3f9

0800870c <_sbrk_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4c06      	ldr	r4, [pc, #24]	; (8008728 <_sbrk_r+0x1c>)
 8008710:	2300      	movs	r3, #0
 8008712:	4605      	mov	r5, r0
 8008714:	4608      	mov	r0, r1
 8008716:	6023      	str	r3, [r4, #0]
 8008718:	f000 fb4c 	bl	8008db4 <_sbrk>
 800871c:	1c43      	adds	r3, r0, #1
 800871e:	d102      	bne.n	8008726 <_sbrk_r+0x1a>
 8008720:	6823      	ldr	r3, [r4, #0]
 8008722:	b103      	cbz	r3, 8008726 <_sbrk_r+0x1a>
 8008724:	602b      	str	r3, [r5, #0]
 8008726:	bd38      	pop	{r3, r4, r5, pc}
 8008728:	20006b3c 	.word	0x20006b3c

0800872c <__sread>:
 800872c:	b510      	push	{r4, lr}
 800872e:	460c      	mov	r4, r1
 8008730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008734:	f000 fad8 	bl	8008ce8 <_read_r>
 8008738:	2800      	cmp	r0, #0
 800873a:	bfab      	itete	ge
 800873c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800873e:	89a3      	ldrhlt	r3, [r4, #12]
 8008740:	181b      	addge	r3, r3, r0
 8008742:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008746:	bfac      	ite	ge
 8008748:	6563      	strge	r3, [r4, #84]	; 0x54
 800874a:	81a3      	strhlt	r3, [r4, #12]
 800874c:	bd10      	pop	{r4, pc}

0800874e <__swrite>:
 800874e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008752:	461f      	mov	r7, r3
 8008754:	898b      	ldrh	r3, [r1, #12]
 8008756:	05db      	lsls	r3, r3, #23
 8008758:	4605      	mov	r5, r0
 800875a:	460c      	mov	r4, r1
 800875c:	4616      	mov	r6, r2
 800875e:	d505      	bpl.n	800876c <__swrite+0x1e>
 8008760:	2302      	movs	r3, #2
 8008762:	2200      	movs	r2, #0
 8008764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008768:	f000 f9b8 	bl	8008adc <_lseek_r>
 800876c:	89a3      	ldrh	r3, [r4, #12]
 800876e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008776:	81a3      	strh	r3, [r4, #12]
 8008778:	4632      	mov	r2, r6
 800877a:	463b      	mov	r3, r7
 800877c:	4628      	mov	r0, r5
 800877e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008782:	f000 b869 	b.w	8008858 <_write_r>

08008786 <__sseek>:
 8008786:	b510      	push	{r4, lr}
 8008788:	460c      	mov	r4, r1
 800878a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878e:	f000 f9a5 	bl	8008adc <_lseek_r>
 8008792:	1c43      	adds	r3, r0, #1
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	bf15      	itete	ne
 8008798:	6560      	strne	r0, [r4, #84]	; 0x54
 800879a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800879e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087a2:	81a3      	strheq	r3, [r4, #12]
 80087a4:	bf18      	it	ne
 80087a6:	81a3      	strhne	r3, [r4, #12]
 80087a8:	bd10      	pop	{r4, pc}

080087aa <__sclose>:
 80087aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ae:	f000 b8d3 	b.w	8008958 <_close_r>
	...

080087b4 <__swbuf_r>:
 80087b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b6:	460e      	mov	r6, r1
 80087b8:	4614      	mov	r4, r2
 80087ba:	4605      	mov	r5, r0
 80087bc:	b118      	cbz	r0, 80087c6 <__swbuf_r+0x12>
 80087be:	6983      	ldr	r3, [r0, #24]
 80087c0:	b90b      	cbnz	r3, 80087c6 <__swbuf_r+0x12>
 80087c2:	f7ff fa95 	bl	8007cf0 <__sinit>
 80087c6:	4b21      	ldr	r3, [pc, #132]	; (800884c <__swbuf_r+0x98>)
 80087c8:	429c      	cmp	r4, r3
 80087ca:	d12a      	bne.n	8008822 <__swbuf_r+0x6e>
 80087cc:	686c      	ldr	r4, [r5, #4]
 80087ce:	69a3      	ldr	r3, [r4, #24]
 80087d0:	60a3      	str	r3, [r4, #8]
 80087d2:	89a3      	ldrh	r3, [r4, #12]
 80087d4:	071a      	lsls	r2, r3, #28
 80087d6:	d52e      	bpl.n	8008836 <__swbuf_r+0x82>
 80087d8:	6923      	ldr	r3, [r4, #16]
 80087da:	b363      	cbz	r3, 8008836 <__swbuf_r+0x82>
 80087dc:	6923      	ldr	r3, [r4, #16]
 80087de:	6820      	ldr	r0, [r4, #0]
 80087e0:	1ac0      	subs	r0, r0, r3
 80087e2:	6963      	ldr	r3, [r4, #20]
 80087e4:	b2f6      	uxtb	r6, r6
 80087e6:	4298      	cmp	r0, r3
 80087e8:	4637      	mov	r7, r6
 80087ea:	db04      	blt.n	80087f6 <__swbuf_r+0x42>
 80087ec:	4621      	mov	r1, r4
 80087ee:	4628      	mov	r0, r5
 80087f0:	f000 f94a 	bl	8008a88 <_fflush_r>
 80087f4:	bb28      	cbnz	r0, 8008842 <__swbuf_r+0x8e>
 80087f6:	68a3      	ldr	r3, [r4, #8]
 80087f8:	3b01      	subs	r3, #1
 80087fa:	60a3      	str	r3, [r4, #8]
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	1c5a      	adds	r2, r3, #1
 8008800:	6022      	str	r2, [r4, #0]
 8008802:	701e      	strb	r6, [r3, #0]
 8008804:	6963      	ldr	r3, [r4, #20]
 8008806:	3001      	adds	r0, #1
 8008808:	4298      	cmp	r0, r3
 800880a:	d004      	beq.n	8008816 <__swbuf_r+0x62>
 800880c:	89a3      	ldrh	r3, [r4, #12]
 800880e:	07db      	lsls	r3, r3, #31
 8008810:	d519      	bpl.n	8008846 <__swbuf_r+0x92>
 8008812:	2e0a      	cmp	r6, #10
 8008814:	d117      	bne.n	8008846 <__swbuf_r+0x92>
 8008816:	4621      	mov	r1, r4
 8008818:	4628      	mov	r0, r5
 800881a:	f000 f935 	bl	8008a88 <_fflush_r>
 800881e:	b190      	cbz	r0, 8008846 <__swbuf_r+0x92>
 8008820:	e00f      	b.n	8008842 <__swbuf_r+0x8e>
 8008822:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <__swbuf_r+0x9c>)
 8008824:	429c      	cmp	r4, r3
 8008826:	d101      	bne.n	800882c <__swbuf_r+0x78>
 8008828:	68ac      	ldr	r4, [r5, #8]
 800882a:	e7d0      	b.n	80087ce <__swbuf_r+0x1a>
 800882c:	4b09      	ldr	r3, [pc, #36]	; (8008854 <__swbuf_r+0xa0>)
 800882e:	429c      	cmp	r4, r3
 8008830:	bf08      	it	eq
 8008832:	68ec      	ldreq	r4, [r5, #12]
 8008834:	e7cb      	b.n	80087ce <__swbuf_r+0x1a>
 8008836:	4621      	mov	r1, r4
 8008838:	4628      	mov	r0, r5
 800883a:	f000 f81f 	bl	800887c <__swsetup_r>
 800883e:	2800      	cmp	r0, #0
 8008840:	d0cc      	beq.n	80087dc <__swbuf_r+0x28>
 8008842:	f04f 37ff 	mov.w	r7, #4294967295
 8008846:	4638      	mov	r0, r7
 8008848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800884a:	bf00      	nop
 800884c:	0800a3a4 	.word	0x0800a3a4
 8008850:	0800a3c4 	.word	0x0800a3c4
 8008854:	0800a384 	.word	0x0800a384

08008858 <_write_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	4c07      	ldr	r4, [pc, #28]	; (8008878 <_write_r+0x20>)
 800885c:	4605      	mov	r5, r0
 800885e:	4608      	mov	r0, r1
 8008860:	4611      	mov	r1, r2
 8008862:	2200      	movs	r2, #0
 8008864:	6022      	str	r2, [r4, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	f000 fab2 	bl	8008dd0 <_write>
 800886c:	1c43      	adds	r3, r0, #1
 800886e:	d102      	bne.n	8008876 <_write_r+0x1e>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	b103      	cbz	r3, 8008876 <_write_r+0x1e>
 8008874:	602b      	str	r3, [r5, #0]
 8008876:	bd38      	pop	{r3, r4, r5, pc}
 8008878:	20006b3c 	.word	0x20006b3c

0800887c <__swsetup_r>:
 800887c:	4b32      	ldr	r3, [pc, #200]	; (8008948 <__swsetup_r+0xcc>)
 800887e:	b570      	push	{r4, r5, r6, lr}
 8008880:	681d      	ldr	r5, [r3, #0]
 8008882:	4606      	mov	r6, r0
 8008884:	460c      	mov	r4, r1
 8008886:	b125      	cbz	r5, 8008892 <__swsetup_r+0x16>
 8008888:	69ab      	ldr	r3, [r5, #24]
 800888a:	b913      	cbnz	r3, 8008892 <__swsetup_r+0x16>
 800888c:	4628      	mov	r0, r5
 800888e:	f7ff fa2f 	bl	8007cf0 <__sinit>
 8008892:	4b2e      	ldr	r3, [pc, #184]	; (800894c <__swsetup_r+0xd0>)
 8008894:	429c      	cmp	r4, r3
 8008896:	d10f      	bne.n	80088b8 <__swsetup_r+0x3c>
 8008898:	686c      	ldr	r4, [r5, #4]
 800889a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800889e:	b29a      	uxth	r2, r3
 80088a0:	0715      	lsls	r5, r2, #28
 80088a2:	d42c      	bmi.n	80088fe <__swsetup_r+0x82>
 80088a4:	06d0      	lsls	r0, r2, #27
 80088a6:	d411      	bmi.n	80088cc <__swsetup_r+0x50>
 80088a8:	2209      	movs	r2, #9
 80088aa:	6032      	str	r2, [r6, #0]
 80088ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088b0:	81a3      	strh	r3, [r4, #12]
 80088b2:	f04f 30ff 	mov.w	r0, #4294967295
 80088b6:	bd70      	pop	{r4, r5, r6, pc}
 80088b8:	4b25      	ldr	r3, [pc, #148]	; (8008950 <__swsetup_r+0xd4>)
 80088ba:	429c      	cmp	r4, r3
 80088bc:	d101      	bne.n	80088c2 <__swsetup_r+0x46>
 80088be:	68ac      	ldr	r4, [r5, #8]
 80088c0:	e7eb      	b.n	800889a <__swsetup_r+0x1e>
 80088c2:	4b24      	ldr	r3, [pc, #144]	; (8008954 <__swsetup_r+0xd8>)
 80088c4:	429c      	cmp	r4, r3
 80088c6:	bf08      	it	eq
 80088c8:	68ec      	ldreq	r4, [r5, #12]
 80088ca:	e7e6      	b.n	800889a <__swsetup_r+0x1e>
 80088cc:	0751      	lsls	r1, r2, #29
 80088ce:	d512      	bpl.n	80088f6 <__swsetup_r+0x7a>
 80088d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088d2:	b141      	cbz	r1, 80088e6 <__swsetup_r+0x6a>
 80088d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088d8:	4299      	cmp	r1, r3
 80088da:	d002      	beq.n	80088e2 <__swsetup_r+0x66>
 80088dc:	4630      	mov	r0, r6
 80088de:	f000 f98f 	bl	8008c00 <_free_r>
 80088e2:	2300      	movs	r3, #0
 80088e4:	6363      	str	r3, [r4, #52]	; 0x34
 80088e6:	89a3      	ldrh	r3, [r4, #12]
 80088e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088ec:	81a3      	strh	r3, [r4, #12]
 80088ee:	2300      	movs	r3, #0
 80088f0:	6063      	str	r3, [r4, #4]
 80088f2:	6923      	ldr	r3, [r4, #16]
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	89a3      	ldrh	r3, [r4, #12]
 80088f8:	f043 0308 	orr.w	r3, r3, #8
 80088fc:	81a3      	strh	r3, [r4, #12]
 80088fe:	6923      	ldr	r3, [r4, #16]
 8008900:	b94b      	cbnz	r3, 8008916 <__swsetup_r+0x9a>
 8008902:	89a3      	ldrh	r3, [r4, #12]
 8008904:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800890c:	d003      	beq.n	8008916 <__swsetup_r+0x9a>
 800890e:	4621      	mov	r1, r4
 8008910:	4630      	mov	r0, r6
 8008912:	f000 f919 	bl	8008b48 <__smakebuf_r>
 8008916:	89a2      	ldrh	r2, [r4, #12]
 8008918:	f012 0301 	ands.w	r3, r2, #1
 800891c:	d00c      	beq.n	8008938 <__swsetup_r+0xbc>
 800891e:	2300      	movs	r3, #0
 8008920:	60a3      	str	r3, [r4, #8]
 8008922:	6963      	ldr	r3, [r4, #20]
 8008924:	425b      	negs	r3, r3
 8008926:	61a3      	str	r3, [r4, #24]
 8008928:	6923      	ldr	r3, [r4, #16]
 800892a:	b953      	cbnz	r3, 8008942 <__swsetup_r+0xc6>
 800892c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008930:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008934:	d1ba      	bne.n	80088ac <__swsetup_r+0x30>
 8008936:	bd70      	pop	{r4, r5, r6, pc}
 8008938:	0792      	lsls	r2, r2, #30
 800893a:	bf58      	it	pl
 800893c:	6963      	ldrpl	r3, [r4, #20]
 800893e:	60a3      	str	r3, [r4, #8]
 8008940:	e7f2      	b.n	8008928 <__swsetup_r+0xac>
 8008942:	2000      	movs	r0, #0
 8008944:	e7f7      	b.n	8008936 <__swsetup_r+0xba>
 8008946:	bf00      	nop
 8008948:	20000014 	.word	0x20000014
 800894c:	0800a3a4 	.word	0x0800a3a4
 8008950:	0800a3c4 	.word	0x0800a3c4
 8008954:	0800a384 	.word	0x0800a384

08008958 <_close_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	4c06      	ldr	r4, [pc, #24]	; (8008974 <_close_r+0x1c>)
 800895c:	2300      	movs	r3, #0
 800895e:	4605      	mov	r5, r0
 8008960:	4608      	mov	r0, r1
 8008962:	6023      	str	r3, [r4, #0]
 8008964:	f000 f9fe 	bl	8008d64 <_close>
 8008968:	1c43      	adds	r3, r0, #1
 800896a:	d102      	bne.n	8008972 <_close_r+0x1a>
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	b103      	cbz	r3, 8008972 <_close_r+0x1a>
 8008970:	602b      	str	r3, [r5, #0]
 8008972:	bd38      	pop	{r3, r4, r5, pc}
 8008974:	20006b3c 	.word	0x20006b3c

08008978 <__sflush_r>:
 8008978:	898a      	ldrh	r2, [r1, #12]
 800897a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800897e:	4605      	mov	r5, r0
 8008980:	0710      	lsls	r0, r2, #28
 8008982:	460c      	mov	r4, r1
 8008984:	d45a      	bmi.n	8008a3c <__sflush_r+0xc4>
 8008986:	684b      	ldr	r3, [r1, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	dc05      	bgt.n	8008998 <__sflush_r+0x20>
 800898c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800898e:	2b00      	cmp	r3, #0
 8008990:	dc02      	bgt.n	8008998 <__sflush_r+0x20>
 8008992:	2000      	movs	r0, #0
 8008994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800899a:	2e00      	cmp	r6, #0
 800899c:	d0f9      	beq.n	8008992 <__sflush_r+0x1a>
 800899e:	2300      	movs	r3, #0
 80089a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089a4:	682f      	ldr	r7, [r5, #0]
 80089a6:	602b      	str	r3, [r5, #0]
 80089a8:	d033      	beq.n	8008a12 <__sflush_r+0x9a>
 80089aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089ac:	89a3      	ldrh	r3, [r4, #12]
 80089ae:	075a      	lsls	r2, r3, #29
 80089b0:	d505      	bpl.n	80089be <__sflush_r+0x46>
 80089b2:	6863      	ldr	r3, [r4, #4]
 80089b4:	1ac0      	subs	r0, r0, r3
 80089b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089b8:	b10b      	cbz	r3, 80089be <__sflush_r+0x46>
 80089ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089bc:	1ac0      	subs	r0, r0, r3
 80089be:	2300      	movs	r3, #0
 80089c0:	4602      	mov	r2, r0
 80089c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089c4:	6a21      	ldr	r1, [r4, #32]
 80089c6:	4628      	mov	r0, r5
 80089c8:	47b0      	blx	r6
 80089ca:	1c43      	adds	r3, r0, #1
 80089cc:	89a3      	ldrh	r3, [r4, #12]
 80089ce:	d106      	bne.n	80089de <__sflush_r+0x66>
 80089d0:	6829      	ldr	r1, [r5, #0]
 80089d2:	291d      	cmp	r1, #29
 80089d4:	d84b      	bhi.n	8008a6e <__sflush_r+0xf6>
 80089d6:	4a2b      	ldr	r2, [pc, #172]	; (8008a84 <__sflush_r+0x10c>)
 80089d8:	40ca      	lsrs	r2, r1
 80089da:	07d6      	lsls	r6, r2, #31
 80089dc:	d547      	bpl.n	8008a6e <__sflush_r+0xf6>
 80089de:	2200      	movs	r2, #0
 80089e0:	6062      	str	r2, [r4, #4]
 80089e2:	04d9      	lsls	r1, r3, #19
 80089e4:	6922      	ldr	r2, [r4, #16]
 80089e6:	6022      	str	r2, [r4, #0]
 80089e8:	d504      	bpl.n	80089f4 <__sflush_r+0x7c>
 80089ea:	1c42      	adds	r2, r0, #1
 80089ec:	d101      	bne.n	80089f2 <__sflush_r+0x7a>
 80089ee:	682b      	ldr	r3, [r5, #0]
 80089f0:	b903      	cbnz	r3, 80089f4 <__sflush_r+0x7c>
 80089f2:	6560      	str	r0, [r4, #84]	; 0x54
 80089f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089f6:	602f      	str	r7, [r5, #0]
 80089f8:	2900      	cmp	r1, #0
 80089fa:	d0ca      	beq.n	8008992 <__sflush_r+0x1a>
 80089fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a00:	4299      	cmp	r1, r3
 8008a02:	d002      	beq.n	8008a0a <__sflush_r+0x92>
 8008a04:	4628      	mov	r0, r5
 8008a06:	f000 f8fb 	bl	8008c00 <_free_r>
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	6360      	str	r0, [r4, #52]	; 0x34
 8008a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a12:	6a21      	ldr	r1, [r4, #32]
 8008a14:	2301      	movs	r3, #1
 8008a16:	4628      	mov	r0, r5
 8008a18:	47b0      	blx	r6
 8008a1a:	1c41      	adds	r1, r0, #1
 8008a1c:	d1c6      	bne.n	80089ac <__sflush_r+0x34>
 8008a1e:	682b      	ldr	r3, [r5, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d0c3      	beq.n	80089ac <__sflush_r+0x34>
 8008a24:	2b1d      	cmp	r3, #29
 8008a26:	d001      	beq.n	8008a2c <__sflush_r+0xb4>
 8008a28:	2b16      	cmp	r3, #22
 8008a2a:	d101      	bne.n	8008a30 <__sflush_r+0xb8>
 8008a2c:	602f      	str	r7, [r5, #0]
 8008a2e:	e7b0      	b.n	8008992 <__sflush_r+0x1a>
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a36:	81a3      	strh	r3, [r4, #12]
 8008a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a3c:	690f      	ldr	r7, [r1, #16]
 8008a3e:	2f00      	cmp	r7, #0
 8008a40:	d0a7      	beq.n	8008992 <__sflush_r+0x1a>
 8008a42:	0793      	lsls	r3, r2, #30
 8008a44:	680e      	ldr	r6, [r1, #0]
 8008a46:	bf08      	it	eq
 8008a48:	694b      	ldreq	r3, [r1, #20]
 8008a4a:	600f      	str	r7, [r1, #0]
 8008a4c:	bf18      	it	ne
 8008a4e:	2300      	movne	r3, #0
 8008a50:	eba6 0807 	sub.w	r8, r6, r7
 8008a54:	608b      	str	r3, [r1, #8]
 8008a56:	f1b8 0f00 	cmp.w	r8, #0
 8008a5a:	dd9a      	ble.n	8008992 <__sflush_r+0x1a>
 8008a5c:	4643      	mov	r3, r8
 8008a5e:	463a      	mov	r2, r7
 8008a60:	6a21      	ldr	r1, [r4, #32]
 8008a62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a64:	4628      	mov	r0, r5
 8008a66:	47b0      	blx	r6
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	dc07      	bgt.n	8008a7c <__sflush_r+0x104>
 8008a6c:	89a3      	ldrh	r3, [r4, #12]
 8008a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a72:	81a3      	strh	r3, [r4, #12]
 8008a74:	f04f 30ff 	mov.w	r0, #4294967295
 8008a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a7c:	4407      	add	r7, r0
 8008a7e:	eba8 0800 	sub.w	r8, r8, r0
 8008a82:	e7e8      	b.n	8008a56 <__sflush_r+0xde>
 8008a84:	20400001 	.word	0x20400001

08008a88 <_fflush_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	690b      	ldr	r3, [r1, #16]
 8008a8c:	4605      	mov	r5, r0
 8008a8e:	460c      	mov	r4, r1
 8008a90:	b1db      	cbz	r3, 8008aca <_fflush_r+0x42>
 8008a92:	b118      	cbz	r0, 8008a9c <_fflush_r+0x14>
 8008a94:	6983      	ldr	r3, [r0, #24]
 8008a96:	b90b      	cbnz	r3, 8008a9c <_fflush_r+0x14>
 8008a98:	f7ff f92a 	bl	8007cf0 <__sinit>
 8008a9c:	4b0c      	ldr	r3, [pc, #48]	; (8008ad0 <_fflush_r+0x48>)
 8008a9e:	429c      	cmp	r4, r3
 8008aa0:	d109      	bne.n	8008ab6 <_fflush_r+0x2e>
 8008aa2:	686c      	ldr	r4, [r5, #4]
 8008aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aa8:	b17b      	cbz	r3, 8008aca <_fflush_r+0x42>
 8008aaa:	4621      	mov	r1, r4
 8008aac:	4628      	mov	r0, r5
 8008aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ab2:	f7ff bf61 	b.w	8008978 <__sflush_r>
 8008ab6:	4b07      	ldr	r3, [pc, #28]	; (8008ad4 <_fflush_r+0x4c>)
 8008ab8:	429c      	cmp	r4, r3
 8008aba:	d101      	bne.n	8008ac0 <_fflush_r+0x38>
 8008abc:	68ac      	ldr	r4, [r5, #8]
 8008abe:	e7f1      	b.n	8008aa4 <_fflush_r+0x1c>
 8008ac0:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <_fflush_r+0x50>)
 8008ac2:	429c      	cmp	r4, r3
 8008ac4:	bf08      	it	eq
 8008ac6:	68ec      	ldreq	r4, [r5, #12]
 8008ac8:	e7ec      	b.n	8008aa4 <_fflush_r+0x1c>
 8008aca:	2000      	movs	r0, #0
 8008acc:	bd38      	pop	{r3, r4, r5, pc}
 8008ace:	bf00      	nop
 8008ad0:	0800a3a4 	.word	0x0800a3a4
 8008ad4:	0800a3c4 	.word	0x0800a3c4
 8008ad8:	0800a384 	.word	0x0800a384

08008adc <_lseek_r>:
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	4c07      	ldr	r4, [pc, #28]	; (8008afc <_lseek_r+0x20>)
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	4608      	mov	r0, r1
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	6022      	str	r2, [r4, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	f000 f952 	bl	8008d94 <_lseek>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d102      	bne.n	8008afa <_lseek_r+0x1e>
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	b103      	cbz	r3, 8008afa <_lseek_r+0x1e>
 8008af8:	602b      	str	r3, [r5, #0]
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	20006b3c 	.word	0x20006b3c

08008b00 <__swhatbuf_r>:
 8008b00:	b570      	push	{r4, r5, r6, lr}
 8008b02:	460e      	mov	r6, r1
 8008b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b08:	2900      	cmp	r1, #0
 8008b0a:	b090      	sub	sp, #64	; 0x40
 8008b0c:	4614      	mov	r4, r2
 8008b0e:	461d      	mov	r5, r3
 8008b10:	da07      	bge.n	8008b22 <__swhatbuf_r+0x22>
 8008b12:	2300      	movs	r3, #0
 8008b14:	602b      	str	r3, [r5, #0]
 8008b16:	89b3      	ldrh	r3, [r6, #12]
 8008b18:	061a      	lsls	r2, r3, #24
 8008b1a:	d410      	bmi.n	8008b3e <__swhatbuf_r+0x3e>
 8008b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b20:	e00e      	b.n	8008b40 <__swhatbuf_r+0x40>
 8008b22:	aa01      	add	r2, sp, #4
 8008b24:	f000 f8f2 	bl	8008d0c <_fstat_r>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	dbf2      	blt.n	8008b12 <__swhatbuf_r+0x12>
 8008b2c:	9a02      	ldr	r2, [sp, #8]
 8008b2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b36:	425a      	negs	r2, r3
 8008b38:	415a      	adcs	r2, r3
 8008b3a:	602a      	str	r2, [r5, #0]
 8008b3c:	e7ee      	b.n	8008b1c <__swhatbuf_r+0x1c>
 8008b3e:	2340      	movs	r3, #64	; 0x40
 8008b40:	2000      	movs	r0, #0
 8008b42:	6023      	str	r3, [r4, #0]
 8008b44:	b010      	add	sp, #64	; 0x40
 8008b46:	bd70      	pop	{r4, r5, r6, pc}

08008b48 <__smakebuf_r>:
 8008b48:	898b      	ldrh	r3, [r1, #12]
 8008b4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b4c:	079d      	lsls	r5, r3, #30
 8008b4e:	4606      	mov	r6, r0
 8008b50:	460c      	mov	r4, r1
 8008b52:	d507      	bpl.n	8008b64 <__smakebuf_r+0x1c>
 8008b54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	6123      	str	r3, [r4, #16]
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	6163      	str	r3, [r4, #20]
 8008b60:	b002      	add	sp, #8
 8008b62:	bd70      	pop	{r4, r5, r6, pc}
 8008b64:	ab01      	add	r3, sp, #4
 8008b66:	466a      	mov	r2, sp
 8008b68:	f7ff ffca 	bl	8008b00 <__swhatbuf_r>
 8008b6c:	9900      	ldr	r1, [sp, #0]
 8008b6e:	4605      	mov	r5, r0
 8008b70:	4630      	mov	r0, r6
 8008b72:	f7ff f947 	bl	8007e04 <_malloc_r>
 8008b76:	b948      	cbnz	r0, 8008b8c <__smakebuf_r+0x44>
 8008b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b7c:	059a      	lsls	r2, r3, #22
 8008b7e:	d4ef      	bmi.n	8008b60 <__smakebuf_r+0x18>
 8008b80:	f023 0303 	bic.w	r3, r3, #3
 8008b84:	f043 0302 	orr.w	r3, r3, #2
 8008b88:	81a3      	strh	r3, [r4, #12]
 8008b8a:	e7e3      	b.n	8008b54 <__smakebuf_r+0xc>
 8008b8c:	4b0d      	ldr	r3, [pc, #52]	; (8008bc4 <__smakebuf_r+0x7c>)
 8008b8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	6020      	str	r0, [r4, #0]
 8008b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b98:	81a3      	strh	r3, [r4, #12]
 8008b9a:	9b00      	ldr	r3, [sp, #0]
 8008b9c:	6163      	str	r3, [r4, #20]
 8008b9e:	9b01      	ldr	r3, [sp, #4]
 8008ba0:	6120      	str	r0, [r4, #16]
 8008ba2:	b15b      	cbz	r3, 8008bbc <__smakebuf_r+0x74>
 8008ba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f000 f8c1 	bl	8008d30 <_isatty_r>
 8008bae:	b128      	cbz	r0, 8008bbc <__smakebuf_r+0x74>
 8008bb0:	89a3      	ldrh	r3, [r4, #12]
 8008bb2:	f023 0303 	bic.w	r3, r3, #3
 8008bb6:	f043 0301 	orr.w	r3, r3, #1
 8008bba:	81a3      	strh	r3, [r4, #12]
 8008bbc:	89a3      	ldrh	r3, [r4, #12]
 8008bbe:	431d      	orrs	r5, r3
 8008bc0:	81a5      	strh	r5, [r4, #12]
 8008bc2:	e7cd      	b.n	8008b60 <__smakebuf_r+0x18>
 8008bc4:	08007c71 	.word	0x08007c71

08008bc8 <memmove>:
 8008bc8:	4288      	cmp	r0, r1
 8008bca:	b510      	push	{r4, lr}
 8008bcc:	eb01 0302 	add.w	r3, r1, r2
 8008bd0:	d803      	bhi.n	8008bda <memmove+0x12>
 8008bd2:	1e42      	subs	r2, r0, #1
 8008bd4:	4299      	cmp	r1, r3
 8008bd6:	d10c      	bne.n	8008bf2 <memmove+0x2a>
 8008bd8:	bd10      	pop	{r4, pc}
 8008bda:	4298      	cmp	r0, r3
 8008bdc:	d2f9      	bcs.n	8008bd2 <memmove+0xa>
 8008bde:	1881      	adds	r1, r0, r2
 8008be0:	1ad2      	subs	r2, r2, r3
 8008be2:	42d3      	cmn	r3, r2
 8008be4:	d100      	bne.n	8008be8 <memmove+0x20>
 8008be6:	bd10      	pop	{r4, pc}
 8008be8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008bf0:	e7f7      	b.n	8008be2 <memmove+0x1a>
 8008bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bf6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008bfa:	e7eb      	b.n	8008bd4 <memmove+0xc>

08008bfc <__malloc_lock>:
 8008bfc:	4770      	bx	lr

08008bfe <__malloc_unlock>:
 8008bfe:	4770      	bx	lr

08008c00 <_free_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4605      	mov	r5, r0
 8008c04:	2900      	cmp	r1, #0
 8008c06:	d045      	beq.n	8008c94 <_free_r+0x94>
 8008c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c0c:	1f0c      	subs	r4, r1, #4
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	bfb8      	it	lt
 8008c12:	18e4      	addlt	r4, r4, r3
 8008c14:	f7ff fff2 	bl	8008bfc <__malloc_lock>
 8008c18:	4a1f      	ldr	r2, [pc, #124]	; (8008c98 <_free_r+0x98>)
 8008c1a:	6813      	ldr	r3, [r2, #0]
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	b933      	cbnz	r3, 8008c2e <_free_r+0x2e>
 8008c20:	6063      	str	r3, [r4, #4]
 8008c22:	6014      	str	r4, [r2, #0]
 8008c24:	4628      	mov	r0, r5
 8008c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c2a:	f7ff bfe8 	b.w	8008bfe <__malloc_unlock>
 8008c2e:	42a3      	cmp	r3, r4
 8008c30:	d90c      	bls.n	8008c4c <_free_r+0x4c>
 8008c32:	6821      	ldr	r1, [r4, #0]
 8008c34:	1862      	adds	r2, r4, r1
 8008c36:	4293      	cmp	r3, r2
 8008c38:	bf04      	itt	eq
 8008c3a:	681a      	ldreq	r2, [r3, #0]
 8008c3c:	685b      	ldreq	r3, [r3, #4]
 8008c3e:	6063      	str	r3, [r4, #4]
 8008c40:	bf04      	itt	eq
 8008c42:	1852      	addeq	r2, r2, r1
 8008c44:	6022      	streq	r2, [r4, #0]
 8008c46:	6004      	str	r4, [r0, #0]
 8008c48:	e7ec      	b.n	8008c24 <_free_r+0x24>
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	b10a      	cbz	r2, 8008c54 <_free_r+0x54>
 8008c50:	42a2      	cmp	r2, r4
 8008c52:	d9fa      	bls.n	8008c4a <_free_r+0x4a>
 8008c54:	6819      	ldr	r1, [r3, #0]
 8008c56:	1858      	adds	r0, r3, r1
 8008c58:	42a0      	cmp	r0, r4
 8008c5a:	d10b      	bne.n	8008c74 <_free_r+0x74>
 8008c5c:	6820      	ldr	r0, [r4, #0]
 8008c5e:	4401      	add	r1, r0
 8008c60:	1858      	adds	r0, r3, r1
 8008c62:	4282      	cmp	r2, r0
 8008c64:	6019      	str	r1, [r3, #0]
 8008c66:	d1dd      	bne.n	8008c24 <_free_r+0x24>
 8008c68:	6810      	ldr	r0, [r2, #0]
 8008c6a:	6852      	ldr	r2, [r2, #4]
 8008c6c:	605a      	str	r2, [r3, #4]
 8008c6e:	4401      	add	r1, r0
 8008c70:	6019      	str	r1, [r3, #0]
 8008c72:	e7d7      	b.n	8008c24 <_free_r+0x24>
 8008c74:	d902      	bls.n	8008c7c <_free_r+0x7c>
 8008c76:	230c      	movs	r3, #12
 8008c78:	602b      	str	r3, [r5, #0]
 8008c7a:	e7d3      	b.n	8008c24 <_free_r+0x24>
 8008c7c:	6820      	ldr	r0, [r4, #0]
 8008c7e:	1821      	adds	r1, r4, r0
 8008c80:	428a      	cmp	r2, r1
 8008c82:	bf04      	itt	eq
 8008c84:	6811      	ldreq	r1, [r2, #0]
 8008c86:	6852      	ldreq	r2, [r2, #4]
 8008c88:	6062      	str	r2, [r4, #4]
 8008c8a:	bf04      	itt	eq
 8008c8c:	1809      	addeq	r1, r1, r0
 8008c8e:	6021      	streq	r1, [r4, #0]
 8008c90:	605c      	str	r4, [r3, #4]
 8008c92:	e7c7      	b.n	8008c24 <_free_r+0x24>
 8008c94:	bd38      	pop	{r3, r4, r5, pc}
 8008c96:	bf00      	nop
 8008c98:	20000210 	.word	0x20000210

08008c9c <_realloc_r>:
 8008c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9e:	4607      	mov	r7, r0
 8008ca0:	4614      	mov	r4, r2
 8008ca2:	460e      	mov	r6, r1
 8008ca4:	b921      	cbnz	r1, 8008cb0 <_realloc_r+0x14>
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008cac:	f7ff b8aa 	b.w	8007e04 <_malloc_r>
 8008cb0:	b922      	cbnz	r2, 8008cbc <_realloc_r+0x20>
 8008cb2:	f7ff ffa5 	bl	8008c00 <_free_r>
 8008cb6:	4625      	mov	r5, r4
 8008cb8:	4628      	mov	r0, r5
 8008cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cbc:	f000 f848 	bl	8008d50 <_malloc_usable_size_r>
 8008cc0:	4284      	cmp	r4, r0
 8008cc2:	d90f      	bls.n	8008ce4 <_realloc_r+0x48>
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	f7ff f89c 	bl	8007e04 <_malloc_r>
 8008ccc:	4605      	mov	r5, r0
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d0f2      	beq.n	8008cb8 <_realloc_r+0x1c>
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4622      	mov	r2, r4
 8008cd6:	f7fe ff74 	bl	8007bc2 <memcpy>
 8008cda:	4631      	mov	r1, r6
 8008cdc:	4638      	mov	r0, r7
 8008cde:	f7ff ff8f 	bl	8008c00 <_free_r>
 8008ce2:	e7e9      	b.n	8008cb8 <_realloc_r+0x1c>
 8008ce4:	4635      	mov	r5, r6
 8008ce6:	e7e7      	b.n	8008cb8 <_realloc_r+0x1c>

08008ce8 <_read_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4c07      	ldr	r4, [pc, #28]	; (8008d08 <_read_r+0x20>)
 8008cec:	4605      	mov	r5, r0
 8008cee:	4608      	mov	r0, r1
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	6022      	str	r2, [r4, #0]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	f000 f854 	bl	8008da4 <_read>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d102      	bne.n	8008d06 <_read_r+0x1e>
 8008d00:	6823      	ldr	r3, [r4, #0]
 8008d02:	b103      	cbz	r3, 8008d06 <_read_r+0x1e>
 8008d04:	602b      	str	r3, [r5, #0]
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	20006b3c 	.word	0x20006b3c

08008d0c <_fstat_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4c07      	ldr	r4, [pc, #28]	; (8008d2c <_fstat_r+0x20>)
 8008d10:	2300      	movs	r3, #0
 8008d12:	4605      	mov	r5, r0
 8008d14:	4608      	mov	r0, r1
 8008d16:	4611      	mov	r1, r2
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	f000 f82b 	bl	8008d74 <_fstat>
 8008d1e:	1c43      	adds	r3, r0, #1
 8008d20:	d102      	bne.n	8008d28 <_fstat_r+0x1c>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	b103      	cbz	r3, 8008d28 <_fstat_r+0x1c>
 8008d26:	602b      	str	r3, [r5, #0]
 8008d28:	bd38      	pop	{r3, r4, r5, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20006b3c 	.word	0x20006b3c

08008d30 <_isatty_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4c06      	ldr	r4, [pc, #24]	; (8008d4c <_isatty_r+0x1c>)
 8008d34:	2300      	movs	r3, #0
 8008d36:	4605      	mov	r5, r0
 8008d38:	4608      	mov	r0, r1
 8008d3a:	6023      	str	r3, [r4, #0]
 8008d3c:	f000 f822 	bl	8008d84 <_isatty>
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	d102      	bne.n	8008d4a <_isatty_r+0x1a>
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	b103      	cbz	r3, 8008d4a <_isatty_r+0x1a>
 8008d48:	602b      	str	r3, [r5, #0]
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	20006b3c 	.word	0x20006b3c

08008d50 <_malloc_usable_size_r>:
 8008d50:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8008d54:	2800      	cmp	r0, #0
 8008d56:	f1a0 0004 	sub.w	r0, r0, #4
 8008d5a:	bfbc      	itt	lt
 8008d5c:	580b      	ldrlt	r3, [r1, r0]
 8008d5e:	18c0      	addlt	r0, r0, r3
 8008d60:	4770      	bx	lr
	...

08008d64 <_close>:
 8008d64:	4b02      	ldr	r3, [pc, #8]	; (8008d70 <_close+0xc>)
 8008d66:	2258      	movs	r2, #88	; 0x58
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6e:	4770      	bx	lr
 8008d70:	20006b3c 	.word	0x20006b3c

08008d74 <_fstat>:
 8008d74:	4b02      	ldr	r3, [pc, #8]	; (8008d80 <_fstat+0xc>)
 8008d76:	2258      	movs	r2, #88	; 0x58
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d7e:	4770      	bx	lr
 8008d80:	20006b3c 	.word	0x20006b3c

08008d84 <_isatty>:
 8008d84:	4b02      	ldr	r3, [pc, #8]	; (8008d90 <_isatty+0xc>)
 8008d86:	2258      	movs	r2, #88	; 0x58
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	20006b3c 	.word	0x20006b3c

08008d94 <_lseek>:
 8008d94:	4b02      	ldr	r3, [pc, #8]	; (8008da0 <_lseek+0xc>)
 8008d96:	2258      	movs	r2, #88	; 0x58
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9e:	4770      	bx	lr
 8008da0:	20006b3c 	.word	0x20006b3c

08008da4 <_read>:
 8008da4:	4b02      	ldr	r3, [pc, #8]	; (8008db0 <_read+0xc>)
 8008da6:	2258      	movs	r2, #88	; 0x58
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	f04f 30ff 	mov.w	r0, #4294967295
 8008dae:	4770      	bx	lr
 8008db0:	20006b3c 	.word	0x20006b3c

08008db4 <_sbrk>:
 8008db4:	4b04      	ldr	r3, [pc, #16]	; (8008dc8 <_sbrk+0x14>)
 8008db6:	6819      	ldr	r1, [r3, #0]
 8008db8:	4602      	mov	r2, r0
 8008dba:	b909      	cbnz	r1, 8008dc0 <_sbrk+0xc>
 8008dbc:	4903      	ldr	r1, [pc, #12]	; (8008dcc <_sbrk+0x18>)
 8008dbe:	6019      	str	r1, [r3, #0]
 8008dc0:	6818      	ldr	r0, [r3, #0]
 8008dc2:	4402      	add	r2, r0
 8008dc4:	601a      	str	r2, [r3, #0]
 8008dc6:	4770      	bx	lr
 8008dc8:	20000218 	.word	0x20000218
 8008dcc:	20006b40 	.word	0x20006b40

08008dd0 <_write>:
 8008dd0:	4b02      	ldr	r3, [pc, #8]	; (8008ddc <_write+0xc>)
 8008dd2:	2258      	movs	r2, #88	; 0x58
 8008dd4:	601a      	str	r2, [r3, #0]
 8008dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dda:	4770      	bx	lr
 8008ddc:	20006b3c 	.word	0x20006b3c

08008de0 <_init>:
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	bf00      	nop
 8008de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de6:	bc08      	pop	{r3}
 8008de8:	469e      	mov	lr, r3
 8008dea:	4770      	bx	lr

08008dec <_fini>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	bf00      	nop
 8008df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008df2:	bc08      	pop	{r3}
 8008df4:	469e      	mov	lr, r3
 8008df6:	4770      	bx	lr
